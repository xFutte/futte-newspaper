
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var app = (function () {
    'use strict';

    function noop() { }
    const identity = x => x;
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    let src_url_equal_anchor;
    function src_url_equal(element_src, url) {
        if (!src_url_equal_anchor) {
            src_url_equal_anchor = document.createElement('a');
        }
        src_url_equal_anchor.href = url;
        return element_src === src_url_equal_anchor.href;
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function get_all_dirty_from_scope($$scope) {
        if ($$scope.ctx.length > 32) {
            const dirty = [];
            const length = $$scope.ctx.length / 32;
            for (let i = 0; i < length; i++) {
                dirty[i] = -1;
            }
            return dirty;
        }
        return -1;
    }
    function exclude_internal_props(props) {
        const result = {};
        for (const k in props)
            if (k[0] !== '$')
                result[k] = props[k];
        return result;
    }
    function compute_rest_props(props, keys) {
        const rest = {};
        keys = new Set(keys);
        for (const k in props)
            if (!keys.has(k) && k[0] !== '$')
                rest[k] = props[k];
        return rest;
    }
    function action_destroyer(action_result) {
        return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
    }

    const is_client = typeof window !== 'undefined';
    let now = is_client
        ? () => window.performance.now()
        : () => Date.now();
    let raf = is_client ? cb => requestAnimationFrame(cb) : noop;

    const tasks = new Set();
    function run_tasks(now) {
        tasks.forEach(task => {
            if (!task.c(now)) {
                tasks.delete(task);
                task.f();
            }
        });
        if (tasks.size !== 0)
            raf(run_tasks);
    }
    /**
     * Creates a new task that runs on each raf frame
     * until it returns a falsy value or is aborted
     */
    function loop(callback) {
        let task;
        if (tasks.size === 0)
            raf(run_tasks);
        return {
            promise: new Promise(fulfill => {
                tasks.add(task = { c: callback, f: fulfill });
            }),
            abort() {
                tasks.delete(task);
            }
        };
    }
    function append(target, node) {
        target.appendChild(node);
    }
    function get_root_for_style(node) {
        if (!node)
            return document;
        const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
        if (root && root.host) {
            return root;
        }
        return node.ownerDocument;
    }
    function append_empty_stylesheet(node) {
        const style_element = element('style');
        append_stylesheet(get_root_for_style(node), style_element);
        return style_element.sheet;
    }
    function append_stylesheet(node, style) {
        append(node.head || node, style);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function set_attributes(node, attributes) {
        // @ts-ignore
        const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);
        for (const key in attributes) {
            if (attributes[key] == null) {
                node.removeAttribute(key);
            }
            else if (key === 'style') {
                node.style.cssText = attributes[key];
            }
            else if (key === '__value') {
                node.value = node[key] = attributes[key];
            }
            else if (descriptors[key] && descriptors[key].set) {
                node[key] = attributes[key];
            }
            else {
                attr(node, key, attributes[key]);
            }
        }
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function set_style(node, key, value, important) {
        if (value === null) {
            node.style.removeProperty(key);
        }
        else {
            node.style.setProperty(key, value, important ? 'important' : '');
        }
    }
    // unfortunately this can't be a constant as that wouldn't be tree-shakeable
    // so we cache the result instead
    let crossorigin;
    function is_crossorigin() {
        if (crossorigin === undefined) {
            crossorigin = false;
            try {
                if (typeof window !== 'undefined' && window.parent) {
                    void window.parent.document;
                }
            }
            catch (error) {
                crossorigin = true;
            }
        }
        return crossorigin;
    }
    function add_resize_listener(node, fn) {
        const computed_style = getComputedStyle(node);
        if (computed_style.position === 'static') {
            node.style.position = 'relative';
        }
        const iframe = element('iframe');
        iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +
            'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');
        iframe.setAttribute('aria-hidden', 'true');
        iframe.tabIndex = -1;
        const crossorigin = is_crossorigin();
        let unsubscribe;
        if (crossorigin) {
            iframe.src = "data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>";
            unsubscribe = listen(window, 'message', (event) => {
                if (event.source === iframe.contentWindow)
                    fn();
            });
        }
        else {
            iframe.src = 'about:blank';
            iframe.onload = () => {
                unsubscribe = listen(iframe.contentWindow, 'resize', fn);
            };
        }
        append(node, iframe);
        return () => {
            if (crossorigin) {
                unsubscribe();
            }
            else if (unsubscribe && iframe.contentWindow) {
                unsubscribe();
            }
            detach(iframe);
        };
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, cancelable, detail);
        return e;
    }

    // we need to store the information for multiple documents because a Svelte application could also contain iframes
    // https://github.com/sveltejs/svelte/issues/3624
    const managed_styles = new Map();
    let active = 0;
    // https://github.com/darkskyapp/string-hash/blob/master/index.js
    function hash(str) {
        let hash = 5381;
        let i = str.length;
        while (i--)
            hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
        return hash >>> 0;
    }
    function create_style_information(doc, node) {
        const info = { stylesheet: append_empty_stylesheet(node), rules: {} };
        managed_styles.set(doc, info);
        return info;
    }
    function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
        const step = 16.666 / duration;
        let keyframes = '{\n';
        for (let p = 0; p <= 1; p += step) {
            const t = a + (b - a) * ease(p);
            keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
        }
        const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
        const name = `__svelte_${hash(rule)}_${uid}`;
        const doc = get_root_for_style(node);
        const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);
        if (!rules[name]) {
            rules[name] = true;
            stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
        }
        const animation = node.style.animation || '';
        node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;
        active += 1;
        return name;
    }
    function delete_rule(node, name) {
        const previous = (node.style.animation || '').split(', ');
        const next = previous.filter(name
            ? anim => anim.indexOf(name) < 0 // remove specific animation
            : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
        );
        const deleted = previous.length - next.length;
        if (deleted) {
            node.style.animation = next.join(', ');
            active -= deleted;
            if (!active)
                clear_rules();
        }
    }
    function clear_rules() {
        raf(() => {
            if (active)
                return;
            managed_styles.forEach(info => {
                const { stylesheet } = info;
                let i = stylesheet.cssRules.length;
                while (i--)
                    stylesheet.deleteRule(i);
                info.rules = {};
            });
            managed_styles.clear();
        });
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function afterUpdate(fn) {
        get_current_component().$$.after_update.push(fn);
    }
    function onDestroy(fn) {
        get_current_component().$$.on_destroy.push(fn);
    }
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail, { cancelable = false } = {}) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail, { cancelable });
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
                return !event.defaultPrevented;
            }
            return true;
        };
    }
    function setContext(key, context) {
        get_current_component().$$.context.set(key, context);
        return context;
    }
    function getContext(key) {
        return get_current_component().$$.context.get(key);
    }
    // TODO figure out if we still want to support
    // shorthand events, or if we want to implement
    // a real bubbling mechanism
    function bubble(component, event) {
        const callbacks = component.$$.callbacks[event.type];
        if (callbacks) {
            // @ts-ignore
            callbacks.slice().forEach(fn => fn.call(this, event));
        }
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    function add_flush_callback(fn) {
        flush_callbacks.push(fn);
    }
    // flush() calls callbacks in this order:
    // 1. All beforeUpdate callbacks, in order: parents before children
    // 2. All bind:this callbacks, in reverse order: children before parents.
    // 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
    //    for afterUpdates called during the initial onMount, which are called in
    //    reverse order: children before parents.
    // Since callbacks might update component values, which could trigger another
    // call to flush(), the following steps guard against this:
    // 1. During beforeUpdate, any updated components will be added to the
    //    dirty_components array and will cause a reentrant call to flush(). Because
    //    the flush index is kept outside the function, the reentrant call will pick
    //    up where the earlier call left off and go through all dirty components. The
    //    current_component value is saved and restored so that the reentrant call will
    //    not interfere with the "parent" flush() call.
    // 2. bind:this callbacks cannot trigger new flush() calls.
    // 3. During afterUpdate, any updated components will NOT have their afterUpdate
    //    callback called a second time; the seen_callbacks set, outside the flush()
    //    function, guarantees this behavior.
    const seen_callbacks = new Set();
    let flushidx = 0; // Do *not* move this inside the flush() function
    function flush() {
        const saved_component = current_component;
        do {
            // first, call beforeUpdate functions
            // and update components
            while (flushidx < dirty_components.length) {
                const component = dirty_components[flushidx];
                flushidx++;
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            flushidx = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        seen_callbacks.clear();
        set_current_component(saved_component);
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }

    let promise;
    function wait() {
        if (!promise) {
            promise = Promise.resolve();
            promise.then(() => {
                promise = null;
            });
        }
        return promise;
    }
    function dispatch(node, direction, kind) {
        node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }
    const null_transition = { duration: 0 };
    function create_in_transition(node, fn, params) {
        let config = fn(node, params);
        let running = false;
        let animation_name;
        let task;
        let uid = 0;
        function cleanup() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function go() {
            const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
            if (css)
                animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
            tick(0, 1);
            const start_time = now() + delay;
            const end_time = start_time + duration;
            if (task)
                task.abort();
            running = true;
            add_render_callback(() => dispatch(node, true, 'start'));
            task = loop(now => {
                if (running) {
                    if (now >= end_time) {
                        tick(1, 0);
                        dispatch(node, true, 'end');
                        cleanup();
                        return running = false;
                    }
                    if (now >= start_time) {
                        const t = easing((now - start_time) / duration);
                        tick(t, 1 - t);
                    }
                }
                return running;
            });
        }
        let started = false;
        return {
            start() {
                if (started)
                    return;
                started = true;
                delete_rule(node);
                if (is_function(config)) {
                    config = config();
                    wait().then(go);
                }
                else {
                    go();
                }
            },
            invalidate() {
                started = false;
            },
            end() {
                if (running) {
                    cleanup();
                    running = false;
                }
            }
        };
    }
    function create_out_transition(node, fn, params) {
        let config = fn(node, params);
        let running = true;
        let animation_name;
        const group = outros;
        group.r += 1;
        function go() {
            const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
            if (css)
                animation_name = create_rule(node, 1, 0, duration, delay, easing, css);
            const start_time = now() + delay;
            const end_time = start_time + duration;
            add_render_callback(() => dispatch(node, false, 'start'));
            loop(now => {
                if (running) {
                    if (now >= end_time) {
                        tick(0, 1);
                        dispatch(node, false, 'end');
                        if (!--group.r) {
                            // this will result in `end()` being called,
                            // so we don't need to clean up here
                            run_all(group.c);
                        }
                        return false;
                    }
                    if (now >= start_time) {
                        const t = easing((now - start_time) / duration);
                        tick(1 - t, t);
                    }
                }
                return running;
            });
        }
        if (is_function(config)) {
            wait().then(() => {
                // @ts-ignore
                config = config();
                go();
            });
        }
        else {
            go();
        }
        return {
            end(reset) {
                if (reset && config.tick) {
                    config.tick(1, 0);
                }
                if (running) {
                    if (animation_name)
                        delete_rule(node, animation_name);
                    running = false;
                }
            }
        };
    }
    function create_bidirectional_transition(node, fn, params, intro) {
        let config = fn(node, params);
        let t = intro ? 0 : 1;
        let running_program = null;
        let pending_program = null;
        let animation_name = null;
        function clear_animation() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function init(program, duration) {
            const d = (program.b - t);
            duration *= Math.abs(d);
            return {
                a: t,
                b: program.b,
                d,
                duration,
                start: program.start,
                end: program.start + duration,
                group: program.group
            };
        }
        function go(b) {
            const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
            const program = {
                start: now() + delay,
                b
            };
            if (!b) {
                // @ts-ignore todo: improve typings
                program.group = outros;
                outros.r += 1;
            }
            if (running_program || pending_program) {
                pending_program = program;
            }
            else {
                // if this is an intro, and there's a delay, we need to do
                // an initial tick and/or apply CSS animation immediately
                if (css) {
                    clear_animation();
                    animation_name = create_rule(node, t, b, duration, delay, easing, css);
                }
                if (b)
                    tick(0, 1);
                running_program = init(program, duration);
                add_render_callback(() => dispatch(node, b, 'start'));
                loop(now => {
                    if (pending_program && now > pending_program.start) {
                        running_program = init(pending_program, duration);
                        pending_program = null;
                        dispatch(node, running_program.b, 'start');
                        if (css) {
                            clear_animation();
                            animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
                        }
                    }
                    if (running_program) {
                        if (now >= running_program.end) {
                            tick(t = running_program.b, 1 - t);
                            dispatch(node, running_program.b, 'end');
                            if (!pending_program) {
                                // we're done
                                if (running_program.b) {
                                    // intro — we can tidy up immediately
                                    clear_animation();
                                }
                                else {
                                    // outro — needs to be coordinated
                                    if (!--running_program.group.r)
                                        run_all(running_program.group.c);
                                }
                            }
                            running_program = null;
                        }
                        else if (now >= running_program.start) {
                            const p = now - running_program.start;
                            t = running_program.a + running_program.d * easing(p / running_program.duration);
                            tick(t, 1 - t);
                        }
                    }
                    return !!(running_program || pending_program);
                });
            }
        }
        return {
            run(b) {
                if (is_function(config)) {
                    wait().then(() => {
                        // @ts-ignore
                        config = config();
                        go(b);
                    });
                }
                else {
                    go(b);
                }
            },
            end() {
                clear_animation();
                running_program = pending_program = null;
            }
        };
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);

    function get_spread_update(levels, updates) {
        const update = {};
        const to_null_out = {};
        const accounted_for = { $$scope: 1 };
        let i = levels.length;
        while (i--) {
            const o = levels[i];
            const n = updates[i];
            if (n) {
                for (const key in o) {
                    if (!(key in n))
                        to_null_out[key] = 1;
                }
                for (const key in n) {
                    if (!accounted_for[key]) {
                        update[key] = n[key];
                        accounted_for[key] = 1;
                    }
                }
                levels[i] = n;
            }
            else {
                for (const key in o) {
                    accounted_for[key] = 1;
                }
            }
        }
        for (const key in to_null_out) {
            if (!(key in update))
                update[key] = undefined;
        }
        return update;
    }
    function get_spread_object(spread_props) {
        return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
    }

    function bind(component, name, callback) {
        const index = component.$$.props[name];
        if (index !== undefined) {
            component.$$.bound[index] = callback;
            callback(component.$$.ctx[index]);
        }
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.48.0' }, detail), { bubbles: true }));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    const subscriber_queue = [];
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = new Set();
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (const subscriber of subscribers) {
                        subscriber[1]();
                        subscriber_queue.push(subscriber, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                subscribers.delete(subscriber);
                if (subscribers.size === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }

    const visibility = writable(false);

    /**
     * A function that manage events listeners for receiving data from the client scripts
     * @param action The specific `action` that should be listened for.
     * @param handler The callback function that will handle data relayed by this function
     *
     * @example
     * useNuiEvent<{visibility: true, wasVisible: 'something'}>('setVisible', (data) => {
     *   // whatever logic you want
     * })
     *
     **/
    function useNuiEvent(action, handler) {
        const eventListener = (event) => {
            const { action: eventAction, data } = event.data;
            eventAction === action && handler(data);
        };
        onMount(() => window.addEventListener("message", eventListener));
        onDestroy(() => window.removeEventListener("message", eventListener));
    }

    /**
    * @param eventName - The endpoint eventname to target
    * @param data - Data you wish to send in the NUI Callback
    *
    * @return returnData - A promise for the data sent back by the NuiCallbacks CB argument
    */
    async function fetchNui(eventName, data = {}) {
        const options = {
            method: "post",
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
            },
            body: JSON.stringify(data),
        };
        const resourceName = window.GetParentResourceName
            ? window.GetParentResourceName()
            : "nui-frame-app";
        const resp = await fetch(`https://${resourceName}/${eventName}`, options);
        return await resp.json();
    }

    /* src\providers\VisibilityProvider.svelte generated by Svelte v3.48.0 */
    const file$y = "src\\providers\\VisibilityProvider.svelte";

    // (25:1) {#if isVisible}
    function create_if_block$f(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[2].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 2)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[1],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[1], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$f.name,
    		type: "if",
    		source: "(25:1) {#if isVisible}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$y(ctx) {
    	let main;
    	let current;
    	let if_block = /*isVisible*/ ctx[0] && create_if_block$f(ctx);

    	const block = {
    		c: function create() {
    			main = element("main");
    			if (if_block) if_block.c();
    			attr_dev(main, "class", "visibility svelte-pny5ep");
    			add_location(main, file$y, 23, 0, 719);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			if (if_block) if_block.m(main, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*isVisible*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*isVisible*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$f(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(main, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$y.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$y($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('VisibilityProvider', slots, ['default']);
    	let isVisible;

    	visibility.subscribe(visible => {
    		$$invalidate(0, isVisible = visible);
    	});

    	useNuiEvent('setVisible', visible => {
    		visibility.set(visible);
    	});

    	onMount(() => {
    		const keyHandler = e => {
    			if (isVisible && ['Escape'].includes(e.code)) {
    				fetchNui('newspaper:client:closeNewspaper');
    				visibility.set(false);
    			}
    		};

    		window.addEventListener('keydown', keyHandler);
    		return () => window.removeEventListener('keydown', keyHandler);
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<VisibilityProvider> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('$$scope' in $$props) $$invalidate(1, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		useNuiEvent,
    		fetchNui,
    		onMount,
    		visibility,
    		isVisible
    	});

    	$$self.$inject_state = $$props => {
    		if ('isVisible' in $$props) $$invalidate(0, isVisible = $$props.isVisible);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [isVisible, $$scope, slots];
    }

    class VisibilityProvider extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$y, create_fragment$y, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "VisibilityProvider",
    			options,
    			id: create_fragment$y.name
    		});
    	}
    }

    /* eslint-disable no-param-reassign */

    /**
     * Options for customizing ripples
     */
    const defaults = {
      color: 'currentColor',
      class: '',
      opacity: 0.1,
      centered: false,
      spreadingDuration: '.4s',
      spreadingDelay: '0s',
      spreadingTimingFunction: 'linear',
      clearingDuration: '1s',
      clearingDelay: '0s',
      clearingTimingFunction: 'ease-in-out',
    };

    /**
     * Creates a ripple element but does not destroy it (use RippleStop for that)
     *
     * @param {Event} e
     * @param {*} options
     * @returns Ripple element
     */
    function RippleStart(e, options = {}) {
      e.stopImmediatePropagation();
      const opts = { ...defaults, ...options };

      const isTouchEvent = e.touches ? !!e.touches[0] : false;
      // Parent element
      const target = isTouchEvent ? e.touches[0].currentTarget : e.currentTarget;

      // Create ripple
      const ripple = document.createElement('div');
      const rippleStyle = ripple.style;

      // Adding default stuff
      ripple.className = `material-ripple ${opts.class}`;
      rippleStyle.position = 'absolute';
      rippleStyle.color = 'inherit';
      rippleStyle.borderRadius = '50%';
      rippleStyle.pointerEvents = 'none';
      rippleStyle.width = '100px';
      rippleStyle.height = '100px';
      rippleStyle.marginTop = '-50px';
      rippleStyle.marginLeft = '-50px';
      target.appendChild(ripple);
      rippleStyle.opacity = opts.opacity;
      rippleStyle.transition = `transform ${opts.spreadingDuration} ${opts.spreadingTimingFunction} ${opts.spreadingDelay},opacity ${opts.clearingDuration} ${opts.clearingTimingFunction} ${opts.clearingDelay}`;
      rippleStyle.transform = 'scale(0) translate(0,0)';
      rippleStyle.background = opts.color;

      // Positioning ripple
      const targetRect = target.getBoundingClientRect();
      if (opts.centered) {
        rippleStyle.top = `${targetRect.height / 2}px`;
        rippleStyle.left = `${targetRect.width / 2}px`;
      } else {
        const distY = isTouchEvent ? e.touches[0].clientY : e.clientY;
        const distX = isTouchEvent ? e.touches[0].clientX : e.clientX;
        rippleStyle.top = `${distY - targetRect.top}px`;
        rippleStyle.left = `${distX - targetRect.left}px`;
      }

      // Enlarge ripple
      rippleStyle.transform = `scale(${
    Math.max(targetRect.width, targetRect.height) * 0.02
  }) translate(0,0)`;
      return ripple;
    }

    /**
     * Destroys the ripple, slowly fading it out.
     *
     * @param {Element} ripple
     */
    function RippleStop(ripple) {
      if (ripple) {
        ripple.addEventListener('transitionend', (e) => {
          if (e.propertyName === 'opacity') ripple.remove();
        });
        ripple.style.opacity = 0;
      }
    }

    /**
     * @param node {Element}
     */
    var Ripple = (node, _options = {}) => {
      let options = _options;
      let destroyed = false;
      let ripple;
      let keyboardActive = false;
      const handleStart = (e) => {
        ripple = RippleStart(e, options);
      };
      const handleStop = () => RippleStop(ripple);
      const handleKeyboardStart = (e) => {
        if (!keyboardActive && (e.keyCode === 13 || e.keyCode === 32)) {
          ripple = RippleStart(e, { ...options, centered: true });
          keyboardActive = true;
        }
      };
      const handleKeyboardStop = () => {
        keyboardActive = false;
        handleStop();
      };

      function setup() {
        node.classList.add('s-ripple-container');
        node.addEventListener('pointerdown', handleStart);
        node.addEventListener('pointerup', handleStop);
        node.addEventListener('pointerleave', handleStop);
        node.addEventListener('keydown', handleKeyboardStart);
        node.addEventListener('keyup', handleKeyboardStop);
        destroyed = false;
      }

      function destroy() {
        node.classList.remove('s-ripple-container');
        node.removeEventListener('pointerdown', handleStart);
        node.removeEventListener('pointerup', handleStop);
        node.removeEventListener('pointerleave', handleStop);
        node.removeEventListener('keydown', handleKeyboardStart);
        node.removeEventListener('keyup', handleKeyboardStop);
        destroyed = true;
      }

      if (options) setup();

      return {
        update(newOptions) {
          options = newOptions;
          if (options && destroyed) setup();
          else if (!(options || destroyed)) destroy();
        },
        destroy,
      };
    };

    /* node_modules\svelte-materialify\dist\components\MaterialApp\MaterialApp.svelte generated by Svelte v3.48.0 */

    const file$x = "node_modules\\svelte-materialify\\dist\\components\\MaterialApp\\MaterialApp.svelte";

    function create_fragment$x(ctx) {
    	let div;
    	let div_class_value;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[2].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", div_class_value = "s-app theme--" + /*theme*/ ctx[0]);
    			add_location(div, file$x, 13088, 0, 248639);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 2)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[1],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[1], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*theme*/ 1 && div_class_value !== (div_class_value = "s-app theme--" + /*theme*/ ctx[0])) {
    				attr_dev(div, "class", div_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$x.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$x($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MaterialApp', slots, ['default']);
    	let { theme = 'light' } = $$props;
    	const writable_props = ['theme'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<MaterialApp> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('theme' in $$props) $$invalidate(0, theme = $$props.theme);
    		if ('$$scope' in $$props) $$invalidate(1, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({ theme });

    	$$self.$inject_state = $$props => {
    		if ('theme' in $$props) $$invalidate(0, theme = $$props.theme);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [theme, $$scope, slots];
    }

    class MaterialApp extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$x, create_fragment$x, safe_not_equal, { theme: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MaterialApp",
    			options,
    			id: create_fragment$x.name
    		});
    	}

    	get theme() {
    		throw new Error("<MaterialApp>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set theme(value) {
    		throw new Error("<MaterialApp>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function format$1(input) {
      if (typeof input === 'number') return `${input}px`;
      return input;
    }

    /**
     * @param node {Element}
     * @param styles {Object}
     */
    var Style = (node, _styles) => {
      let styles = _styles;
      Object.entries(styles).forEach(([key, value]) => {
        if (value) node.style.setProperty(`--s-${key}`, format$1(value));
      });

      return {
        update(newStyles) {
          Object.entries(newStyles).forEach(([key, value]) => {
            if (value) {
              node.style.setProperty(`--s-${key}`, format$1(value));
              delete styles[key];
            }
          });

          Object.keys(styles).forEach((name) => node.style.removeProperty(`--s-${name}`));

          styles = newStyles;
        },
      };
    };

    /* node_modules\svelte-materialify\dist\components\Icon\Icon.svelte generated by Svelte v3.48.0 */
    const file$w = "node_modules\\svelte-materialify\\dist\\components\\Icon\\Icon.svelte";

    // (73:2) {#if path}
    function create_if_block$e(ctx) {
    	let svg;
    	let path_1;
    	let svg_viewBox_value;
    	let if_block = /*label*/ ctx[10] && create_if_block_1$7(ctx);

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path_1 = svg_element("path");
    			if (if_block) if_block.c();
    			attr_dev(path_1, "d", /*path*/ ctx[9]);
    			add_location(path_1, file$w, 78, 6, 1726);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "width", /*width*/ ctx[0]);
    			attr_dev(svg, "height", /*height*/ ctx[1]);
    			attr_dev(svg, "viewBox", svg_viewBox_value = "0 0 " + /*viewWidth*/ ctx[4] + " " + /*viewHeight*/ ctx[5]);
    			add_location(svg, file$w, 73, 4, 1594);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path_1);
    			if (if_block) if_block.m(path_1, null);
    		},
    		p: function update(ctx, dirty) {
    			if (/*label*/ ctx[10]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_1$7(ctx);
    					if_block.c();
    					if_block.m(path_1, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*path*/ 512) {
    				attr_dev(path_1, "d", /*path*/ ctx[9]);
    			}

    			if (dirty & /*width*/ 1) {
    				attr_dev(svg, "width", /*width*/ ctx[0]);
    			}

    			if (dirty & /*height*/ 2) {
    				attr_dev(svg, "height", /*height*/ ctx[1]);
    			}

    			if (dirty & /*viewWidth, viewHeight*/ 48 && svg_viewBox_value !== (svg_viewBox_value = "0 0 " + /*viewWidth*/ ctx[4] + " " + /*viewHeight*/ ctx[5])) {
    				attr_dev(svg, "viewBox", svg_viewBox_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$e.name,
    		type: "if",
    		source: "(73:2) {#if path}",
    		ctx
    	});

    	return block;
    }

    // (80:8) {#if label}
    function create_if_block_1$7(ctx) {
    	let title;
    	let t;

    	const block = {
    		c: function create() {
    			title = svg_element("title");
    			t = text(/*label*/ ctx[10]);
    			add_location(title, file$w, 80, 10, 1774);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, title, anchor);
    			append_dev(title, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*label*/ 1024) set_data_dev(t, /*label*/ ctx[10]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(title);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$7.name,
    		type: "if",
    		source: "(80:8) {#if label}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$w(ctx) {
    	let i;
    	let t;
    	let i_class_value;
    	let Style_action;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = /*path*/ ctx[9] && create_if_block$e(ctx);
    	const default_slot_template = /*#slots*/ ctx[13].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);

    	const block = {
    		c: function create() {
    			i = element("i");
    			if (if_block) if_block.c();
    			t = space();
    			if (default_slot) default_slot.c();
    			attr_dev(i, "aria-hidden", "true");
    			attr_dev(i, "class", i_class_value = "s-icon " + /*klass*/ ctx[2]);
    			attr_dev(i, "aria-label", /*label*/ ctx[10]);
    			attr_dev(i, "aria-disabled", /*disabled*/ ctx[8]);
    			attr_dev(i, "style", /*style*/ ctx[11]);
    			toggle_class(i, "spin", /*spin*/ ctx[7]);
    			toggle_class(i, "disabled", /*disabled*/ ctx[8]);
    			add_location(i, file$w, 63, 0, 1362);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, i, anchor);
    			if (if_block) if_block.m(i, null);
    			append_dev(i, t);

    			if (default_slot) {
    				default_slot.m(i, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(Style_action = Style.call(null, i, {
    					'icon-size': /*size*/ ctx[3],
    					'icon-rotate': `${/*rotate*/ ctx[6]}deg`
    				}));

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*path*/ ctx[9]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$e(ctx);
    					if_block.c();
    					if_block.m(i, t);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[12],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[12], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*klass*/ 4 && i_class_value !== (i_class_value = "s-icon " + /*klass*/ ctx[2])) {
    				attr_dev(i, "class", i_class_value);
    			}

    			if (!current || dirty & /*label*/ 1024) {
    				attr_dev(i, "aria-label", /*label*/ ctx[10]);
    			}

    			if (!current || dirty & /*disabled*/ 256) {
    				attr_dev(i, "aria-disabled", /*disabled*/ ctx[8]);
    			}

    			if (!current || dirty & /*style*/ 2048) {
    				attr_dev(i, "style", /*style*/ ctx[11]);
    			}

    			if (Style_action && is_function(Style_action.update) && dirty & /*size, rotate*/ 72) Style_action.update.call(null, {
    				'icon-size': /*size*/ ctx[3],
    				'icon-rotate': `${/*rotate*/ ctx[6]}deg`
    			});

    			if (dirty & /*klass, spin*/ 132) {
    				toggle_class(i, "spin", /*spin*/ ctx[7]);
    			}

    			if (dirty & /*klass, disabled*/ 260) {
    				toggle_class(i, "disabled", /*disabled*/ ctx[8]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(i);
    			if (if_block) if_block.d();
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$w.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$w($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Icon', slots, ['default']);
    	let { class: klass = '' } = $$props;
    	let { size = '24px' } = $$props;
    	let { width = size } = $$props;
    	let { height = size } = $$props;
    	let { viewWidth = '24' } = $$props;
    	let { viewHeight = '24' } = $$props;
    	let { rotate = 0 } = $$props;
    	let { spin = false } = $$props;
    	let { disabled = false } = $$props;
    	let { path = null } = $$props;
    	let { label = null } = $$props;
    	let { style = null } = $$props;

    	const writable_props = [
    		'class',
    		'size',
    		'width',
    		'height',
    		'viewWidth',
    		'viewHeight',
    		'rotate',
    		'spin',
    		'disabled',
    		'path',
    		'label',
    		'style'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Icon> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(2, klass = $$props.class);
    		if ('size' in $$props) $$invalidate(3, size = $$props.size);
    		if ('width' in $$props) $$invalidate(0, width = $$props.width);
    		if ('height' in $$props) $$invalidate(1, height = $$props.height);
    		if ('viewWidth' in $$props) $$invalidate(4, viewWidth = $$props.viewWidth);
    		if ('viewHeight' in $$props) $$invalidate(5, viewHeight = $$props.viewHeight);
    		if ('rotate' in $$props) $$invalidate(6, rotate = $$props.rotate);
    		if ('spin' in $$props) $$invalidate(7, spin = $$props.spin);
    		if ('disabled' in $$props) $$invalidate(8, disabled = $$props.disabled);
    		if ('path' in $$props) $$invalidate(9, path = $$props.path);
    		if ('label' in $$props) $$invalidate(10, label = $$props.label);
    		if ('style' in $$props) $$invalidate(11, style = $$props.style);
    		if ('$$scope' in $$props) $$invalidate(12, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		Style,
    		klass,
    		size,
    		width,
    		height,
    		viewWidth,
    		viewHeight,
    		rotate,
    		spin,
    		disabled,
    		path,
    		label,
    		style
    	});

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(2, klass = $$props.klass);
    		if ('size' in $$props) $$invalidate(3, size = $$props.size);
    		if ('width' in $$props) $$invalidate(0, width = $$props.width);
    		if ('height' in $$props) $$invalidate(1, height = $$props.height);
    		if ('viewWidth' in $$props) $$invalidate(4, viewWidth = $$props.viewWidth);
    		if ('viewHeight' in $$props) $$invalidate(5, viewHeight = $$props.viewHeight);
    		if ('rotate' in $$props) $$invalidate(6, rotate = $$props.rotate);
    		if ('spin' in $$props) $$invalidate(7, spin = $$props.spin);
    		if ('disabled' in $$props) $$invalidate(8, disabled = $$props.disabled);
    		if ('path' in $$props) $$invalidate(9, path = $$props.path);
    		if ('label' in $$props) $$invalidate(10, label = $$props.label);
    		if ('style' in $$props) $$invalidate(11, style = $$props.style);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*size*/ 8) {
    			{
    				$$invalidate(0, width = size);
    				$$invalidate(1, height = size);
    			}
    		}
    	};

    	return [
    		width,
    		height,
    		klass,
    		size,
    		viewWidth,
    		viewHeight,
    		rotate,
    		spin,
    		disabled,
    		path,
    		label,
    		style,
    		$$scope,
    		slots
    	];
    }

    class Icon extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$w, create_fragment$w, safe_not_equal, {
    			class: 2,
    			size: 3,
    			width: 0,
    			height: 1,
    			viewWidth: 4,
    			viewHeight: 5,
    			rotate: 6,
    			spin: 7,
    			disabled: 8,
    			path: 9,
    			label: 10,
    			style: 11
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Icon",
    			options,
    			id: create_fragment$w.name
    		});
    	}

    	get class() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get size() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get width() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set width(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get height() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set height(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get viewWidth() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set viewWidth(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get viewHeight() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set viewHeight(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rotate() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rotate(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get spin() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set spin(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get path() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set path(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get label() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const filter = (classes) => classes.filter((x) => !!x);
    const format = (classes) => classes.split(' ').filter((x) => !!x);

    /**
     * @param node {Element}
     * @param classes {Array<string>}
     */
    var Class = (node, _classes) => {
      let classes = _classes;
      node.classList.add(...format(filter(classes).join(' ')));
      return {
        update(_newClasses) {
          const newClasses = _newClasses;
          newClasses.forEach((klass, i) => {
            if (klass) node.classList.add(...format(klass));
            else if (classes[i]) node.classList.remove(...format(classes[i]));
          });
          classes = newClasses;
        },
      };
    };

    /* node_modules\svelte-materialify\dist\components\Button\Button.svelte generated by Svelte v3.48.0 */
    const file$v = "node_modules\\svelte-materialify\\dist\\components\\Button\\Button.svelte";

    function create_fragment$v(ctx) {
    	let button_1;
    	let span;
    	let button_1_class_value;
    	let Class_action;
    	let Ripple_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[19].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[18], null);

    	let button_1_levels = [
    		{
    			class: button_1_class_value = "s-btn size-" + /*size*/ ctx[5] + " " + /*klass*/ ctx[1]
    		},
    		{ type: /*type*/ ctx[14] },
    		{ style: /*style*/ ctx[16] },
    		{ disabled: /*disabled*/ ctx[11] },
    		{ "aria-disabled": /*disabled*/ ctx[11] },
    		/*$$restProps*/ ctx[17]
    	];

    	let button_1_data = {};

    	for (let i = 0; i < button_1_levels.length; i += 1) {
    		button_1_data = assign(button_1_data, button_1_levels[i]);
    	}

    	const block_1 = {
    		c: function create() {
    			button_1 = element("button");
    			span = element("span");
    			if (default_slot) default_slot.c();
    			attr_dev(span, "class", "s-btn__content");
    			add_location(span, file$v, 272, 2, 5902);
    			set_attributes(button_1, button_1_data);
    			toggle_class(button_1, "s-btn--fab", /*fab*/ ctx[2]);
    			toggle_class(button_1, "icon", /*icon*/ ctx[3]);
    			toggle_class(button_1, "block", /*block*/ ctx[4]);
    			toggle_class(button_1, "tile", /*tile*/ ctx[6]);
    			toggle_class(button_1, "text", /*text*/ ctx[7] || /*icon*/ ctx[3]);
    			toggle_class(button_1, "depressed", /*depressed*/ ctx[8] || /*text*/ ctx[7] || /*disabled*/ ctx[11] || /*outlined*/ ctx[9] || /*icon*/ ctx[3]);
    			toggle_class(button_1, "outlined", /*outlined*/ ctx[9]);
    			toggle_class(button_1, "rounded", /*rounded*/ ctx[10]);
    			toggle_class(button_1, "disabled", /*disabled*/ ctx[11]);
    			add_location(button_1, file$v, 252, 0, 5452);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button_1, anchor);
    			append_dev(button_1, span);

    			if (default_slot) {
    				default_slot.m(span, null);
    			}

    			if (button_1.autofocus) button_1.focus();
    			/*button_1_binding*/ ctx[21](button_1);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(Class_action = Class.call(null, button_1, [/*active*/ ctx[12] && /*activeClass*/ ctx[13]])),
    					action_destroyer(Ripple_action = Ripple.call(null, button_1, /*ripple*/ ctx[15])),
    					listen_dev(button_1, "click", /*click_handler*/ ctx[20], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 262144)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[18],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[18])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[18], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(button_1, button_1_data = get_spread_update(button_1_levels, [
    				(!current || dirty & /*size, klass*/ 34 && button_1_class_value !== (button_1_class_value = "s-btn size-" + /*size*/ ctx[5] + " " + /*klass*/ ctx[1])) && { class: button_1_class_value },
    				(!current || dirty & /*type*/ 16384) && { type: /*type*/ ctx[14] },
    				(!current || dirty & /*style*/ 65536) && { style: /*style*/ ctx[16] },
    				(!current || dirty & /*disabled*/ 2048) && { disabled: /*disabled*/ ctx[11] },
    				(!current || dirty & /*disabled*/ 2048) && { "aria-disabled": /*disabled*/ ctx[11] },
    				dirty & /*$$restProps*/ 131072 && /*$$restProps*/ ctx[17]
    			]));

    			if (Class_action && is_function(Class_action.update) && dirty & /*active, activeClass*/ 12288) Class_action.update.call(null, [/*active*/ ctx[12] && /*activeClass*/ ctx[13]]);
    			if (Ripple_action && is_function(Ripple_action.update) && dirty & /*ripple*/ 32768) Ripple_action.update.call(null, /*ripple*/ ctx[15]);
    			toggle_class(button_1, "s-btn--fab", /*fab*/ ctx[2]);
    			toggle_class(button_1, "icon", /*icon*/ ctx[3]);
    			toggle_class(button_1, "block", /*block*/ ctx[4]);
    			toggle_class(button_1, "tile", /*tile*/ ctx[6]);
    			toggle_class(button_1, "text", /*text*/ ctx[7] || /*icon*/ ctx[3]);
    			toggle_class(button_1, "depressed", /*depressed*/ ctx[8] || /*text*/ ctx[7] || /*disabled*/ ctx[11] || /*outlined*/ ctx[9] || /*icon*/ ctx[3]);
    			toggle_class(button_1, "outlined", /*outlined*/ ctx[9]);
    			toggle_class(button_1, "rounded", /*rounded*/ ctx[10]);
    			toggle_class(button_1, "disabled", /*disabled*/ ctx[11]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button_1);
    			if (default_slot) default_slot.d(detaching);
    			/*button_1_binding*/ ctx[21](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block: block_1,
    		id: create_fragment$v.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block_1;
    }

    function instance$v($$self, $$props, $$invalidate) {
    	const omit_props_names = [
    		"class","fab","icon","block","size","tile","text","depressed","outlined","rounded","disabled","active","activeClass","type","ripple","style","button"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Button', slots, ['default']);
    	let { class: klass = '' } = $$props;
    	let { fab = false } = $$props;
    	let { icon = false } = $$props;
    	let { block = false } = $$props;
    	let { size = 'default' } = $$props;
    	let { tile = false } = $$props;
    	let { text = false } = $$props;
    	let { depressed = false } = $$props;
    	let { outlined = false } = $$props;
    	let { rounded = false } = $$props;
    	let { disabled = null } = $$props;
    	let { active = false } = $$props;
    	let { activeClass = 'active' } = $$props;
    	let { type = 'button' } = $$props;
    	let { ripple = {} } = $$props;
    	let { style = null } = $$props;
    	let { button = null } = $$props;

    	function click_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function button_1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			button = $$value;
    			$$invalidate(0, button);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(17, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('class' in $$new_props) $$invalidate(1, klass = $$new_props.class);
    		if ('fab' in $$new_props) $$invalidate(2, fab = $$new_props.fab);
    		if ('icon' in $$new_props) $$invalidate(3, icon = $$new_props.icon);
    		if ('block' in $$new_props) $$invalidate(4, block = $$new_props.block);
    		if ('size' in $$new_props) $$invalidate(5, size = $$new_props.size);
    		if ('tile' in $$new_props) $$invalidate(6, tile = $$new_props.tile);
    		if ('text' in $$new_props) $$invalidate(7, text = $$new_props.text);
    		if ('depressed' in $$new_props) $$invalidate(8, depressed = $$new_props.depressed);
    		if ('outlined' in $$new_props) $$invalidate(9, outlined = $$new_props.outlined);
    		if ('rounded' in $$new_props) $$invalidate(10, rounded = $$new_props.rounded);
    		if ('disabled' in $$new_props) $$invalidate(11, disabled = $$new_props.disabled);
    		if ('active' in $$new_props) $$invalidate(12, active = $$new_props.active);
    		if ('activeClass' in $$new_props) $$invalidate(13, activeClass = $$new_props.activeClass);
    		if ('type' in $$new_props) $$invalidate(14, type = $$new_props.type);
    		if ('ripple' in $$new_props) $$invalidate(15, ripple = $$new_props.ripple);
    		if ('style' in $$new_props) $$invalidate(16, style = $$new_props.style);
    		if ('button' in $$new_props) $$invalidate(0, button = $$new_props.button);
    		if ('$$scope' in $$new_props) $$invalidate(18, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		Ripple,
    		Class,
    		klass,
    		fab,
    		icon,
    		block,
    		size,
    		tile,
    		text,
    		depressed,
    		outlined,
    		rounded,
    		disabled,
    		active,
    		activeClass,
    		type,
    		ripple,
    		style,
    		button
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('klass' in $$props) $$invalidate(1, klass = $$new_props.klass);
    		if ('fab' in $$props) $$invalidate(2, fab = $$new_props.fab);
    		if ('icon' in $$props) $$invalidate(3, icon = $$new_props.icon);
    		if ('block' in $$props) $$invalidate(4, block = $$new_props.block);
    		if ('size' in $$props) $$invalidate(5, size = $$new_props.size);
    		if ('tile' in $$props) $$invalidate(6, tile = $$new_props.tile);
    		if ('text' in $$props) $$invalidate(7, text = $$new_props.text);
    		if ('depressed' in $$props) $$invalidate(8, depressed = $$new_props.depressed);
    		if ('outlined' in $$props) $$invalidate(9, outlined = $$new_props.outlined);
    		if ('rounded' in $$props) $$invalidate(10, rounded = $$new_props.rounded);
    		if ('disabled' in $$props) $$invalidate(11, disabled = $$new_props.disabled);
    		if ('active' in $$props) $$invalidate(12, active = $$new_props.active);
    		if ('activeClass' in $$props) $$invalidate(13, activeClass = $$new_props.activeClass);
    		if ('type' in $$props) $$invalidate(14, type = $$new_props.type);
    		if ('ripple' in $$props) $$invalidate(15, ripple = $$new_props.ripple);
    		if ('style' in $$props) $$invalidate(16, style = $$new_props.style);
    		if ('button' in $$props) $$invalidate(0, button = $$new_props.button);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		button,
    		klass,
    		fab,
    		icon,
    		block,
    		size,
    		tile,
    		text,
    		depressed,
    		outlined,
    		rounded,
    		disabled,
    		active,
    		activeClass,
    		type,
    		ripple,
    		style,
    		$$restProps,
    		$$scope,
    		slots,
    		click_handler,
    		button_1_binding
    	];
    }

    class Button extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$v, create_fragment$v, safe_not_equal, {
    			class: 1,
    			fab: 2,
    			icon: 3,
    			block: 4,
    			size: 5,
    			tile: 6,
    			text: 7,
    			depressed: 8,
    			outlined: 9,
    			rounded: 10,
    			disabled: 11,
    			active: 12,
    			activeClass: 13,
    			type: 14,
    			ripple: 15,
    			style: 16,
    			button: 0
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Button",
    			options,
    			id: create_fragment$v.name
    		});
    	}

    	get class() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fab() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fab(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get icon() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set icon(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get block() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set block(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get size() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tile() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tile(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get text() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set text(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get depressed() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set depressed(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get outlined() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set outlined(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rounded() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rounded(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get active() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set active(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get activeClass() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set activeClass(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get type() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ripple() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ripple(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get button() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set button(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-materialify\dist\components\ItemGroup\ItemGroup.svelte generated by Svelte v3.48.0 */
    const file$u = "node_modules\\svelte-materialify\\dist\\components\\ItemGroup\\ItemGroup.svelte";

    function create_fragment$u(ctx) {
    	let div;
    	let div_class_value;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[9].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", div_class_value = "s-item-group " + /*klass*/ ctx[0]);
    			attr_dev(div, "role", /*role*/ ctx[1]);
    			attr_dev(div, "style", /*style*/ ctx[2]);
    			add_location(div, file$u, 58, 0, 1536);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[8],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*klass*/ 1 && div_class_value !== (div_class_value = "s-item-group " + /*klass*/ ctx[0])) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (!current || dirty & /*role*/ 2) {
    				attr_dev(div, "role", /*role*/ ctx[1]);
    			}

    			if (!current || dirty & /*style*/ 4) {
    				attr_dev(div, "style", /*style*/ ctx[2]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$u.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const ITEM_GROUP = {};

    function instance$u($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ItemGroup', slots, ['default']);
    	let { class: klass = '' } = $$props;
    	let { activeClass = '' } = $$props;
    	let { value = [] } = $$props;
    	let { multiple = false } = $$props;
    	let { mandatory = false } = $$props;
    	let { max = Infinity } = $$props;
    	let { role = null } = $$props;
    	let { style = null } = $$props;
    	const dispatch = createEventDispatcher();
    	const valueStore = writable(value);
    	let startIndex = -1;

    	setContext(ITEM_GROUP, {
    		select: val => {
    			if (multiple) {
    				if (value.includes(val)) {
    					if (!mandatory || value.length > 1) {
    						value.splice(value.indexOf(val), 1);
    						$$invalidate(3, value);
    					}
    				} else if (value.length < max) $$invalidate(3, value = [...value, val]);
    			} else if (value === val) {
    				if (!mandatory) $$invalidate(3, value = null);
    			} else $$invalidate(3, value = val);
    		},
    		register: setValue => {
    			const u = valueStore.subscribe(val => {
    				setValue(multiple ? val : [val]);
    			});

    			onDestroy(u);
    		},
    		index: () => {
    			startIndex += 1;
    			return startIndex;
    		},
    		activeClass
    	});

    	const writable_props = [
    		'class',
    		'activeClass',
    		'value',
    		'multiple',
    		'mandatory',
    		'max',
    		'role',
    		'style'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ItemGroup> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(0, klass = $$props.class);
    		if ('activeClass' in $$props) $$invalidate(4, activeClass = $$props.activeClass);
    		if ('value' in $$props) $$invalidate(3, value = $$props.value);
    		if ('multiple' in $$props) $$invalidate(5, multiple = $$props.multiple);
    		if ('mandatory' in $$props) $$invalidate(6, mandatory = $$props.mandatory);
    		if ('max' in $$props) $$invalidate(7, max = $$props.max);
    		if ('role' in $$props) $$invalidate(1, role = $$props.role);
    		if ('style' in $$props) $$invalidate(2, style = $$props.style);
    		if ('$$scope' in $$props) $$invalidate(8, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		ITEM_GROUP,
    		setContext,
    		createEventDispatcher,
    		onDestroy,
    		writable,
    		klass,
    		activeClass,
    		value,
    		multiple,
    		mandatory,
    		max,
    		role,
    		style,
    		dispatch,
    		valueStore,
    		startIndex
    	});

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(0, klass = $$props.klass);
    		if ('activeClass' in $$props) $$invalidate(4, activeClass = $$props.activeClass);
    		if ('value' in $$props) $$invalidate(3, value = $$props.value);
    		if ('multiple' in $$props) $$invalidate(5, multiple = $$props.multiple);
    		if ('mandatory' in $$props) $$invalidate(6, mandatory = $$props.mandatory);
    		if ('max' in $$props) $$invalidate(7, max = $$props.max);
    		if ('role' in $$props) $$invalidate(1, role = $$props.role);
    		if ('style' in $$props) $$invalidate(2, style = $$props.style);
    		if ('startIndex' in $$props) startIndex = $$props.startIndex;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*value*/ 8) {
    			valueStore.set(value);
    		}

    		if ($$self.$$.dirty & /*value*/ 8) {
    			dispatch('change', value);
    		}
    	};

    	return [
    		klass,
    		role,
    		style,
    		value,
    		activeClass,
    		multiple,
    		mandatory,
    		max,
    		$$scope,
    		slots
    	];
    }

    class ItemGroup extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$u, create_fragment$u, safe_not_equal, {
    			class: 0,
    			activeClass: 4,
    			value: 3,
    			multiple: 5,
    			mandatory: 6,
    			max: 7,
    			role: 1,
    			style: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ItemGroup",
    			options,
    			id: create_fragment$u.name
    		});
    	}

    	get class() {
    		throw new Error("<ItemGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<ItemGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get activeClass() {
    		throw new Error("<ItemGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set activeClass(value) {
    		throw new Error("<ItemGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<ItemGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<ItemGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get multiple() {
    		throw new Error("<ItemGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set multiple(value) {
    		throw new Error("<ItemGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get mandatory() {
    		throw new Error("<ItemGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set mandatory(value) {
    		throw new Error("<ItemGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get max() {
    		throw new Error("<ItemGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set max(value) {
    		throw new Error("<ItemGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get role() {
    		throw new Error("<ItemGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set role(value) {
    		throw new Error("<ItemGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<ItemGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<ItemGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* eslint-disable no-param-reassign */

    /**
     * @param {string} klass
     */
    function formatClass$1(klass) {
      return klass.split(' ').map((i) => {
        if (/^(lighten|darken|accent)-/.test(i)) {
          return `text-${i}`;
        }
        return `${i}-text`;
      });
    }

    function setTextColor(node, text) {
      if (/^(#|rgb|hsl|currentColor)/.test(text)) {
        // This is a CSS hex.
        node.style.color = text;
        return false;
      }
      if (text.startsWith('--')) {
        // This is a CSS variable.
        node.style.color = `var(${text})`;
        return false;
      }
      const klass = formatClass$1(text);
      node.classList.add(...klass);
      return klass;
    }

    /**
     * @param node {Element}
     * @param text {string|boolean}
     */
    var TextColor = (node, text) => {
      let klass;
      if (typeof text === 'string') {
        klass = setTextColor(node, text);
      }

      return {
        update(newText) {
          if (klass) {
            node.classList.remove(...klass);
          } else {
            node.style.color = null;
          }

          if (typeof newText === 'string') {
            klass = setTextColor(node, newText);
          }
        },
      };
    };

    /* node_modules\svelte-materialify\dist\components\Input\Input.svelte generated by Svelte v3.48.0 */
    const file$t = "node_modules\\svelte-materialify\\dist\\components\\Input\\Input.svelte";
    const get_append_outer_slot_changes$1 = dirty => ({});
    const get_append_outer_slot_context$1 = ctx => ({});
    const get_messages_slot_changes = dirty => ({});
    const get_messages_slot_context = ctx => ({});
    const get_prepend_outer_slot_changes$1 = dirty => ({});
    const get_prepend_outer_slot_context$1 = ctx => ({});

    function create_fragment$t(ctx) {
    	let div3;
    	let t0;
    	let div2;
    	let div0;
    	let t1;
    	let div1;
    	let t2;
    	let div3_class_value;
    	let TextColor_action;
    	let current;
    	let mounted;
    	let dispose;
    	const prepend_outer_slot_template = /*#slots*/ ctx[9]["prepend-outer"];
    	const prepend_outer_slot = create_slot(prepend_outer_slot_template, ctx, /*$$scope*/ ctx[8], get_prepend_outer_slot_context$1);
    	const default_slot_template = /*#slots*/ ctx[9].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);
    	const messages_slot_template = /*#slots*/ ctx[9].messages;
    	const messages_slot = create_slot(messages_slot_template, ctx, /*$$scope*/ ctx[8], get_messages_slot_context);
    	const append_outer_slot_template = /*#slots*/ ctx[9]["append-outer"];
    	const append_outer_slot = create_slot(append_outer_slot_template, ctx, /*$$scope*/ ctx[8], get_append_outer_slot_context$1);

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			if (prepend_outer_slot) prepend_outer_slot.c();
    			t0 = space();
    			div2 = element("div");
    			div0 = element("div");
    			if (default_slot) default_slot.c();
    			t1 = space();
    			div1 = element("div");
    			if (messages_slot) messages_slot.c();
    			t2 = space();
    			if (append_outer_slot) append_outer_slot.c();
    			attr_dev(div0, "class", "s-input__slot");
    			add_location(div0, file$t, 386, 4, 9721);
    			attr_dev(div1, "class", "s-input__details");
    			add_location(div1, file$t, 389, 4, 9779);
    			attr_dev(div2, "class", "s-input__control");
    			add_location(div2, file$t, 385, 2, 9686);
    			attr_dev(div3, "class", div3_class_value = "s-input " + /*klass*/ ctx[0]);
    			attr_dev(div3, "style", /*style*/ ctx[7]);
    			toggle_class(div3, "dense", /*dense*/ ctx[2]);
    			toggle_class(div3, "error", /*error*/ ctx[5]);
    			toggle_class(div3, "success", /*success*/ ctx[6]);
    			toggle_class(div3, "readonly", /*readonly*/ ctx[3]);
    			toggle_class(div3, "disabled", /*disabled*/ ctx[4]);
    			add_location(div3, file$t, 375, 0, 9468);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);

    			if (prepend_outer_slot) {
    				prepend_outer_slot.m(div3, null);
    			}

    			append_dev(div3, t0);
    			append_dev(div3, div2);
    			append_dev(div2, div0);

    			if (default_slot) {
    				default_slot.m(div0, null);
    			}

    			append_dev(div2, t1);
    			append_dev(div2, div1);

    			if (messages_slot) {
    				messages_slot.m(div1, null);
    			}

    			append_dev(div3, t2);

    			if (append_outer_slot) {
    				append_outer_slot.m(div3, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(TextColor_action = TextColor.call(null, div3, /*success*/ ctx[6]
    				? 'success'
    				: /*error*/ ctx[5] ? 'error' : /*color*/ ctx[1]));

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (prepend_outer_slot) {
    				if (prepend_outer_slot.p && (!current || dirty & /*$$scope*/ 256)) {
    					update_slot_base(
    						prepend_outer_slot,
    						prepend_outer_slot_template,
    						ctx,
    						/*$$scope*/ ctx[8],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
    						: get_slot_changes(prepend_outer_slot_template, /*$$scope*/ ctx[8], dirty, get_prepend_outer_slot_changes$1),
    						get_prepend_outer_slot_context$1
    					);
    				}
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[8],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, null),
    						null
    					);
    				}
    			}

    			if (messages_slot) {
    				if (messages_slot.p && (!current || dirty & /*$$scope*/ 256)) {
    					update_slot_base(
    						messages_slot,
    						messages_slot_template,
    						ctx,
    						/*$$scope*/ ctx[8],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
    						: get_slot_changes(messages_slot_template, /*$$scope*/ ctx[8], dirty, get_messages_slot_changes),
    						get_messages_slot_context
    					);
    				}
    			}

    			if (append_outer_slot) {
    				if (append_outer_slot.p && (!current || dirty & /*$$scope*/ 256)) {
    					update_slot_base(
    						append_outer_slot,
    						append_outer_slot_template,
    						ctx,
    						/*$$scope*/ ctx[8],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
    						: get_slot_changes(append_outer_slot_template, /*$$scope*/ ctx[8], dirty, get_append_outer_slot_changes$1),
    						get_append_outer_slot_context$1
    					);
    				}
    			}

    			if (!current || dirty & /*klass*/ 1 && div3_class_value !== (div3_class_value = "s-input " + /*klass*/ ctx[0])) {
    				attr_dev(div3, "class", div3_class_value);
    			}

    			if (!current || dirty & /*style*/ 128) {
    				attr_dev(div3, "style", /*style*/ ctx[7]);
    			}

    			if (TextColor_action && is_function(TextColor_action.update) && dirty & /*success, error, color*/ 98) TextColor_action.update.call(null, /*success*/ ctx[6]
    			? 'success'
    			: /*error*/ ctx[5] ? 'error' : /*color*/ ctx[1]);

    			if (dirty & /*klass, dense*/ 5) {
    				toggle_class(div3, "dense", /*dense*/ ctx[2]);
    			}

    			if (dirty & /*klass, error*/ 33) {
    				toggle_class(div3, "error", /*error*/ ctx[5]);
    			}

    			if (dirty & /*klass, success*/ 65) {
    				toggle_class(div3, "success", /*success*/ ctx[6]);
    			}

    			if (dirty & /*klass, readonly*/ 9) {
    				toggle_class(div3, "readonly", /*readonly*/ ctx[3]);
    			}

    			if (dirty & /*klass, disabled*/ 17) {
    				toggle_class(div3, "disabled", /*disabled*/ ctx[4]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prepend_outer_slot, local);
    			transition_in(default_slot, local);
    			transition_in(messages_slot, local);
    			transition_in(append_outer_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prepend_outer_slot, local);
    			transition_out(default_slot, local);
    			transition_out(messages_slot, local);
    			transition_out(append_outer_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			if (prepend_outer_slot) prepend_outer_slot.d(detaching);
    			if (default_slot) default_slot.d(detaching);
    			if (messages_slot) messages_slot.d(detaching);
    			if (append_outer_slot) append_outer_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$t.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$t($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Input', slots, ['prepend-outer','default','messages','append-outer']);
    	let { class: klass = '' } = $$props;
    	let { color = null } = $$props;
    	let { dense = false } = $$props;
    	let { readonly = false } = $$props;
    	let { disabled = false } = $$props;
    	let { error = false } = $$props;
    	let { success = false } = $$props;
    	let { style = null } = $$props;
    	const writable_props = ['class', 'color', 'dense', 'readonly', 'disabled', 'error', 'success', 'style'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Input> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(0, klass = $$props.class);
    		if ('color' in $$props) $$invalidate(1, color = $$props.color);
    		if ('dense' in $$props) $$invalidate(2, dense = $$props.dense);
    		if ('readonly' in $$props) $$invalidate(3, readonly = $$props.readonly);
    		if ('disabled' in $$props) $$invalidate(4, disabled = $$props.disabled);
    		if ('error' in $$props) $$invalidate(5, error = $$props.error);
    		if ('success' in $$props) $$invalidate(6, success = $$props.success);
    		if ('style' in $$props) $$invalidate(7, style = $$props.style);
    		if ('$$scope' in $$props) $$invalidate(8, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		TextColor,
    		klass,
    		color,
    		dense,
    		readonly,
    		disabled,
    		error,
    		success,
    		style
    	});

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(0, klass = $$props.klass);
    		if ('color' in $$props) $$invalidate(1, color = $$props.color);
    		if ('dense' in $$props) $$invalidate(2, dense = $$props.dense);
    		if ('readonly' in $$props) $$invalidate(3, readonly = $$props.readonly);
    		if ('disabled' in $$props) $$invalidate(4, disabled = $$props.disabled);
    		if ('error' in $$props) $$invalidate(5, error = $$props.error);
    		if ('success' in $$props) $$invalidate(6, success = $$props.success);
    		if ('style' in $$props) $$invalidate(7, style = $$props.style);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [klass, color, dense, readonly, disabled, error, success, style, $$scope, slots];
    }

    class Input extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$t, create_fragment$t, safe_not_equal, {
    			class: 0,
    			color: 1,
    			dense: 2,
    			readonly: 3,
    			disabled: 4,
    			error: 5,
    			success: 6,
    			style: 7
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Input",
    			options,
    			id: create_fragment$t.name
    		});
    	}

    	get class() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dense() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dense(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get readonly() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set readonly(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get error() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set error(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get success() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set success(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* eslint-disable */
    // Shamefully ripped from https://github.com/lukeed/uid
    let IDX = 36;
    let HEX = '';
    while (IDX--) HEX += IDX.toString(36);

    var uid = (len) => {
      let str = '';
      let num = len || 11;
      while (num--) str += HEX[(Math.random() * 36) | 0];
      return str;
    };

    var closeIcon = 'M12,2C17.53,2 22,6.47 22,12C22,17.53 17.53,22 12,22C6.47,22 2,17.53 2,12C2,6.47 6.47,2 12,2M15.59,7L12,10.59L8.41,7L7,8.41L10.59,12L7,15.59L8.41,17L12,13.41L15.59,17L17,15.59L13.41,12L17,8.41L15.59,7Z';

    /* node_modules\svelte-materialify\dist\components\TextField\TextField.svelte generated by Svelte v3.48.0 */
    const file$s = "node_modules\\svelte-materialify\\dist\\components\\TextField\\TextField.svelte";
    const get_append_slot_changes = dirty => ({});
    const get_append_slot_context = ctx => ({});
    const get_clear_icon_slot_changes = dirty => ({});
    const get_clear_icon_slot_context = ctx => ({});
    const get_content_slot_changes = dirty => ({});
    const get_content_slot_context = ctx => ({});
    const get_prepend_slot_changes = dirty => ({});
    const get_prepend_slot_context = ctx => ({});
    const get_prepend_outer_slot_changes = dirty => ({});
    const get_prepend_outer_slot_context = ctx => ({ slot: "prepend-outer" });

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[44] = list[i];
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[44] = list[i];
    	return child_ctx;
    }

    const get_append_outer_slot_changes = dirty => ({});
    const get_append_outer_slot_context = ctx => ({ slot: "append-outer" });

    // (112:4) {#if clearable && value !== ''}
    function create_if_block_1$6(ctx) {
    	let div;
    	let current;
    	let mounted;
    	let dispose;
    	const clear_icon_slot_template = /*#slots*/ ctx[33]["clear-icon"];
    	const clear_icon_slot = create_slot(clear_icon_slot_template, ctx, /*$$scope*/ ctx[43], get_clear_icon_slot_context);
    	const clear_icon_slot_or_fallback = clear_icon_slot || fallback_block$3(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (clear_icon_slot_or_fallback) clear_icon_slot_or_fallback.c();
    			set_style(div, "cursor", "pointer");
    			add_location(div, file$s, 112, 6, 2674);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (clear_icon_slot_or_fallback) {
    				clear_icon_slot_or_fallback.m(div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*clear*/ ctx[26], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (clear_icon_slot) {
    				if (clear_icon_slot.p && (!current || dirty[1] & /*$$scope*/ 4096)) {
    					update_slot_base(
    						clear_icon_slot,
    						clear_icon_slot_template,
    						ctx,
    						/*$$scope*/ ctx[43],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[43])
    						: get_slot_changes(clear_icon_slot_template, /*$$scope*/ ctx[43], dirty, get_clear_icon_slot_changes),
    						get_clear_icon_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(clear_icon_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(clear_icon_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (clear_icon_slot_or_fallback) clear_icon_slot_or_fallback.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$6.name,
    		type: "if",
    		source: "(112:4) {#if clearable && value !== ''}",
    		ctx
    	});

    	return block;
    }

    // (115:32)             
    function fallback_block$3(ctx) {
    	let icon;
    	let current;

    	icon = new Icon({
    			props: { path: closeIcon },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block$3.name,
    		type: "fallback",
    		source: "(115:32)             ",
    		ctx
    	});

    	return block;
    }

    // (64:0) <Input    class="s-text-field {klass}"    {color}    {dense}    {readonly}    {disabled}    {error}    {success}    {style}>
    function create_default_slot$8(ctx) {
    	let div1;
    	let t0;
    	let div0;
    	let label;
    	let t1;
    	let t2;
    	let input;
    	let t3;
    	let t4;
    	let current;
    	let mounted;
    	let dispose;
    	const prepend_slot_template = /*#slots*/ ctx[33].prepend;
    	const prepend_slot = create_slot(prepend_slot_template, ctx, /*$$scope*/ ctx[43], get_prepend_slot_context);
    	const default_slot_template = /*#slots*/ ctx[33].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[43], null);
    	const content_slot_template = /*#slots*/ ctx[33].content;
    	const content_slot = create_slot(content_slot_template, ctx, /*$$scope*/ ctx[43], get_content_slot_context);

    	let input_levels = [
    		{ type: "text" },
    		{ placeholder: /*placeholder*/ ctx[14] },
    		{ id: /*id*/ ctx[20] },
    		{ readOnly: /*readonly*/ ctx[12] },
    		{ disabled: /*disabled*/ ctx[13] },
    		/*$$restProps*/ ctx[28]
    	];

    	let input_data = {};

    	for (let i = 0; i < input_levels.length; i += 1) {
    		input_data = assign(input_data, input_levels[i]);
    	}

    	let if_block = /*clearable*/ ctx[11] && /*value*/ ctx[0] !== '' && create_if_block_1$6(ctx);
    	const append_slot_template = /*#slots*/ ctx[33].append;
    	const append_slot = create_slot(append_slot_template, ctx, /*$$scope*/ ctx[43], get_append_slot_context);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			if (prepend_slot) prepend_slot.c();
    			t0 = space();
    			div0 = element("div");
    			label = element("label");
    			if (default_slot) default_slot.c();
    			t1 = space();
    			if (content_slot) content_slot.c();
    			t2 = space();
    			input = element("input");
    			t3 = space();
    			if (if_block) if_block.c();
    			t4 = space();
    			if (append_slot) append_slot.c();
    			attr_dev(label, "for", /*id*/ ctx[20]);
    			toggle_class(label, "active", /*labelActive*/ ctx[23]);
    			add_location(label, file$s, 85, 6, 2024);
    			set_attributes(input, input_data);
    			add_location(input, file$s, 90, 6, 2215);
    			attr_dev(div0, "class", "s-text-field__input");
    			add_location(div0, file$s, 84, 4, 1983);
    			attr_dev(div1, "class", "s-text-field__wrapper");
    			toggle_class(div1, "filled", /*filled*/ ctx[5]);
    			toggle_class(div1, "solo", /*solo*/ ctx[6]);
    			toggle_class(div1, "outlined", /*outlined*/ ctx[7]);
    			toggle_class(div1, "flat", /*flat*/ ctx[8]);
    			toggle_class(div1, "rounded", /*rounded*/ ctx[10]);
    			add_location(div1, file$s, 74, 2, 1768);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);

    			if (prepend_slot) {
    				prepend_slot.m(div1, null);
    			}

    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			append_dev(div0, label);

    			if (default_slot) {
    				default_slot.m(label, null);
    			}

    			append_dev(div0, t1);

    			if (content_slot) {
    				content_slot.m(div0, null);
    			}

    			append_dev(div0, t2);
    			append_dev(div0, input);
    			if (input.autofocus) input.focus();
    			/*input_binding*/ ctx[41](input);
    			set_input_value(input, /*value*/ ctx[0]);
    			append_dev(div1, t3);
    			if (if_block) if_block.m(div1, null);
    			append_dev(div1, t4);

    			if (append_slot) {
    				append_slot.m(div1, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[42]),
    					listen_dev(input, "focus", /*onFocus*/ ctx[24], false, false, false),
    					listen_dev(input, "blur", /*onBlur*/ ctx[25], false, false, false),
    					listen_dev(input, "input", /*onInput*/ ctx[27], false, false, false),
    					listen_dev(input, "focus", /*focus_handler*/ ctx[34], false, false, false),
    					listen_dev(input, "blur", /*blur_handler*/ ctx[35], false, false, false),
    					listen_dev(input, "input", /*input_handler*/ ctx[36], false, false, false),
    					listen_dev(input, "change", /*change_handler*/ ctx[37], false, false, false),
    					listen_dev(input, "keypress", /*keypress_handler*/ ctx[38], false, false, false),
    					listen_dev(input, "keydown", /*keydown_handler*/ ctx[39], false, false, false),
    					listen_dev(input, "keyup", /*keyup_handler*/ ctx[40], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (prepend_slot) {
    				if (prepend_slot.p && (!current || dirty[1] & /*$$scope*/ 4096)) {
    					update_slot_base(
    						prepend_slot,
    						prepend_slot_template,
    						ctx,
    						/*$$scope*/ ctx[43],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[43])
    						: get_slot_changes(prepend_slot_template, /*$$scope*/ ctx[43], dirty, get_prepend_slot_changes),
    						get_prepend_slot_context
    					);
    				}
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 4096)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[43],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[43])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[43], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty[0] & /*id*/ 1048576) {
    				attr_dev(label, "for", /*id*/ ctx[20]);
    			}

    			if (dirty[0] & /*labelActive*/ 8388608) {
    				toggle_class(label, "active", /*labelActive*/ ctx[23]);
    			}

    			if (content_slot) {
    				if (content_slot.p && (!current || dirty[1] & /*$$scope*/ 4096)) {
    					update_slot_base(
    						content_slot,
    						content_slot_template,
    						ctx,
    						/*$$scope*/ ctx[43],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[43])
    						: get_slot_changes(content_slot_template, /*$$scope*/ ctx[43], dirty, get_content_slot_changes),
    						get_content_slot_context
    					);
    				}
    			}

    			set_attributes(input, input_data = get_spread_update(input_levels, [
    				{ type: "text" },
    				(!current || dirty[0] & /*placeholder*/ 16384) && { placeholder: /*placeholder*/ ctx[14] },
    				(!current || dirty[0] & /*id*/ 1048576) && { id: /*id*/ ctx[20] },
    				(!current || dirty[0] & /*readonly*/ 4096) && { readOnly: /*readonly*/ ctx[12] },
    				(!current || dirty[0] & /*disabled*/ 8192) && { disabled: /*disabled*/ ctx[13] },
    				dirty[0] & /*$$restProps*/ 268435456 && /*$$restProps*/ ctx[28]
    			]));

    			if (dirty[0] & /*value*/ 1 && input.value !== /*value*/ ctx[0]) {
    				set_input_value(input, /*value*/ ctx[0]);
    			}

    			if (/*clearable*/ ctx[11] && /*value*/ ctx[0] !== '') {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*clearable, value*/ 2049) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_1$6(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div1, t4);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (append_slot) {
    				if (append_slot.p && (!current || dirty[1] & /*$$scope*/ 4096)) {
    					update_slot_base(
    						append_slot,
    						append_slot_template,
    						ctx,
    						/*$$scope*/ ctx[43],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[43])
    						: get_slot_changes(append_slot_template, /*$$scope*/ ctx[43], dirty, get_append_slot_changes),
    						get_append_slot_context
    					);
    				}
    			}

    			if (dirty[0] & /*filled*/ 32) {
    				toggle_class(div1, "filled", /*filled*/ ctx[5]);
    			}

    			if (dirty[0] & /*solo*/ 64) {
    				toggle_class(div1, "solo", /*solo*/ ctx[6]);
    			}

    			if (dirty[0] & /*outlined*/ 128) {
    				toggle_class(div1, "outlined", /*outlined*/ ctx[7]);
    			}

    			if (dirty[0] & /*flat*/ 256) {
    				toggle_class(div1, "flat", /*flat*/ ctx[8]);
    			}

    			if (dirty[0] & /*rounded*/ 1024) {
    				toggle_class(div1, "rounded", /*rounded*/ ctx[10]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prepend_slot, local);
    			transition_in(default_slot, local);
    			transition_in(content_slot, local);
    			transition_in(if_block);
    			transition_in(append_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prepend_slot, local);
    			transition_out(default_slot, local);
    			transition_out(content_slot, local);
    			transition_out(if_block);
    			transition_out(append_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (prepend_slot) prepend_slot.d(detaching);
    			if (default_slot) default_slot.d(detaching);
    			if (content_slot) content_slot.d(detaching);
    			/*input_binding*/ ctx[41](null);
    			if (if_block) if_block.d();
    			if (append_slot) append_slot.d(detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$8.name,
    		type: "slot",
    		source: "(64:0) <Input    class=\\\"s-text-field {klass}\\\"    {color}    {dense}    {readonly}    {disabled}    {error}    {success}    {style}>",
    		ctx
    	});

    	return block;
    }

    // (74:2) 
    function create_prepend_outer_slot(ctx) {
    	let current;
    	const prepend_outer_slot_template = /*#slots*/ ctx[33]["prepend-outer"];
    	const prepend_outer_slot = create_slot(prepend_outer_slot_template, ctx, /*$$scope*/ ctx[43], get_prepend_outer_slot_context);

    	const block = {
    		c: function create() {
    			if (prepend_outer_slot) prepend_outer_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (prepend_outer_slot) {
    				prepend_outer_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (prepend_outer_slot) {
    				if (prepend_outer_slot.p && (!current || dirty[1] & /*$$scope*/ 4096)) {
    					update_slot_base(
    						prepend_outer_slot,
    						prepend_outer_slot_template,
    						ctx,
    						/*$$scope*/ ctx[43],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[43])
    						: get_slot_changes(prepend_outer_slot_template, /*$$scope*/ ctx[43], dirty, get_prepend_outer_slot_changes),
    						get_prepend_outer_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prepend_outer_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prepend_outer_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (prepend_outer_slot) prepend_outer_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_prepend_outer_slot.name,
    		type: "slot",
    		source: "(74:2) ",
    		ctx
    	});

    	return block;
    }

    // (128:6) {#each messages as message}
    function create_each_block_1(ctx) {
    	let span;
    	let t_value = /*message*/ ctx[44] + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(t_value);
    			add_location(span, file$s, 127, 33, 3082);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*messages*/ 131072 && t_value !== (t_value = /*message*/ ctx[44] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(128:6) {#each messages as message}",
    		ctx
    	});

    	return block;
    }

    // (129:6) {#each errorMessages.slice(0, errorCount) as message}
    function create_each_block$3(ctx) {
    	let span;
    	let t_value = /*message*/ ctx[44] + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(t_value);
    			add_location(span, file$s, 128, 59, 3172);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*errorMessages, errorCount*/ 4456448 && t_value !== (t_value = /*message*/ ctx[44] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(129:6) {#each errorMessages.slice(0, errorCount) as message}",
    		ctx
    	});

    	return block;
    }

    // (131:4) {#if counter}
    function create_if_block$d(ctx) {
    	let span;
    	let t0_value = /*value*/ ctx[0].length + "";
    	let t0;
    	let t1;
    	let t2;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t0 = text(t0_value);
    			t1 = text(" / ");
    			t2 = text(/*counter*/ ctx[16]);
    			add_location(span, file$s, 130, 17, 3232);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t0);
    			append_dev(span, t1);
    			append_dev(span, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*value*/ 1 && t0_value !== (t0_value = /*value*/ ctx[0].length + "")) set_data_dev(t0, t0_value);
    			if (dirty[0] & /*counter*/ 65536) set_data_dev(t2, /*counter*/ ctx[16]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$d.name,
    		type: "if",
    		source: "(131:4) {#if counter}",
    		ctx
    	});

    	return block;
    }

    // (125:2) 
    function create_messages_slot(ctx) {
    	let div1;
    	let div0;
    	let span;
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let each_value_1 = /*messages*/ ctx[17];
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	let each_value = /*errorMessages*/ ctx[22].slice(0, /*errorCount*/ ctx[18]);
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
    	}

    	let if_block = /*counter*/ ctx[16] && create_if_block$d(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			span = element("span");
    			t0 = text(/*hint*/ ctx[15]);
    			t1 = space();

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t2 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t3 = space();
    			if (if_block) if_block.c();
    			add_location(span, file$s, 126, 6, 3028);
    			add_location(div0, file$s, 125, 4, 3015);
    			attr_dev(div1, "slot", "messages");
    			add_location(div1, file$s, 124, 2, 2988);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, span);
    			append_dev(span, t0);
    			append_dev(div0, t1);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(div0, null);
    			}

    			append_dev(div0, t2);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			append_dev(div1, t3);
    			if (if_block) if_block.m(div1, null);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*hint*/ 32768) set_data_dev(t0, /*hint*/ ctx[15]);

    			if (dirty[0] & /*messages*/ 131072) {
    				each_value_1 = /*messages*/ ctx[17];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(div0, t2);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty[0] & /*errorMessages, errorCount*/ 4456448) {
    				each_value = /*errorMessages*/ ctx[22].slice(0, /*errorCount*/ ctx[18]);
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$3(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div0, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (/*counter*/ ctx[16]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$d(ctx);
    					if_block.c();
    					if_block.m(div1, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_messages_slot.name,
    		type: "slot",
    		source: "(125:2) ",
    		ctx
    	});

    	return block;
    }

    // (135:2) 
    function create_append_outer_slot(ctx) {
    	let current;
    	const append_outer_slot_template = /*#slots*/ ctx[33]["append-outer"];
    	const append_outer_slot = create_slot(append_outer_slot_template, ctx, /*$$scope*/ ctx[43], get_append_outer_slot_context);

    	const block = {
    		c: function create() {
    			if (append_outer_slot) append_outer_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (append_outer_slot) {
    				append_outer_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (append_outer_slot) {
    				if (append_outer_slot.p && (!current || dirty[1] & /*$$scope*/ 4096)) {
    					update_slot_base(
    						append_outer_slot,
    						append_outer_slot_template,
    						ctx,
    						/*$$scope*/ ctx[43],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[43])
    						: get_slot_changes(append_outer_slot_template, /*$$scope*/ ctx[43], dirty, get_append_outer_slot_changes),
    						get_append_outer_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(append_outer_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(append_outer_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (append_outer_slot) append_outer_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_append_outer_slot.name,
    		type: "slot",
    		source: "(135:2) ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$s(ctx) {
    	let input;
    	let current;

    	input = new Input({
    			props: {
    				class: "s-text-field " + /*klass*/ ctx[3],
    				color: /*color*/ ctx[4],
    				dense: /*dense*/ ctx[9],
    				readonly: /*readonly*/ ctx[12],
    				disabled: /*disabled*/ ctx[13],
    				error: /*error*/ ctx[1],
    				success: /*success*/ ctx[19],
    				style: /*style*/ ctx[21],
    				$$slots: {
    					"append-outer": [create_append_outer_slot],
    					messages: [create_messages_slot],
    					"prepend-outer": [create_prepend_outer_slot],
    					default: [create_default_slot$8]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(input.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(input, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const input_changes = {};
    			if (dirty[0] & /*klass*/ 8) input_changes.class = "s-text-field " + /*klass*/ ctx[3];
    			if (dirty[0] & /*color*/ 16) input_changes.color = /*color*/ ctx[4];
    			if (dirty[0] & /*dense*/ 512) input_changes.dense = /*dense*/ ctx[9];
    			if (dirty[0] & /*readonly*/ 4096) input_changes.readonly = /*readonly*/ ctx[12];
    			if (dirty[0] & /*disabled*/ 8192) input_changes.disabled = /*disabled*/ ctx[13];
    			if (dirty[0] & /*error*/ 2) input_changes.error = /*error*/ ctx[1];
    			if (dirty[0] & /*success*/ 524288) input_changes.success = /*success*/ ctx[19];
    			if (dirty[0] & /*style*/ 2097152) input_changes.style = /*style*/ ctx[21];

    			if (dirty[0] & /*counter, value, errorMessages, errorCount, messages, hint, filled, solo, outlined, flat, rounded, clearable, placeholder, id, readonly, disabled, $$restProps, inputElement, labelActive*/ 282590693 | dirty[1] & /*$$scope*/ 4096) {
    				input_changes.$$scope = { dirty, ctx };
    			}

    			input.$set(input_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(input.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(input.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(input, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$s.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$s($$self, $$props, $$invalidate) {
    	let labelActive;

    	const omit_props_names = [
    		"class","value","color","filled","solo","outlined","flat","dense","rounded","clearable","readonly","disabled","placeholder","hint","counter","messages","rules","errorCount","validateOnBlur","error","success","id","style","inputElement","validate"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;

    	validate_slots('TextField', slots, [
    		'append-outer','prepend-outer','prepend','default','content','clear-icon','append'
    	]);

    	let { class: klass = '' } = $$props;
    	let { value = '' } = $$props;
    	let { color = 'primary' } = $$props;
    	let { filled = false } = $$props;
    	let { solo = false } = $$props;
    	let { outlined = false } = $$props;
    	let { flat = false } = $$props;
    	let { dense = false } = $$props;
    	let { rounded = false } = $$props;
    	let { clearable = false } = $$props;
    	let { readonly = false } = $$props;
    	let { disabled = false } = $$props;
    	let { placeholder = null } = $$props;
    	let { hint = '' } = $$props;
    	let { counter = false } = $$props;
    	let { messages = [] } = $$props;
    	let { rules = [] } = $$props;
    	let { errorCount = 1 } = $$props;
    	let { validateOnBlur = false } = $$props;
    	let { error = false } = $$props;
    	let { success = false } = $$props;
    	let { id = `s-input-${uid(5)}` } = $$props;
    	let { style = null } = $$props;
    	let { inputElement = null } = $$props;
    	let focused = false;
    	let errorMessages = [];

    	function validate() {
    		$$invalidate(22, errorMessages = rules.map(r => r(value)).filter(r => typeof r === 'string'));

    		if (errorMessages.length) $$invalidate(1, error = true); else {
    			$$invalidate(1, error = false);
    		}

    		return error;
    	}

    	function onFocus() {
    		$$invalidate(32, focused = true);
    	}

    	function onBlur() {
    		$$invalidate(32, focused = false);
    		if (validateOnBlur) validate();
    	}

    	function clear() {
    		$$invalidate(0, value = '');
    	}

    	function onInput() {
    		if (!validateOnBlur) validate();
    	}

    	function focus_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function blur_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function input_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function change_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function keypress_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function keydown_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function keyup_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function input_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			inputElement = $$value;
    			$$invalidate(2, inputElement);
    		});
    	}

    	function input_input_handler() {
    		value = this.value;
    		$$invalidate(0, value);
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(28, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('class' in $$new_props) $$invalidate(3, klass = $$new_props.class);
    		if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
    		if ('color' in $$new_props) $$invalidate(4, color = $$new_props.color);
    		if ('filled' in $$new_props) $$invalidate(5, filled = $$new_props.filled);
    		if ('solo' in $$new_props) $$invalidate(6, solo = $$new_props.solo);
    		if ('outlined' in $$new_props) $$invalidate(7, outlined = $$new_props.outlined);
    		if ('flat' in $$new_props) $$invalidate(8, flat = $$new_props.flat);
    		if ('dense' in $$new_props) $$invalidate(9, dense = $$new_props.dense);
    		if ('rounded' in $$new_props) $$invalidate(10, rounded = $$new_props.rounded);
    		if ('clearable' in $$new_props) $$invalidate(11, clearable = $$new_props.clearable);
    		if ('readonly' in $$new_props) $$invalidate(12, readonly = $$new_props.readonly);
    		if ('disabled' in $$new_props) $$invalidate(13, disabled = $$new_props.disabled);
    		if ('placeholder' in $$new_props) $$invalidate(14, placeholder = $$new_props.placeholder);
    		if ('hint' in $$new_props) $$invalidate(15, hint = $$new_props.hint);
    		if ('counter' in $$new_props) $$invalidate(16, counter = $$new_props.counter);
    		if ('messages' in $$new_props) $$invalidate(17, messages = $$new_props.messages);
    		if ('rules' in $$new_props) $$invalidate(29, rules = $$new_props.rules);
    		if ('errorCount' in $$new_props) $$invalidate(18, errorCount = $$new_props.errorCount);
    		if ('validateOnBlur' in $$new_props) $$invalidate(30, validateOnBlur = $$new_props.validateOnBlur);
    		if ('error' in $$new_props) $$invalidate(1, error = $$new_props.error);
    		if ('success' in $$new_props) $$invalidate(19, success = $$new_props.success);
    		if ('id' in $$new_props) $$invalidate(20, id = $$new_props.id);
    		if ('style' in $$new_props) $$invalidate(21, style = $$new_props.style);
    		if ('inputElement' in $$new_props) $$invalidate(2, inputElement = $$new_props.inputElement);
    		if ('$$scope' in $$new_props) $$invalidate(43, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		Input,
    		Icon,
    		uid,
    		clearIcon: closeIcon,
    		klass,
    		value,
    		color,
    		filled,
    		solo,
    		outlined,
    		flat,
    		dense,
    		rounded,
    		clearable,
    		readonly,
    		disabled,
    		placeholder,
    		hint,
    		counter,
    		messages,
    		rules,
    		errorCount,
    		validateOnBlur,
    		error,
    		success,
    		id,
    		style,
    		inputElement,
    		focused,
    		errorMessages,
    		validate,
    		onFocus,
    		onBlur,
    		clear,
    		onInput,
    		labelActive
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('klass' in $$props) $$invalidate(3, klass = $$new_props.klass);
    		if ('value' in $$props) $$invalidate(0, value = $$new_props.value);
    		if ('color' in $$props) $$invalidate(4, color = $$new_props.color);
    		if ('filled' in $$props) $$invalidate(5, filled = $$new_props.filled);
    		if ('solo' in $$props) $$invalidate(6, solo = $$new_props.solo);
    		if ('outlined' in $$props) $$invalidate(7, outlined = $$new_props.outlined);
    		if ('flat' in $$props) $$invalidate(8, flat = $$new_props.flat);
    		if ('dense' in $$props) $$invalidate(9, dense = $$new_props.dense);
    		if ('rounded' in $$props) $$invalidate(10, rounded = $$new_props.rounded);
    		if ('clearable' in $$props) $$invalidate(11, clearable = $$new_props.clearable);
    		if ('readonly' in $$props) $$invalidate(12, readonly = $$new_props.readonly);
    		if ('disabled' in $$props) $$invalidate(13, disabled = $$new_props.disabled);
    		if ('placeholder' in $$props) $$invalidate(14, placeholder = $$new_props.placeholder);
    		if ('hint' in $$props) $$invalidate(15, hint = $$new_props.hint);
    		if ('counter' in $$props) $$invalidate(16, counter = $$new_props.counter);
    		if ('messages' in $$props) $$invalidate(17, messages = $$new_props.messages);
    		if ('rules' in $$props) $$invalidate(29, rules = $$new_props.rules);
    		if ('errorCount' in $$props) $$invalidate(18, errorCount = $$new_props.errorCount);
    		if ('validateOnBlur' in $$props) $$invalidate(30, validateOnBlur = $$new_props.validateOnBlur);
    		if ('error' in $$props) $$invalidate(1, error = $$new_props.error);
    		if ('success' in $$props) $$invalidate(19, success = $$new_props.success);
    		if ('id' in $$props) $$invalidate(20, id = $$new_props.id);
    		if ('style' in $$props) $$invalidate(21, style = $$new_props.style);
    		if ('inputElement' in $$props) $$invalidate(2, inputElement = $$new_props.inputElement);
    		if ('focused' in $$props) $$invalidate(32, focused = $$new_props.focused);
    		if ('errorMessages' in $$props) $$invalidate(22, errorMessages = $$new_props.errorMessages);
    		if ('labelActive' in $$props) $$invalidate(23, labelActive = $$new_props.labelActive);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*placeholder, value*/ 16385 | $$self.$$.dirty[1] & /*focused*/ 2) {
    			$$invalidate(23, labelActive = !!placeholder || value || focused);
    		}
    	};

    	return [
    		value,
    		error,
    		inputElement,
    		klass,
    		color,
    		filled,
    		solo,
    		outlined,
    		flat,
    		dense,
    		rounded,
    		clearable,
    		readonly,
    		disabled,
    		placeholder,
    		hint,
    		counter,
    		messages,
    		errorCount,
    		success,
    		id,
    		style,
    		errorMessages,
    		labelActive,
    		onFocus,
    		onBlur,
    		clear,
    		onInput,
    		$$restProps,
    		rules,
    		validateOnBlur,
    		validate,
    		focused,
    		slots,
    		focus_handler,
    		blur_handler,
    		input_handler,
    		change_handler,
    		keypress_handler,
    		keydown_handler,
    		keyup_handler,
    		input_binding,
    		input_input_handler,
    		$$scope
    	];
    }

    class TextField extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$s,
    			create_fragment$s,
    			safe_not_equal,
    			{
    				class: 3,
    				value: 0,
    				color: 4,
    				filled: 5,
    				solo: 6,
    				outlined: 7,
    				flat: 8,
    				dense: 9,
    				rounded: 10,
    				clearable: 11,
    				readonly: 12,
    				disabled: 13,
    				placeholder: 14,
    				hint: 15,
    				counter: 16,
    				messages: 17,
    				rules: 29,
    				errorCount: 18,
    				validateOnBlur: 30,
    				error: 1,
    				success: 19,
    				id: 20,
    				style: 21,
    				inputElement: 2,
    				validate: 31
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TextField",
    			options,
    			id: create_fragment$s.name
    		});
    	}

    	get class() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get filled() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set filled(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get solo() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set solo(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get outlined() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set outlined(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get flat() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set flat(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dense() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dense(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rounded() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rounded(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get clearable() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set clearable(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get readonly() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set readonly(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get placeholder() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set placeholder(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hint() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hint(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get counter() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set counter(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get messages() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set messages(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rules() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rules(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get errorCount() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set errorCount(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get validateOnBlur() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set validateOnBlur(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get error() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set error(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get success() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set success(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get id() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get inputElement() {
    		throw new Error("<TextField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inputElement(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get validate() {
    		return this.$$.ctx[31];
    	}

    	set validate(value) {
    		throw new Error("<TextField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function cubicOut(t) {
        const f = t - 1.0;
        return f * f * f + 1.0;
    }

    function fade(node, { delay = 0, duration = 400, easing = identity } = {}) {
        const o = +getComputedStyle(node).opacity;
        return {
            delay,
            duration,
            easing,
            css: t => `opacity: ${t * o}`
        };
    }
    function slide(node, { delay = 0, duration = 400, easing = cubicOut } = {}) {
        const style = getComputedStyle(node);
        const opacity = +style.opacity;
        const height = parseFloat(style.height);
        const padding_top = parseFloat(style.paddingTop);
        const padding_bottom = parseFloat(style.paddingBottom);
        const margin_top = parseFloat(style.marginTop);
        const margin_bottom = parseFloat(style.marginBottom);
        const border_top_width = parseFloat(style.borderTopWidth);
        const border_bottom_width = parseFloat(style.borderBottomWidth);
        return {
            delay,
            duration,
            easing,
            css: t => 'overflow: hidden;' +
                `opacity: ${Math.min(t * 20, 1) * opacity};` +
                `height: ${t * height}px;` +
                `padding-top: ${t * padding_top}px;` +
                `padding-bottom: ${t * padding_bottom}px;` +
                `margin-top: ${t * margin_top}px;` +
                `margin-bottom: ${t * margin_bottom}px;` +
                `border-top-width: ${t * border_top_width}px;` +
                `border-bottom-width: ${t * border_bottom_width}px;`
        };
    }
    function scale(node, { delay = 0, duration = 400, easing = cubicOut, start = 0, opacity = 0 } = {}) {
        const style = getComputedStyle(node);
        const target_opacity = +style.opacity;
        const transform = style.transform === 'none' ? '' : style.transform;
        const sd = 1 - start;
        const od = target_opacity * (1 - opacity);
        return {
            delay,
            duration,
            easing,
            css: (_t, u) => `
			transform: ${transform} scale(${1 - (sd * u)});
			opacity: ${target_opacity - (od * u)}
		`
        };
    }

    var down = 'M7,10L12,15L17,10H7Z';

    /* node_modules\svelte-materialify\dist\components\DataTable\DataTable.svelte generated by Svelte v3.48.0 */

    const file$r = "node_modules\\svelte-materialify\\dist\\components\\DataTable\\DataTable.svelte";

    function create_fragment$r(ctx) {
    	let div;
    	let table;
    	let div_class_value;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[2].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			table = element("table");
    			if (default_slot) default_slot.c();
    			add_location(table, file$r, 16, 2, 337);
    			attr_dev(div, "class", div_class_value = "s-tbl " + /*klass*/ ctx[0]);
    			add_location(div, file$r, 15, 0, 306);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, table);

    			if (default_slot) {
    				default_slot.m(table, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 2)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[1],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[1], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*klass*/ 1 && div_class_value !== (div_class_value = "s-tbl " + /*klass*/ ctx[0])) {
    				attr_dev(div, "class", div_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$r.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$r($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('DataTable', slots, ['default']);
    	let { class: klass = '' } = $$props;
    	const writable_props = ['class'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<DataTable> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(0, klass = $$props.class);
    		if ('$$scope' in $$props) $$invalidate(1, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({ klass });

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(0, klass = $$props.klass);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [klass, $$scope, slots];
    }

    class DataTable extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$r, create_fragment$r, safe_not_equal, { class: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "DataTable",
    			options,
    			id: create_fragment$r.name
    		});
    	}

    	get class() {
    		throw new Error("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-materialify\dist\components\DataTable\DataTableHead.svelte generated by Svelte v3.48.0 */
    const file$q = "node_modules\\svelte-materialify\\dist\\components\\DataTable\\DataTableHead.svelte";

    function create_fragment$q(ctx) {
    	let thead;
    	let thead_class_value;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[2].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);

    	const block = {
    		c: function create() {
    			thead = element("thead");
    			if (default_slot) default_slot.c();
    			attr_dev(thead, "class", thead_class_value = "s-tbl-head " + /*klass*/ ctx[0]);
    			add_location(thead, file$q, 13, 0, 263);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, thead, anchor);

    			if (default_slot) {
    				default_slot.m(thead, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 2)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[1],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[1], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*klass*/ 1 && thead_class_value !== (thead_class_value = "s-tbl-head " + /*klass*/ ctx[0])) {
    				attr_dev(thead, "class", thead_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(thead);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$q($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('DataTableHead', slots, ['default']);
    	let { class: klass = '' } = $$props;
    	setContext('is-table-head', true);
    	const writable_props = ['class'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<DataTableHead> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(0, klass = $$props.class);
    		if ('$$scope' in $$props) $$invalidate(1, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({ setContext, klass });

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(0, klass = $$props.klass);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [klass, $$scope, slots];
    }

    class DataTableHead extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$q, create_fragment$q, safe_not_equal, { class: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "DataTableHead",
    			options,
    			id: create_fragment$q.name
    		});
    	}

    	get class() {
    		throw new Error("<DataTableHead>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<DataTableHead>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-materialify\dist\components\DataTable\DataTableBody.svelte generated by Svelte v3.48.0 */

    const file$p = "node_modules\\svelte-materialify\\dist\\components\\DataTable\\DataTableBody.svelte";

    function create_fragment$p(ctx) {
    	let tbody;
    	let tbody_class_value;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[2].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);

    	const block = {
    		c: function create() {
    			tbody = element("tbody");
    			if (default_slot) default_slot.c();
    			attr_dev(tbody, "class", tbody_class_value = "s-tbl-body " + /*klass*/ ctx[0]);
    			add_location(tbody, file$p, 13, 0, 335);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tbody, anchor);

    			if (default_slot) {
    				default_slot.m(tbody, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 2)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[1],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[1], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*klass*/ 1 && tbody_class_value !== (tbody_class_value = "s-tbl-body " + /*klass*/ ctx[0])) {
    				attr_dev(tbody, "class", tbody_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tbody);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$p.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$p($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('DataTableBody', slots, ['default']);
    	let { class: klass = '' } = $$props;
    	const writable_props = ['class'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<DataTableBody> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(0, klass = $$props.class);
    		if ('$$scope' in $$props) $$invalidate(1, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({ klass });

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(0, klass = $$props.klass);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [klass, $$scope, slots];
    }

    class DataTableBody extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$p, create_fragment$p, safe_not_equal, { class: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "DataTableBody",
    			options,
    			id: create_fragment$p.name
    		});
    	}

    	get class() {
    		throw new Error("<DataTableBody>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<DataTableBody>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-materialify\dist\components\DataTable\DataTableRow.svelte generated by Svelte v3.48.0 */

    const file$o = "node_modules\\svelte-materialify\\dist\\components\\DataTable\\DataTableRow.svelte";

    function create_fragment$o(ctx) {
    	let tr;
    	let tr_class_value;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[2].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			if (default_slot) default_slot.c();
    			attr_dev(tr, "class", tr_class_value = "s-tbl-row " + /*klass*/ ctx[0]);
    			add_location(tr, file$o, 5, 0, 72);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);

    			if (default_slot) {
    				default_slot.m(tr, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 2)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[1],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[1], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*klass*/ 1 && tr_class_value !== (tr_class_value = "s-tbl-row " + /*klass*/ ctx[0])) {
    				attr_dev(tr, "class", tr_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$o.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$o($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('DataTableRow', slots, ['default']);
    	let { class: klass = '' } = $$props;
    	const writable_props = ['class'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<DataTableRow> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(0, klass = $$props.class);
    		if ('$$scope' in $$props) $$invalidate(1, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({ klass });

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(0, klass = $$props.klass);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [klass, $$scope, slots];
    }

    class DataTableRow extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$o, create_fragment$o, safe_not_equal, { class: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "DataTableRow",
    			options,
    			id: create_fragment$o.name
    		});
    	}

    	get class() {
    		throw new Error("<DataTableRow>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<DataTableRow>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-materialify\dist\components\DataTable\DataTableCell.svelte generated by Svelte v3.48.0 */
    const file$n = "node_modules\\svelte-materialify\\dist\\components\\DataTable\\DataTableCell.svelte";

    // (34:0) {:else}
    function create_else_block$3(ctx) {
    	let td;
    	let td_class_value;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[4].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

    	const block = {
    		c: function create() {
    			td = element("td");
    			if (default_slot) default_slot.c();
    			attr_dev(td, "class", td_class_value = "s-tbl-cell " + /*klass*/ ctx[0]);
    			toggle_class(td, "numeric", /*numeric*/ ctx[1]);
    			add_location(td, file$n, 34, 2, 609);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, td, anchor);

    			if (default_slot) {
    				default_slot.m(td, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[3],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*klass*/ 1 && td_class_value !== (td_class_value = "s-tbl-cell " + /*klass*/ ctx[0])) {
    				attr_dev(td, "class", td_class_value);
    			}

    			if (dirty & /*klass, numeric*/ 3) {
    				toggle_class(td, "numeric", /*numeric*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(td);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$3.name,
    		type: "else",
    		source: "(34:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (30:0) {#if isTableHead}
    function create_if_block$c(ctx) {
    	let th;
    	let th_class_value;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[4].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

    	const block = {
    		c: function create() {
    			th = element("th");
    			if (default_slot) default_slot.c();
    			attr_dev(th, "class", th_class_value = "s-tbl-cell " + /*klass*/ ctx[0]);
    			toggle_class(th, "numeric", /*numeric*/ ctx[1]);
    			add_location(th, file$n, 30, 2, 528);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, th, anchor);

    			if (default_slot) {
    				default_slot.m(th, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[3],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*klass*/ 1 && th_class_value !== (th_class_value = "s-tbl-cell " + /*klass*/ ctx[0])) {
    				attr_dev(th, "class", th_class_value);
    			}

    			if (dirty & /*klass, numeric*/ 3) {
    				toggle_class(th, "numeric", /*numeric*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(th);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$c.name,
    		type: "if",
    		source: "(30:0) {#if isTableHead}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$n(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$c, create_else_block$3];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*isTableHead*/ ctx[2]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if_block.p(ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$n.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$n($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('DataTableCell', slots, ['default']);
    	let { class: klass = '' } = $$props;
    	let { numeric = false } = $$props;
    	const isTableHead = getContext('is-table-head') === true;
    	const writable_props = ['class', 'numeric'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<DataTableCell> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(0, klass = $$props.class);
    		if ('numeric' in $$props) $$invalidate(1, numeric = $$props.numeric);
    		if ('$$scope' in $$props) $$invalidate(3, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({ getContext, klass, numeric, isTableHead });

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(0, klass = $$props.klass);
    		if ('numeric' in $$props) $$invalidate(1, numeric = $$props.numeric);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [klass, numeric, isTableHead, $$scope, slots];
    }

    class DataTableCell extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$n, create_fragment$n, safe_not_equal, { class: 0, numeric: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "DataTableCell",
    			options,
    			id: create_fragment$n.name
    		});
    	}

    	get class() {
    		throw new Error("<DataTableCell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<DataTableCell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get numeric() {
    		throw new Error("<DataTableCell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set numeric(value) {
    		throw new Error("<DataTableCell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* eslint-disable no-param-reassign */

    const themeColors = ['primary', 'secondary', 'success', 'info', 'warning', 'error'];

    /**
     * @param {string} klass
     */
    function formatClass(klass) {
      return klass.split(' ').map((i) => {
        if (themeColors.includes(i)) return `${i}-color`;
        return i;
      });
    }

    function setBackgroundColor(node, text) {
      if (/^(#|rgb|hsl|currentColor)/.test(text)) {
        // This is a CSS hex.
        node.style.backgroundColor = text;
        return false;
      }

      if (text.startsWith('--')) {
        // This is a CSS variable.
        node.style.backgroundColor = `var(${text})`;
        return false;
      }

      const klass = formatClass(text);
      node.classList.add(...klass);
      return klass;
    }

    /**
     * @param node {Element}
     * @param text {string|boolean}
     */
    var BackgroundColor = (node, text) => {
      let klass;
      if (typeof text === 'string') {
        klass = setBackgroundColor(node, text);
      }

      return {
        update(newText) {
          if (klass) {
            node.classList.remove(...klass);
          } else {
            node.style.backgroundColor = null;
          }

          if (typeof newText === 'string') {
            klass = setBackgroundColor(node, newText);
          }
        },
      };
    };

    /* node_modules\svelte-materialify\dist\components\Overlay\Overlay.svelte generated by Svelte v3.48.0 */
    const file$m = "node_modules\\svelte-materialify\\dist\\components\\Overlay\\Overlay.svelte";

    // (52:0) {#if active}
    function create_if_block$b(ctx) {
    	let div2;
    	let div0;
    	let BackgroundColor_action;
    	let t;
    	let div1;
    	let div2_class_value;
    	let div2_style_value;
    	let div2_intro;
    	let div2_outro;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[11].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div0, "class", "s-overlay__scrim svelte-x5kbih");
    			set_style(div0, "opacity", /*opacity*/ ctx[5]);
    			add_location(div0, file$m, 59, 4, 1182);
    			attr_dev(div1, "class", "s-overlay__content svelte-x5kbih");
    			add_location(div1, file$m, 60, 4, 1273);
    			attr_dev(div2, "class", div2_class_value = "s-overlay " + /*klass*/ ctx[0] + " svelte-x5kbih");
    			attr_dev(div2, "style", div2_style_value = "z-index:" + /*index*/ ctx[7] + ";" + /*style*/ ctx[9]);
    			toggle_class(div2, "absolute", /*absolute*/ ctx[8]);
    			add_location(div2, file$m, 52, 2, 1018);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div2, t);
    			append_dev(div2, div1);

    			if (default_slot) {
    				default_slot.m(div1, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(BackgroundColor_action = BackgroundColor.call(null, div0, /*color*/ ctx[6])),
    					listen_dev(div2, "click", /*click_handler*/ ctx[12], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (!current || dirty & /*opacity*/ 32) {
    				set_style(div0, "opacity", /*opacity*/ ctx[5]);
    			}

    			if (BackgroundColor_action && is_function(BackgroundColor_action.update) && dirty & /*color*/ 64) BackgroundColor_action.update.call(null, /*color*/ ctx[6]);

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[10],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*klass*/ 1 && div2_class_value !== (div2_class_value = "s-overlay " + /*klass*/ ctx[0] + " svelte-x5kbih")) {
    				attr_dev(div2, "class", div2_class_value);
    			}

    			if (!current || dirty & /*index, style*/ 640 && div2_style_value !== (div2_style_value = "z-index:" + /*index*/ ctx[7] + ";" + /*style*/ ctx[9])) {
    				attr_dev(div2, "style", div2_style_value);
    			}

    			if (dirty & /*klass, absolute*/ 257) {
    				toggle_class(div2, "absolute", /*absolute*/ ctx[8]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);

    			add_render_callback(() => {
    				if (div2_outro) div2_outro.end(1);
    				div2_intro = create_in_transition(div2, /*transition*/ ctx[1], /*inOpts*/ ctx[2]);
    				div2_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			if (div2_intro) div2_intro.invalidate();
    			div2_outro = create_out_transition(div2, /*transition*/ ctx[1], /*outOpts*/ ctx[3]);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			if (default_slot) default_slot.d(detaching);
    			if (detaching && div2_outro) div2_outro.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$b.name,
    		type: "if",
    		source: "(52:0) {#if active}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$m(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*active*/ ctx[4] && create_if_block$b(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*active*/ ctx[4]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*active*/ 16) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$b(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$m.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$m($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Overlay', slots, ['default']);
    	let { class: klass = '' } = $$props;
    	let { transition = fade } = $$props;
    	let { inOpts = { duration: 250 } } = $$props;
    	let { outOpts = { duration: 250 } } = $$props;
    	let { active = true } = $$props;
    	let { opacity = 0.46 } = $$props;
    	let { color = 'rgb(33, 33, 33)' } = $$props;
    	let { index = 5 } = $$props;
    	let { absolute = false } = $$props;
    	let { style = '' } = $$props;

    	const writable_props = [
    		'class',
    		'transition',
    		'inOpts',
    		'outOpts',
    		'active',
    		'opacity',
    		'color',
    		'index',
    		'absolute',
    		'style'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Overlay> was created with unknown prop '${key}'`);
    	});

    	function click_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(0, klass = $$props.class);
    		if ('transition' in $$props) $$invalidate(1, transition = $$props.transition);
    		if ('inOpts' in $$props) $$invalidate(2, inOpts = $$props.inOpts);
    		if ('outOpts' in $$props) $$invalidate(3, outOpts = $$props.outOpts);
    		if ('active' in $$props) $$invalidate(4, active = $$props.active);
    		if ('opacity' in $$props) $$invalidate(5, opacity = $$props.opacity);
    		if ('color' in $$props) $$invalidate(6, color = $$props.color);
    		if ('index' in $$props) $$invalidate(7, index = $$props.index);
    		if ('absolute' in $$props) $$invalidate(8, absolute = $$props.absolute);
    		if ('style' in $$props) $$invalidate(9, style = $$props.style);
    		if ('$$scope' in $$props) $$invalidate(10, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		fade,
    		BackgroundColor,
    		klass,
    		transition,
    		inOpts,
    		outOpts,
    		active,
    		opacity,
    		color,
    		index,
    		absolute,
    		style
    	});

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(0, klass = $$props.klass);
    		if ('transition' in $$props) $$invalidate(1, transition = $$props.transition);
    		if ('inOpts' in $$props) $$invalidate(2, inOpts = $$props.inOpts);
    		if ('outOpts' in $$props) $$invalidate(3, outOpts = $$props.outOpts);
    		if ('active' in $$props) $$invalidate(4, active = $$props.active);
    		if ('opacity' in $$props) $$invalidate(5, opacity = $$props.opacity);
    		if ('color' in $$props) $$invalidate(6, color = $$props.color);
    		if ('index' in $$props) $$invalidate(7, index = $$props.index);
    		if ('absolute' in $$props) $$invalidate(8, absolute = $$props.absolute);
    		if ('style' in $$props) $$invalidate(9, style = $$props.style);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		klass,
    		transition,
    		inOpts,
    		outOpts,
    		active,
    		opacity,
    		color,
    		index,
    		absolute,
    		style,
    		$$scope,
    		slots,
    		click_handler
    	];
    }

    class Overlay extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$m, create_fragment$m, safe_not_equal, {
    			class: 0,
    			transition: 1,
    			inOpts: 2,
    			outOpts: 3,
    			active: 4,
    			opacity: 5,
    			color: 6,
    			index: 7,
    			absolute: 8,
    			style: 9
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Overlay",
    			options,
    			id: create_fragment$m.name
    		});
    	}

    	get class() {
    		throw new Error("<Overlay>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Overlay>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get transition() {
    		throw new Error("<Overlay>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set transition(value) {
    		throw new Error("<Overlay>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get inOpts() {
    		throw new Error("<Overlay>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inOpts(value) {
    		throw new Error("<Overlay>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get outOpts() {
    		throw new Error("<Overlay>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set outOpts(value) {
    		throw new Error("<Overlay>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get active() {
    		throw new Error("<Overlay>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set active(value) {
    		throw new Error("<Overlay>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get opacity() {
    		throw new Error("<Overlay>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set opacity(value) {
    		throw new Error("<Overlay>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<Overlay>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<Overlay>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get index() {
    		throw new Error("<Overlay>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<Overlay>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get absolute() {
    		throw new Error("<Overlay>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set absolute(value) {
    		throw new Error("<Overlay>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<Overlay>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<Overlay>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-materialify\dist\components\Dialog\Dialog.svelte generated by Svelte v3.48.0 */
    const file$l = "node_modules\\svelte-materialify\\dist\\components\\Dialog\\Dialog.svelte";

    // (91:0) {#if visible}
    function create_if_block$a(ctx) {
    	let div1;
    	let div0;
    	let div0_class_value;
    	let div0_transition;
    	let Style_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[11].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div0, "class", div0_class_value = "s-dialog__content " + /*klass*/ ctx[0]);
    			toggle_class(div0, "fullscreen", /*fullscreen*/ ctx[2]);
    			add_location(div0, file$l, 92, 4, 2151);
    			attr_dev(div1, "role", "document");
    			attr_dev(div1, "class", "s-dialog");
    			add_location(div1, file$l, 91, 2, 2069);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);

    			if (default_slot) {
    				default_slot.m(div0, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "introstart", /*introstart_handler*/ ctx[12], false, false, false),
    					listen_dev(div0, "outrostart", /*outrostart_handler*/ ctx[13], false, false, false),
    					listen_dev(div0, "introend", /*introend_handler*/ ctx[14], false, false, false),
    					listen_dev(div0, "outroend", /*outroend_handler*/ ctx[15], false, false, false),
    					action_destroyer(Style_action = Style.call(null, div1, { 'dialog-width': /*width*/ ctx[1] }))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[10],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*klass*/ 1 && div0_class_value !== (div0_class_value = "s-dialog__content " + /*klass*/ ctx[0])) {
    				attr_dev(div0, "class", div0_class_value);
    			}

    			if (dirty & /*klass, fullscreen*/ 5) {
    				toggle_class(div0, "fullscreen", /*fullscreen*/ ctx[2]);
    			}

    			if (Style_action && is_function(Style_action.update) && dirty & /*width*/ 2) Style_action.update.call(null, { 'dialog-width': /*width*/ ctx[1] });
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);

    			add_render_callback(() => {
    				if (!div0_transition) div0_transition = create_bidirectional_transition(div0, /*transition*/ ctx[3], { duration: 300, start: 0.1 }, true);
    				div0_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			if (!div0_transition) div0_transition = create_bidirectional_transition(div0, /*transition*/ ctx[3], { duration: 300, start: 0.1 }, false);
    			div0_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (default_slot) default_slot.d(detaching);
    			if (detaching && div0_transition) div0_transition.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$a.name,
    		type: "if",
    		source: "(91:0) {#if visible}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$l(ctx) {
    	let t;
    	let overlay_1;
    	let current;
    	let if_block = /*visible*/ ctx[5] && create_if_block$a(ctx);
    	const overlay_1_spread_levels = [/*overlay*/ ctx[4], { active: /*visible*/ ctx[5] }];
    	let overlay_1_props = {};

    	for (let i = 0; i < overlay_1_spread_levels.length; i += 1) {
    		overlay_1_props = assign(overlay_1_props, overlay_1_spread_levels[i]);
    	}

    	overlay_1 = new Overlay({ props: overlay_1_props, $$inline: true });
    	overlay_1.$on("click", /*close*/ ctx[6]);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			t = space();
    			create_component(overlay_1.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(overlay_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*visible*/ ctx[5]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*visible*/ 32) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$a(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(t.parentNode, t);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			const overlay_1_changes = (dirty & /*overlay, visible*/ 48)
    			? get_spread_update(overlay_1_spread_levels, [
    					dirty & /*overlay*/ 16 && get_spread_object(/*overlay*/ ctx[4]),
    					dirty & /*visible*/ 32 && { active: /*visible*/ ctx[5] }
    				])
    			: {};

    			overlay_1.$set(overlay_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			transition_in(overlay_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			transition_out(overlay_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(overlay_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$l.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$l($$self, $$props, $$invalidate) {
    	let visible;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Dialog', slots, ['default']);
    	let { class: klass = '' } = $$props;
    	let { active = false } = $$props;
    	let { persistent = false } = $$props;
    	let { disabled = false } = $$props;
    	let { width = 500 } = $$props;
    	let { fullscreen = false } = $$props;
    	let { transition = scale } = $$props;
    	let { overlay = {} } = $$props;

    	function close() {
    		if (!persistent) $$invalidate(7, active = false);
    	}

    	const writable_props = [
    		'class',
    		'active',
    		'persistent',
    		'disabled',
    		'width',
    		'fullscreen',
    		'transition',
    		'overlay'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Dialog> was created with unknown prop '${key}'`);
    	});

    	function introstart_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function outrostart_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function introend_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function outroend_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(0, klass = $$props.class);
    		if ('active' in $$props) $$invalidate(7, active = $$props.active);
    		if ('persistent' in $$props) $$invalidate(8, persistent = $$props.persistent);
    		if ('disabled' in $$props) $$invalidate(9, disabled = $$props.disabled);
    		if ('width' in $$props) $$invalidate(1, width = $$props.width);
    		if ('fullscreen' in $$props) $$invalidate(2, fullscreen = $$props.fullscreen);
    		if ('transition' in $$props) $$invalidate(3, transition = $$props.transition);
    		if ('overlay' in $$props) $$invalidate(4, overlay = $$props.overlay);
    		if ('$$scope' in $$props) $$invalidate(10, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		Overlay,
    		Style,
    		scale,
    		klass,
    		active,
    		persistent,
    		disabled,
    		width,
    		fullscreen,
    		transition,
    		overlay,
    		close,
    		visible
    	});

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(0, klass = $$props.klass);
    		if ('active' in $$props) $$invalidate(7, active = $$props.active);
    		if ('persistent' in $$props) $$invalidate(8, persistent = $$props.persistent);
    		if ('disabled' in $$props) $$invalidate(9, disabled = $$props.disabled);
    		if ('width' in $$props) $$invalidate(1, width = $$props.width);
    		if ('fullscreen' in $$props) $$invalidate(2, fullscreen = $$props.fullscreen);
    		if ('transition' in $$props) $$invalidate(3, transition = $$props.transition);
    		if ('overlay' in $$props) $$invalidate(4, overlay = $$props.overlay);
    		if ('visible' in $$props) $$invalidate(5, visible = $$props.visible);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*active, disabled*/ 640) {
    			$$invalidate(5, visible = active && !disabled);
    		}
    	};

    	return [
    		klass,
    		width,
    		fullscreen,
    		transition,
    		overlay,
    		visible,
    		close,
    		active,
    		persistent,
    		disabled,
    		$$scope,
    		slots,
    		introstart_handler,
    		outrostart_handler,
    		introend_handler,
    		outroend_handler
    	];
    }

    class Dialog extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$l, create_fragment$l, safe_not_equal, {
    			class: 0,
    			active: 7,
    			persistent: 8,
    			disabled: 9,
    			width: 1,
    			fullscreen: 2,
    			transition: 3,
    			overlay: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Dialog",
    			options,
    			id: create_fragment$l.name
    		});
    	}

    	get class() {
    		throw new Error("<Dialog>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Dialog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get active() {
    		throw new Error("<Dialog>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set active(value) {
    		throw new Error("<Dialog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get persistent() {
    		throw new Error("<Dialog>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set persistent(value) {
    		throw new Error("<Dialog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<Dialog>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<Dialog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get width() {
    		throw new Error("<Dialog>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set width(value) {
    		throw new Error("<Dialog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fullscreen() {
    		throw new Error("<Dialog>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fullscreen(value) {
    		throw new Error("<Dialog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get transition() {
    		throw new Error("<Dialog>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set transition(value) {
    		throw new Error("<Dialog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get overlay() {
    		throw new Error("<Dialog>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set overlay(value) {
    		throw new Error("<Dialog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-materialify\dist\components\ExpansionPanels\ExpansionPanels.svelte generated by Svelte v3.48.0 */
    const file$k = "node_modules\\svelte-materialify\\dist\\components\\ExpansionPanels\\ExpansionPanels.svelte";

    function create_fragment$k(ctx) {
    	let div;
    	let div_class_value;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[12].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", div_class_value = "s-expansion-panels " + /*klass*/ ctx[0]);
    			attr_dev(div, "style", /*style*/ ctx[6]);
    			toggle_class(div, "accordion", /*accordion*/ ctx[1]);
    			toggle_class(div, "popout", /*popout*/ ctx[2]);
    			toggle_class(div, "inset", /*inset*/ ctx[3]);
    			toggle_class(div, "flat", /*flat*/ ctx[4]);
    			toggle_class(div, "tile", /*tile*/ ctx[5]);
    			add_location(div, file$k, 148, 0, 3668);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[11],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[11], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*klass*/ 1 && div_class_value !== (div_class_value = "s-expansion-panels " + /*klass*/ ctx[0])) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (!current || dirty & /*style*/ 64) {
    				attr_dev(div, "style", /*style*/ ctx[6]);
    			}

    			if (dirty & /*klass, accordion*/ 3) {
    				toggle_class(div, "accordion", /*accordion*/ ctx[1]);
    			}

    			if (dirty & /*klass, popout*/ 5) {
    				toggle_class(div, "popout", /*popout*/ ctx[2]);
    			}

    			if (dirty & /*klass, inset*/ 9) {
    				toggle_class(div, "inset", /*inset*/ ctx[3]);
    			}

    			if (dirty & /*klass, flat*/ 17) {
    				toggle_class(div, "flat", /*flat*/ ctx[4]);
    			}

    			if (dirty & /*klass, tile*/ 33) {
    				toggle_class(div, "tile", /*tile*/ ctx[5]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$k.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const EXPANSION_PANELS = {};

    function instance$k($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ExpansionPanels', slots, ['default']);
    	let { class: klass = '' } = $$props;
    	let { value = [] } = $$props;
    	let { multiple = false } = $$props;
    	let { mandatory = false } = $$props;
    	let { accordion = false } = $$props;
    	let { popout = false } = $$props;
    	let { inset = false } = $$props;
    	let { flat = false } = $$props;
    	let { tile = false } = $$props;
    	let { disabled = null } = $$props;
    	let { style = null } = $$props;
    	const dispatch = createEventDispatcher();
    	const values = writable(value);
    	const Disabled = writable(disabled);
    	let startIndex = -1;

    	setContext(EXPANSION_PANELS, {
    		values,
    		Disabled,
    		selectPanel: index => {
    			if (value.includes(index)) {
    				if (!(mandatory && value.length === 1)) {
    					value.splice(value.indexOf(index), 1);
    					$$invalidate(7, value);
    					dispatch('change', { index, active: false });
    				}
    			} else {
    				if (multiple) {
    					value.push(index);
    					$$invalidate(7, value);
    				} else {
    					$$invalidate(7, value = [index]);
    				}

    				dispatch('change', { index, active: true });
    			}
    		},
    		index: () => {
    			startIndex += 1;
    			return startIndex;
    		}
    	});

    	const writable_props = [
    		'class',
    		'value',
    		'multiple',
    		'mandatory',
    		'accordion',
    		'popout',
    		'inset',
    		'flat',
    		'tile',
    		'disabled',
    		'style'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ExpansionPanels> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(0, klass = $$props.class);
    		if ('value' in $$props) $$invalidate(7, value = $$props.value);
    		if ('multiple' in $$props) $$invalidate(8, multiple = $$props.multiple);
    		if ('mandatory' in $$props) $$invalidate(9, mandatory = $$props.mandatory);
    		if ('accordion' in $$props) $$invalidate(1, accordion = $$props.accordion);
    		if ('popout' in $$props) $$invalidate(2, popout = $$props.popout);
    		if ('inset' in $$props) $$invalidate(3, inset = $$props.inset);
    		if ('flat' in $$props) $$invalidate(4, flat = $$props.flat);
    		if ('tile' in $$props) $$invalidate(5, tile = $$props.tile);
    		if ('disabled' in $$props) $$invalidate(10, disabled = $$props.disabled);
    		if ('style' in $$props) $$invalidate(6, style = $$props.style);
    		if ('$$scope' in $$props) $$invalidate(11, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		EXPANSION_PANELS,
    		createEventDispatcher,
    		setContext,
    		writable,
    		klass,
    		value,
    		multiple,
    		mandatory,
    		accordion,
    		popout,
    		inset,
    		flat,
    		tile,
    		disabled,
    		style,
    		dispatch,
    		values,
    		Disabled,
    		startIndex
    	});

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(0, klass = $$props.klass);
    		if ('value' in $$props) $$invalidate(7, value = $$props.value);
    		if ('multiple' in $$props) $$invalidate(8, multiple = $$props.multiple);
    		if ('mandatory' in $$props) $$invalidate(9, mandatory = $$props.mandatory);
    		if ('accordion' in $$props) $$invalidate(1, accordion = $$props.accordion);
    		if ('popout' in $$props) $$invalidate(2, popout = $$props.popout);
    		if ('inset' in $$props) $$invalidate(3, inset = $$props.inset);
    		if ('flat' in $$props) $$invalidate(4, flat = $$props.flat);
    		if ('tile' in $$props) $$invalidate(5, tile = $$props.tile);
    		if ('disabled' in $$props) $$invalidate(10, disabled = $$props.disabled);
    		if ('style' in $$props) $$invalidate(6, style = $$props.style);
    		if ('startIndex' in $$props) startIndex = $$props.startIndex;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*value*/ 128) {
    			values.set(value);
    		}

    		if ($$self.$$.dirty & /*disabled*/ 1024) {
    			Disabled.set(disabled);
    		}
    	};

    	return [
    		klass,
    		accordion,
    		popout,
    		inset,
    		flat,
    		tile,
    		style,
    		value,
    		multiple,
    		mandatory,
    		disabled,
    		$$scope,
    		slots
    	];
    }

    class ExpansionPanels extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$k, create_fragment$k, safe_not_equal, {
    			class: 0,
    			value: 7,
    			multiple: 8,
    			mandatory: 9,
    			accordion: 1,
    			popout: 2,
    			inset: 3,
    			flat: 4,
    			tile: 5,
    			disabled: 10,
    			style: 6
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ExpansionPanels",
    			options,
    			id: create_fragment$k.name
    		});
    	}

    	get class() {
    		throw new Error("<ExpansionPanels>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<ExpansionPanels>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<ExpansionPanels>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<ExpansionPanels>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get multiple() {
    		throw new Error("<ExpansionPanels>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set multiple(value) {
    		throw new Error("<ExpansionPanels>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get mandatory() {
    		throw new Error("<ExpansionPanels>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set mandatory(value) {
    		throw new Error("<ExpansionPanels>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get accordion() {
    		throw new Error("<ExpansionPanels>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set accordion(value) {
    		throw new Error("<ExpansionPanels>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get popout() {
    		throw new Error("<ExpansionPanels>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set popout(value) {
    		throw new Error("<ExpansionPanels>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get inset() {
    		throw new Error("<ExpansionPanels>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inset(value) {
    		throw new Error("<ExpansionPanels>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get flat() {
    		throw new Error("<ExpansionPanels>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set flat(value) {
    		throw new Error("<ExpansionPanels>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tile() {
    		throw new Error("<ExpansionPanels>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tile(value) {
    		throw new Error("<ExpansionPanels>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<ExpansionPanels>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<ExpansionPanels>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<ExpansionPanels>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<ExpansionPanels>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-materialify\dist\components\ExpansionPanels\ExpansionPanel.svelte generated by Svelte v3.48.0 */
    const file$j = "node_modules\\svelte-materialify\\dist\\components\\ExpansionPanels\\ExpansionPanel.svelte";
    const get_icon_slot_changes$1 = dirty => ({ active: dirty & /*active*/ 32 });
    const get_icon_slot_context$1 = ctx => ({ active: /*active*/ ctx[5] });
    const get_header_slot_changes = dirty => ({});
    const get_header_slot_context = ctx => ({});

    // (162:33)           
    function fallback_block$2(ctx) {
    	let icon;
    	let current;

    	icon = new Icon({
    			props: {
    				disabled: /*disabled*/ ctx[0],
    				path: down,
    				rotate: /*active*/ ctx[5] ? 180 : 0
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon_changes = {};
    			if (dirty & /*disabled*/ 1) icon_changes.disabled = /*disabled*/ ctx[0];
    			if (dirty & /*active*/ 32) icon_changes.rotate = /*active*/ ctx[5] ? 180 : 0;
    			icon.$set(icon_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block$2.name,
    		type: "fallback",
    		source: "(162:33)           ",
    		ctx
    	});

    	return block;
    }

    // (167:2) {#if active}
    function create_if_block$9(ctx) {
    	let div;
    	let div_transition;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[12].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", "s-expansion-panel__content");
    			add_location(div, file$j, 167, 4, 4239);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div, "introstart", /*introstart_handler*/ ctx[13], false, false, false),
    					listen_dev(div, "outrostart", /*outrostart_handler*/ ctx[14], false, false, false),
    					listen_dev(div, "introend", /*introend_handler*/ ctx[15], false, false, false),
    					listen_dev(div, "outroend", /*outroend_handler*/ ctx[16], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[11],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[11], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);

    			add_render_callback(() => {
    				if (!div_transition) div_transition = create_bidirectional_transition(div, slide, /*slideOpts*/ ctx[2], true);
    				div_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			if (!div_transition) div_transition = create_bidirectional_transition(div, slide, /*slideOpts*/ ctx[2], false);
    			div_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			if (detaching && div_transition) div_transition.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$9.name,
    		type: "if",
    		source: "(167:2) {#if active}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$j(ctx) {
    	let div1;
    	let button;
    	let t0;
    	let div0;
    	let button_tabindex_value;
    	let t1;
    	let div1_class_value;
    	let current;
    	let mounted;
    	let dispose;
    	const header_slot_template = /*#slots*/ ctx[12].header;
    	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[11], get_header_slot_context);
    	const icon_slot_template = /*#slots*/ ctx[12].icon;
    	const icon_slot = create_slot(icon_slot_template, ctx, /*$$scope*/ ctx[11], get_icon_slot_context$1);
    	const icon_slot_or_fallback = icon_slot || fallback_block$2(ctx);
    	let if_block = /*active*/ ctx[5] && create_if_block$9(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			button = element("button");
    			if (header_slot) header_slot.c();
    			t0 = space();
    			div0 = element("div");
    			if (icon_slot_or_fallback) icon_slot_or_fallback.c();
    			t1 = space();
    			if (if_block) if_block.c();
    			attr_dev(div0, "class", "s-expansion-panel__icon");
    			add_location(div0, file$j, 159, 4, 3976);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "s-expansion-panel__header");
    			attr_dev(button, "tabindex", button_tabindex_value = /*disabled*/ ctx[0] ? -1 : null);
    			add_location(button, file$j, 152, 2, 3773);
    			attr_dev(div1, "class", div1_class_value = "s-expansion-panel " + /*klass*/ ctx[1]);
    			attr_dev(div1, "aria-expanded", /*active*/ ctx[5]);
    			attr_dev(div1, "style", /*style*/ ctx[4]);
    			toggle_class(div1, "active", /*active*/ ctx[5]);
    			toggle_class(div1, "readonly", /*readonly*/ ctx[3]);
    			toggle_class(div1, "disabled", /*disabled*/ ctx[0]);
    			add_location(div1, file$j, 145, 0, 3638);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, button);

    			if (header_slot) {
    				header_slot.m(button, null);
    			}

    			append_dev(button, t0);
    			append_dev(button, div0);

    			if (icon_slot_or_fallback) {
    				icon_slot_or_fallback.m(div0, null);
    			}

    			append_dev(div1, t1);
    			if (if_block) if_block.m(div1, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*toggle*/ ctx[8], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (header_slot) {
    				if (header_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
    					update_slot_base(
    						header_slot,
    						header_slot_template,
    						ctx,
    						/*$$scope*/ ctx[11],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
    						: get_slot_changes(header_slot_template, /*$$scope*/ ctx[11], dirty, get_header_slot_changes),
    						get_header_slot_context
    					);
    				}
    			}

    			if (icon_slot) {
    				if (icon_slot.p && (!current || dirty & /*$$scope, active*/ 2080)) {
    					update_slot_base(
    						icon_slot,
    						icon_slot_template,
    						ctx,
    						/*$$scope*/ ctx[11],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
    						: get_slot_changes(icon_slot_template, /*$$scope*/ ctx[11], dirty, get_icon_slot_changes$1),
    						get_icon_slot_context$1
    					);
    				}
    			} else {
    				if (icon_slot_or_fallback && icon_slot_or_fallback.p && (!current || dirty & /*disabled, active*/ 33)) {
    					icon_slot_or_fallback.p(ctx, !current ? -1 : dirty);
    				}
    			}

    			if (!current || dirty & /*disabled*/ 1 && button_tabindex_value !== (button_tabindex_value = /*disabled*/ ctx[0] ? -1 : null)) {
    				attr_dev(button, "tabindex", button_tabindex_value);
    			}

    			if (/*active*/ ctx[5]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*active*/ 32) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$9(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div1, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty & /*klass*/ 2 && div1_class_value !== (div1_class_value = "s-expansion-panel " + /*klass*/ ctx[1])) {
    				attr_dev(div1, "class", div1_class_value);
    			}

    			if (!current || dirty & /*active*/ 32) {
    				attr_dev(div1, "aria-expanded", /*active*/ ctx[5]);
    			}

    			if (!current || dirty & /*style*/ 16) {
    				attr_dev(div1, "style", /*style*/ ctx[4]);
    			}

    			if (dirty & /*klass, active*/ 34) {
    				toggle_class(div1, "active", /*active*/ ctx[5]);
    			}

    			if (dirty & /*klass, readonly*/ 10) {
    				toggle_class(div1, "readonly", /*readonly*/ ctx[3]);
    			}

    			if (dirty & /*klass, disabled*/ 3) {
    				toggle_class(div1, "disabled", /*disabled*/ ctx[0]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(header_slot, local);
    			transition_in(icon_slot_or_fallback, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(header_slot, local);
    			transition_out(icon_slot_or_fallback, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (header_slot) header_slot.d(detaching);
    			if (icon_slot_or_fallback) icon_slot_or_fallback.d(detaching);
    			if (if_block) if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$j($$self, $$props, $$invalidate) {
    	let $values;
    	let $Disabled;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ExpansionPanel', slots, ['header','icon','default']);
    	const { values, Disabled, selectPanel, index } = getContext(EXPANSION_PANELS);
    	validate_store(values, 'values');
    	component_subscribe($$self, values, value => $$invalidate(9, $values = value));
    	validate_store(Disabled, 'Disabled');
    	component_subscribe($$self, Disabled, value => $$invalidate(10, $Disabled = value));
    	let { class: klass = '' } = $$props;
    	let { slideOpts = {} } = $$props;
    	let { readonly = false } = $$props;
    	let { disabled = false } = $$props;
    	let { style = null } = $$props;
    	const value = index();
    	let active = false;

    	function toggle() {
    		selectPanel(value);
    	}

    	const writable_props = ['class', 'slideOpts', 'readonly', 'disabled', 'style'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ExpansionPanel> was created with unknown prop '${key}'`);
    	});

    	function introstart_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function outrostart_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function introend_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function outroend_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(1, klass = $$props.class);
    		if ('slideOpts' in $$props) $$invalidate(2, slideOpts = $$props.slideOpts);
    		if ('readonly' in $$props) $$invalidate(3, readonly = $$props.readonly);
    		if ('disabled' in $$props) $$invalidate(0, disabled = $$props.disabled);
    		if ('style' in $$props) $$invalidate(4, style = $$props.style);
    		if ('$$scope' in $$props) $$invalidate(11, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		EXPANSION_PANELS,
    		slide,
    		Icon,
    		down,
    		values,
    		Disabled,
    		selectPanel,
    		index,
    		klass,
    		slideOpts,
    		readonly,
    		disabled,
    		style,
    		value,
    		active,
    		toggle,
    		$values,
    		$Disabled
    	});

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(1, klass = $$props.klass);
    		if ('slideOpts' in $$props) $$invalidate(2, slideOpts = $$props.slideOpts);
    		if ('readonly' in $$props) $$invalidate(3, readonly = $$props.readonly);
    		if ('disabled' in $$props) $$invalidate(0, disabled = $$props.disabled);
    		if ('style' in $$props) $$invalidate(4, style = $$props.style);
    		if ('active' in $$props) $$invalidate(5, active = $$props.active);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$Disabled, disabled*/ 1025) {
    			// Inheriting the disabled value from parent.
    			$$invalidate(0, disabled = $Disabled == null ? disabled : $Disabled);
    		}

    		if ($$self.$$.dirty & /*$values*/ 512) {
    			// Checking if panel is active everytime the value has changed.
    			$$invalidate(5, active = $values.includes(value));
    		}
    	};

    	return [
    		disabled,
    		klass,
    		slideOpts,
    		readonly,
    		style,
    		active,
    		values,
    		Disabled,
    		toggle,
    		$values,
    		$Disabled,
    		$$scope,
    		slots,
    		introstart_handler,
    		outrostart_handler,
    		introend_handler,
    		outroend_handler
    	];
    }

    class ExpansionPanel extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$j, create_fragment$j, safe_not_equal, {
    			class: 1,
    			slideOpts: 2,
    			readonly: 3,
    			disabled: 0,
    			style: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ExpansionPanel",
    			options,
    			id: create_fragment$j.name
    		});
    	}

    	get class() {
    		throw new Error("<ExpansionPanel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<ExpansionPanel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get slideOpts() {
    		throw new Error("<ExpansionPanel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set slideOpts(value) {
    		throw new Error("<ExpansionPanel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get readonly() {
    		throw new Error("<ExpansionPanel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set readonly(value) {
    		throw new Error("<ExpansionPanel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<ExpansionPanel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<ExpansionPanel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<ExpansionPanel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<ExpansionPanel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-materialify\dist\components\AppBar\AppBar.svelte generated by Svelte v3.48.0 */
    const file$i = "node_modules\\svelte-materialify\\dist\\components\\AppBar\\AppBar.svelte";
    const get_extension_slot_changes = dirty => ({});
    const get_extension_slot_context = ctx => ({});
    const get_title_slot_changes = dirty => ({});
    const get_title_slot_context = ctx => ({});
    const get_icon_slot_changes = dirty => ({});
    const get_icon_slot_context = ctx => ({});

    // (107:4) {#if !collapsed}
    function create_if_block$8(ctx) {
    	let div;
    	let current;
    	const title_slot_template = /*#slots*/ ctx[11].title;
    	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[10], get_title_slot_context);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (title_slot) title_slot.c();
    			attr_dev(div, "class", "s-app-bar__title");
    			add_location(div, file$i, 107, 6, 2257);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (title_slot) {
    				title_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (title_slot) {
    				if (title_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
    					update_slot_base(
    						title_slot,
    						title_slot_template,
    						ctx,
    						/*$$scope*/ ctx[10],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
    						: get_slot_changes(title_slot_template, /*$$scope*/ ctx[10], dirty, get_title_slot_changes),
    						get_title_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(title_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(title_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (title_slot) title_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$8.name,
    		type: "if",
    		source: "(107:4) {#if !collapsed}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$i(ctx) {
    	let header;
    	let div;
    	let t0;
    	let t1;
    	let t2;
    	let header_class_value;
    	let Style_action;
    	let current;
    	let mounted;
    	let dispose;
    	const icon_slot_template = /*#slots*/ ctx[11].icon;
    	const icon_slot = create_slot(icon_slot_template, ctx, /*$$scope*/ ctx[10], get_icon_slot_context);
    	let if_block = !/*collapsed*/ ctx[8] && create_if_block$8(ctx);
    	const default_slot_template = /*#slots*/ ctx[11].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
    	const extension_slot_template = /*#slots*/ ctx[11].extension;
    	const extension_slot = create_slot(extension_slot_template, ctx, /*$$scope*/ ctx[10], get_extension_slot_context);

    	const block = {
    		c: function create() {
    			header = element("header");
    			div = element("div");
    			if (icon_slot) icon_slot.c();
    			t0 = space();
    			if (if_block) if_block.c();
    			t1 = space();
    			if (default_slot) default_slot.c();
    			t2 = space();
    			if (extension_slot) extension_slot.c();
    			attr_dev(div, "class", "s-app-bar__wrapper");
    			add_location(div, file$i, 104, 2, 2172);
    			attr_dev(header, "class", header_class_value = "s-app-bar " + /*klass*/ ctx[0]);
    			attr_dev(header, "style", /*style*/ ctx[9]);
    			toggle_class(header, "tile", /*tile*/ ctx[2]);
    			toggle_class(header, "flat", /*flat*/ ctx[3]);
    			toggle_class(header, "dense", /*dense*/ ctx[4]);
    			toggle_class(header, "prominent", /*prominent*/ ctx[5]);
    			toggle_class(header, "fixed", /*fixed*/ ctx[6]);
    			toggle_class(header, "absolute", /*absolute*/ ctx[7]);
    			toggle_class(header, "collapsed", /*collapsed*/ ctx[8]);
    			add_location(header, file$i, 93, 0, 1973);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, header, anchor);
    			append_dev(header, div);

    			if (icon_slot) {
    				icon_slot.m(div, null);
    			}

    			append_dev(div, t0);
    			if (if_block) if_block.m(div, null);
    			append_dev(div, t1);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			append_dev(header, t2);

    			if (extension_slot) {
    				extension_slot.m(header, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(Style_action = Style.call(null, header, { 'app-bar-height': /*height*/ ctx[1] }));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (icon_slot) {
    				if (icon_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
    					update_slot_base(
    						icon_slot,
    						icon_slot_template,
    						ctx,
    						/*$$scope*/ ctx[10],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
    						: get_slot_changes(icon_slot_template, /*$$scope*/ ctx[10], dirty, get_icon_slot_changes),
    						get_icon_slot_context
    					);
    				}
    			}

    			if (!/*collapsed*/ ctx[8]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*collapsed*/ 256) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$8(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, t1);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[10],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
    						null
    					);
    				}
    			}

    			if (extension_slot) {
    				if (extension_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
    					update_slot_base(
    						extension_slot,
    						extension_slot_template,
    						ctx,
    						/*$$scope*/ ctx[10],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
    						: get_slot_changes(extension_slot_template, /*$$scope*/ ctx[10], dirty, get_extension_slot_changes),
    						get_extension_slot_context
    					);
    				}
    			}

    			if (!current || dirty & /*klass*/ 1 && header_class_value !== (header_class_value = "s-app-bar " + /*klass*/ ctx[0])) {
    				attr_dev(header, "class", header_class_value);
    			}

    			if (!current || dirty & /*style*/ 512) {
    				attr_dev(header, "style", /*style*/ ctx[9]);
    			}

    			if (Style_action && is_function(Style_action.update) && dirty & /*height*/ 2) Style_action.update.call(null, { 'app-bar-height': /*height*/ ctx[1] });

    			if (dirty & /*klass, tile*/ 5) {
    				toggle_class(header, "tile", /*tile*/ ctx[2]);
    			}

    			if (dirty & /*klass, flat*/ 9) {
    				toggle_class(header, "flat", /*flat*/ ctx[3]);
    			}

    			if (dirty & /*klass, dense*/ 17) {
    				toggle_class(header, "dense", /*dense*/ ctx[4]);
    			}

    			if (dirty & /*klass, prominent*/ 33) {
    				toggle_class(header, "prominent", /*prominent*/ ctx[5]);
    			}

    			if (dirty & /*klass, fixed*/ 65) {
    				toggle_class(header, "fixed", /*fixed*/ ctx[6]);
    			}

    			if (dirty & /*klass, absolute*/ 129) {
    				toggle_class(header, "absolute", /*absolute*/ ctx[7]);
    			}

    			if (dirty & /*klass, collapsed*/ 257) {
    				toggle_class(header, "collapsed", /*collapsed*/ ctx[8]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon_slot, local);
    			transition_in(if_block);
    			transition_in(default_slot, local);
    			transition_in(extension_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon_slot, local);
    			transition_out(if_block);
    			transition_out(default_slot, local);
    			transition_out(extension_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(header);
    			if (icon_slot) icon_slot.d(detaching);
    			if (if_block) if_block.d();
    			if (default_slot) default_slot.d(detaching);
    			if (extension_slot) extension_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$i($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AppBar', slots, ['icon','title','default','extension']);
    	let { class: klass = '' } = $$props;
    	let { height = '56px' } = $$props;
    	let { tile = false } = $$props;
    	let { flat = false } = $$props;
    	let { dense = false } = $$props;
    	let { prominent = false } = $$props;
    	let { fixed = false } = $$props;
    	let { absolute = false } = $$props;
    	let { collapsed = false } = $$props;
    	let { style = '' } = $$props;

    	const writable_props = [
    		'class',
    		'height',
    		'tile',
    		'flat',
    		'dense',
    		'prominent',
    		'fixed',
    		'absolute',
    		'collapsed',
    		'style'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AppBar> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(0, klass = $$props.class);
    		if ('height' in $$props) $$invalidate(1, height = $$props.height);
    		if ('tile' in $$props) $$invalidate(2, tile = $$props.tile);
    		if ('flat' in $$props) $$invalidate(3, flat = $$props.flat);
    		if ('dense' in $$props) $$invalidate(4, dense = $$props.dense);
    		if ('prominent' in $$props) $$invalidate(5, prominent = $$props.prominent);
    		if ('fixed' in $$props) $$invalidate(6, fixed = $$props.fixed);
    		if ('absolute' in $$props) $$invalidate(7, absolute = $$props.absolute);
    		if ('collapsed' in $$props) $$invalidate(8, collapsed = $$props.collapsed);
    		if ('style' in $$props) $$invalidate(9, style = $$props.style);
    		if ('$$scope' in $$props) $$invalidate(10, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		Style,
    		klass,
    		height,
    		tile,
    		flat,
    		dense,
    		prominent,
    		fixed,
    		absolute,
    		collapsed,
    		style
    	});

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(0, klass = $$props.klass);
    		if ('height' in $$props) $$invalidate(1, height = $$props.height);
    		if ('tile' in $$props) $$invalidate(2, tile = $$props.tile);
    		if ('flat' in $$props) $$invalidate(3, flat = $$props.flat);
    		if ('dense' in $$props) $$invalidate(4, dense = $$props.dense);
    		if ('prominent' in $$props) $$invalidate(5, prominent = $$props.prominent);
    		if ('fixed' in $$props) $$invalidate(6, fixed = $$props.fixed);
    		if ('absolute' in $$props) $$invalidate(7, absolute = $$props.absolute);
    		if ('collapsed' in $$props) $$invalidate(8, collapsed = $$props.collapsed);
    		if ('style' in $$props) $$invalidate(9, style = $$props.style);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		klass,
    		height,
    		tile,
    		flat,
    		dense,
    		prominent,
    		fixed,
    		absolute,
    		collapsed,
    		style,
    		$$scope,
    		slots
    	];
    }

    class AppBar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$i, create_fragment$i, safe_not_equal, {
    			class: 0,
    			height: 1,
    			tile: 2,
    			flat: 3,
    			dense: 4,
    			prominent: 5,
    			fixed: 6,
    			absolute: 7,
    			collapsed: 8,
    			style: 9
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AppBar",
    			options,
    			id: create_fragment$i.name
    		});
    	}

    	get class() {
    		throw new Error("<AppBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<AppBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get height() {
    		throw new Error("<AppBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set height(value) {
    		throw new Error("<AppBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tile() {
    		throw new Error("<AppBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tile(value) {
    		throw new Error("<AppBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get flat() {
    		throw new Error("<AppBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set flat(value) {
    		throw new Error("<AppBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dense() {
    		throw new Error("<AppBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dense(value) {
    		throw new Error("<AppBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prominent() {
    		throw new Error("<AppBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prominent(value) {
    		throw new Error("<AppBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fixed() {
    		throw new Error("<AppBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fixed(value) {
    		throw new Error("<AppBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get absolute() {
    		throw new Error("<AppBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set absolute(value) {
    		throw new Error("<AppBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get collapsed() {
    		throw new Error("<AppBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set collapsed(value) {
    		throw new Error("<AppBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<AppBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<AppBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-materialify\dist\components\ProgressLinear\ProgressLinear.svelte generated by Svelte v3.48.0 */
    const file$h = "node_modules\\svelte-materialify\\dist\\components\\ProgressLinear\\ProgressLinear.svelte";

    // (169:2) {:else}
    function create_else_block$2(ctx) {
    	let div;
    	let BackgroundColor_action;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "determinate svelte-116424u");
    			set_style(div, "width", /*value*/ ctx[1] + "%");
    			toggle_class(div, "striped", /*striped*/ ctx[12]);
    			add_location(div, file$h, 169, 4, 3710);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (!mounted) {
    				dispose = action_destroyer(BackgroundColor_action = BackgroundColor.call(null, div, /*color*/ ctx[7]));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*value*/ 2) {
    				set_style(div, "width", /*value*/ ctx[1] + "%");
    			}

    			if (BackgroundColor_action && is_function(BackgroundColor_action.update) && dirty & /*color*/ 128) BackgroundColor_action.update.call(null, /*color*/ ctx[7]);

    			if (dirty & /*striped*/ 4096) {
    				toggle_class(div, "striped", /*striped*/ ctx[12]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$2.name,
    		type: "else",
    		source: "(169:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (164:2) {#if indeterminate}
    function create_if_block_1$5(ctx) {
    	let div2;
    	let div0;
    	let t;
    	let div1;
    	let BackgroundColor_action;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "indeterminate long svelte-116424u");
    			add_location(div0, file$h, 165, 6, 3608);
    			attr_dev(div1, "class", "indeterminate short svelte-116424u");
    			add_location(div1, file$h, 166, 6, 3649);
    			add_location(div2, file$h, 164, 4, 3568);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div2, t);
    			append_dev(div2, div1);

    			if (!mounted) {
    				dispose = action_destroyer(BackgroundColor_action = BackgroundColor.call(null, div2, /*color*/ ctx[7]));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (BackgroundColor_action && is_function(BackgroundColor_action.update) && dirty & /*color*/ 128) BackgroundColor_action.update.call(null, /*color*/ ctx[7]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$5.name,
    		type: "if",
    		source: "(164:2) {#if indeterminate}",
    		ctx
    	});

    	return block;
    }

    // (181:2) {#if stream}
    function create_if_block$7(ctx) {
    	let div;
    	let div_class_value;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", div_class_value = "stream " + /*color*/ ctx[7] + " svelte-116424u");
    			set_style(div, "width", 100 - /*buffer*/ ctx[8] + "%");
    			add_location(div, file$h, 181, 4, 3921);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*color*/ 128 && div_class_value !== (div_class_value = "stream " + /*color*/ ctx[7] + " svelte-116424u")) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (dirty & /*buffer*/ 256) {
    				set_style(div, "width", 100 - /*buffer*/ ctx[8] + "%");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$7.name,
    		type: "if",
    		source: "(181:2) {#if stream}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$h(ctx) {
    	let div2;
    	let div0;
    	let div0_style_value;
    	let BackgroundColor_action;
    	let t0;
    	let t1;
    	let div1;
    	let t2;
    	let div2_class_value;
    	let div2_style_value;
    	let current;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*indeterminate*/ ctx[3]) return create_if_block_1$5;
    		return create_else_block$2;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block0 = current_block_type(ctx);
    	const default_slot_template = /*#slots*/ ctx[15].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[14], null);
    	let if_block1 = /*stream*/ ctx[10] && create_if_block$7(ctx);

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			t0 = space();
    			if_block0.c();
    			t1 = space();
    			div1 = element("div");
    			if (default_slot) default_slot.c();
    			t2 = space();
    			if (if_block1) if_block1.c();
    			attr_dev(div0, "class", "background svelte-116424u");
    			attr_dev(div0, "style", div0_style_value = "opacity:" + /*backgroundOpacity*/ ctx[6] + ";" + (/*reversed*/ ctx[9] ? 'right' : 'left') + ":" + /*value*/ ctx[1] + "%;width:" + (/*buffer*/ ctx[8] - /*value*/ ctx[1]) + "%");
    			add_location(div0, file$h, 158, 2, 3365);
    			attr_dev(div1, "class", "s-progress-linear__content svelte-116424u");
    			add_location(div1, file$h, 176, 2, 3838);
    			attr_dev(div2, "role", "progressbar");
    			attr_dev(div2, "aria-valuemin", "0");
    			attr_dev(div2, "aria-valuemax", "100");
    			attr_dev(div2, "aria-valuenow", /*value*/ ctx[1]);
    			attr_dev(div2, "class", div2_class_value = "s-progress-linear " + /*klass*/ ctx[0] + " svelte-116424u");
    			attr_dev(div2, "style", div2_style_value = "height:" + /*height*/ ctx[4] + ";" + /*style*/ ctx[13]);
    			toggle_class(div2, "inactive", !/*active*/ ctx[2]);
    			toggle_class(div2, "reversed", /*reversed*/ ctx[9]);
    			toggle_class(div2, "rounded", /*rounded*/ ctx[11]);
    			add_location(div2, file$h, 148, 0, 3140);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div2, t0);
    			if_block0.m(div2, null);
    			append_dev(div2, t1);
    			append_dev(div2, div1);

    			if (default_slot) {
    				default_slot.m(div1, null);
    			}

    			append_dev(div2, t2);
    			if (if_block1) if_block1.m(div2, null);
    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(BackgroundColor_action = BackgroundColor.call(null, div0, /*backgroundColor*/ ctx[5]));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*backgroundOpacity, reversed, value, buffer*/ 834 && div0_style_value !== (div0_style_value = "opacity:" + /*backgroundOpacity*/ ctx[6] + ";" + (/*reversed*/ ctx[9] ? 'right' : 'left') + ":" + /*value*/ ctx[1] + "%;width:" + (/*buffer*/ ctx[8] - /*value*/ ctx[1]) + "%")) {
    				attr_dev(div0, "style", div0_style_value);
    			}

    			if (BackgroundColor_action && is_function(BackgroundColor_action.update) && dirty & /*backgroundColor*/ 32) BackgroundColor_action.update.call(null, /*backgroundColor*/ ctx[5]);

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
    				if_block0.p(ctx, dirty);
    			} else {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(div2, t1);
    				}
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 16384)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[14],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[14])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[14], dirty, null),
    						null
    					);
    				}
    			}

    			if (/*stream*/ ctx[10]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block$7(ctx);
    					if_block1.c();
    					if_block1.m(div2, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (!current || dirty & /*value*/ 2) {
    				attr_dev(div2, "aria-valuenow", /*value*/ ctx[1]);
    			}

    			if (!current || dirty & /*klass*/ 1 && div2_class_value !== (div2_class_value = "s-progress-linear " + /*klass*/ ctx[0] + " svelte-116424u")) {
    				attr_dev(div2, "class", div2_class_value);
    			}

    			if (!current || dirty & /*height, style*/ 8208 && div2_style_value !== (div2_style_value = "height:" + /*height*/ ctx[4] + ";" + /*style*/ ctx[13])) {
    				attr_dev(div2, "style", div2_style_value);
    			}

    			if (dirty & /*klass, active*/ 5) {
    				toggle_class(div2, "inactive", !/*active*/ ctx[2]);
    			}

    			if (dirty & /*klass, reversed*/ 513) {
    				toggle_class(div2, "reversed", /*reversed*/ ctx[9]);
    			}

    			if (dirty & /*klass, rounded*/ 2049) {
    				toggle_class(div2, "rounded", /*rounded*/ ctx[11]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			if_block0.d();
    			if (default_slot) default_slot.d(detaching);
    			if (if_block1) if_block1.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$h($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ProgressLinear', slots, ['default']);
    	let { class: klass = '' } = $$props;
    	let { value = 0 } = $$props;
    	let { active = true } = $$props;
    	let { indeterminate = false } = $$props;
    	let { height = '4px' } = $$props;
    	let { backgroundColor = 'primary' } = $$props;
    	let { backgroundOpacity = 0.3 } = $$props;
    	let { color = backgroundColor } = $$props;
    	let { buffer = 100 } = $$props;
    	let { reversed = false } = $$props;
    	let { stream = false } = $$props;
    	let { rounded = false } = $$props;
    	let { striped = false } = $$props;
    	let { style = '' } = $$props;

    	const writable_props = [
    		'class',
    		'value',
    		'active',
    		'indeterminate',
    		'height',
    		'backgroundColor',
    		'backgroundOpacity',
    		'color',
    		'buffer',
    		'reversed',
    		'stream',
    		'rounded',
    		'striped',
    		'style'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ProgressLinear> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(0, klass = $$props.class);
    		if ('value' in $$props) $$invalidate(1, value = $$props.value);
    		if ('active' in $$props) $$invalidate(2, active = $$props.active);
    		if ('indeterminate' in $$props) $$invalidate(3, indeterminate = $$props.indeterminate);
    		if ('height' in $$props) $$invalidate(4, height = $$props.height);
    		if ('backgroundColor' in $$props) $$invalidate(5, backgroundColor = $$props.backgroundColor);
    		if ('backgroundOpacity' in $$props) $$invalidate(6, backgroundOpacity = $$props.backgroundOpacity);
    		if ('color' in $$props) $$invalidate(7, color = $$props.color);
    		if ('buffer' in $$props) $$invalidate(8, buffer = $$props.buffer);
    		if ('reversed' in $$props) $$invalidate(9, reversed = $$props.reversed);
    		if ('stream' in $$props) $$invalidate(10, stream = $$props.stream);
    		if ('rounded' in $$props) $$invalidate(11, rounded = $$props.rounded);
    		if ('striped' in $$props) $$invalidate(12, striped = $$props.striped);
    		if ('style' in $$props) $$invalidate(13, style = $$props.style);
    		if ('$$scope' in $$props) $$invalidate(14, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		BackgroundColor,
    		klass,
    		value,
    		active,
    		indeterminate,
    		height,
    		backgroundColor,
    		backgroundOpacity,
    		color,
    		buffer,
    		reversed,
    		stream,
    		rounded,
    		striped,
    		style
    	});

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(0, klass = $$props.klass);
    		if ('value' in $$props) $$invalidate(1, value = $$props.value);
    		if ('active' in $$props) $$invalidate(2, active = $$props.active);
    		if ('indeterminate' in $$props) $$invalidate(3, indeterminate = $$props.indeterminate);
    		if ('height' in $$props) $$invalidate(4, height = $$props.height);
    		if ('backgroundColor' in $$props) $$invalidate(5, backgroundColor = $$props.backgroundColor);
    		if ('backgroundOpacity' in $$props) $$invalidate(6, backgroundOpacity = $$props.backgroundOpacity);
    		if ('color' in $$props) $$invalidate(7, color = $$props.color);
    		if ('buffer' in $$props) $$invalidate(8, buffer = $$props.buffer);
    		if ('reversed' in $$props) $$invalidate(9, reversed = $$props.reversed);
    		if ('stream' in $$props) $$invalidate(10, stream = $$props.stream);
    		if ('rounded' in $$props) $$invalidate(11, rounded = $$props.rounded);
    		if ('striped' in $$props) $$invalidate(12, striped = $$props.striped);
    		if ('style' in $$props) $$invalidate(13, style = $$props.style);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		klass,
    		value,
    		active,
    		indeterminate,
    		height,
    		backgroundColor,
    		backgroundOpacity,
    		color,
    		buffer,
    		reversed,
    		stream,
    		rounded,
    		striped,
    		style,
    		$$scope,
    		slots
    	];
    }

    class ProgressLinear extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$h, create_fragment$h, safe_not_equal, {
    			class: 0,
    			value: 1,
    			active: 2,
    			indeterminate: 3,
    			height: 4,
    			backgroundColor: 5,
    			backgroundOpacity: 6,
    			color: 7,
    			buffer: 8,
    			reversed: 9,
    			stream: 10,
    			rounded: 11,
    			striped: 12,
    			style: 13
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ProgressLinear",
    			options,
    			id: create_fragment$h.name
    		});
    	}

    	get class() {
    		throw new Error("<ProgressLinear>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<ProgressLinear>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<ProgressLinear>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<ProgressLinear>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get active() {
    		throw new Error("<ProgressLinear>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set active(value) {
    		throw new Error("<ProgressLinear>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get indeterminate() {
    		throw new Error("<ProgressLinear>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set indeterminate(value) {
    		throw new Error("<ProgressLinear>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get height() {
    		throw new Error("<ProgressLinear>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set height(value) {
    		throw new Error("<ProgressLinear>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get backgroundColor() {
    		throw new Error("<ProgressLinear>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set backgroundColor(value) {
    		throw new Error("<ProgressLinear>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get backgroundOpacity() {
    		throw new Error("<ProgressLinear>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set backgroundOpacity(value) {
    		throw new Error("<ProgressLinear>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<ProgressLinear>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<ProgressLinear>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get buffer() {
    		throw new Error("<ProgressLinear>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set buffer(value) {
    		throw new Error("<ProgressLinear>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get reversed() {
    		throw new Error("<ProgressLinear>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set reversed(value) {
    		throw new Error("<ProgressLinear>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get stream() {
    		throw new Error("<ProgressLinear>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set stream(value) {
    		throw new Error("<ProgressLinear>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rounded() {
    		throw new Error("<ProgressLinear>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rounded(value) {
    		throw new Error("<ProgressLinear>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get striped() {
    		throw new Error("<ProgressLinear>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set striped(value) {
    		throw new Error("<ProgressLinear>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<ProgressLinear>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<ProgressLinear>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-materialify\dist\components\Card\Card.svelte generated by Svelte v3.48.0 */
    const file$g = "node_modules\\svelte-materialify\\dist\\components\\Card\\Card.svelte";
    const get_progress_slot_changes = dirty => ({});
    const get_progress_slot_context = ctx => ({});

    // (113:2) {#if loading}
    function create_if_block$6(ctx) {
    	let current;
    	const progress_slot_template = /*#slots*/ ctx[12].progress;
    	const progress_slot = create_slot(progress_slot_template, ctx, /*$$scope*/ ctx[11], get_progress_slot_context);
    	const progress_slot_or_fallback = progress_slot || fallback_block$1(ctx);

    	const block = {
    		c: function create() {
    			if (progress_slot_or_fallback) progress_slot_or_fallback.c();
    		},
    		m: function mount(target, anchor) {
    			if (progress_slot_or_fallback) {
    				progress_slot_or_fallback.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (progress_slot) {
    				if (progress_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
    					update_slot_base(
    						progress_slot,
    						progress_slot_template,
    						ctx,
    						/*$$scope*/ ctx[11],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
    						: get_slot_changes(progress_slot_template, /*$$scope*/ ctx[11], dirty, get_progress_slot_changes),
    						get_progress_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(progress_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(progress_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (progress_slot_or_fallback) progress_slot_or_fallback.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$6.name,
    		type: "if",
    		source: "(113:2) {#if loading}",
    		ctx
    	});

    	return block;
    }

    // (114:26)        
    function fallback_block$1(ctx) {
    	let progresslinear;
    	let current;

    	progresslinear = new ProgressLinear({
    			props: { indeterminate: true },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(progresslinear.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(progresslinear, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(progresslinear.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(progresslinear.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(progresslinear, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block$1.name,
    		type: "fallback",
    		source: "(114:26)        ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$g(ctx) {
    	let div;
    	let t;
    	let div_class_value;
    	let current;
    	let if_block = /*loading*/ ctx[8] && create_if_block$6(ctx);
    	const default_slot_template = /*#slots*/ ctx[12].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			t = space();
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", div_class_value = "s-card " + /*klass*/ ctx[0]);
    			attr_dev(div, "style", /*style*/ ctx[10]);
    			toggle_class(div, "flat", /*flat*/ ctx[1]);
    			toggle_class(div, "tile", /*tile*/ ctx[2]);
    			toggle_class(div, "outlined", /*outlined*/ ctx[3]);
    			toggle_class(div, "raised", /*raised*/ ctx[4]);
    			toggle_class(div, "shaped", /*shaped*/ ctx[5]);
    			toggle_class(div, "hover", /*hover*/ ctx[6]);
    			toggle_class(div, "link", /*link*/ ctx[7]);
    			toggle_class(div, "disabled", /*disabled*/ ctx[9]);
    			add_location(div, file$g, 101, 0, 2536);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    			append_dev(div, t);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*loading*/ ctx[8]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*loading*/ 256) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$6(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, t);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[11],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[11], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*klass*/ 1 && div_class_value !== (div_class_value = "s-card " + /*klass*/ ctx[0])) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (!current || dirty & /*style*/ 1024) {
    				attr_dev(div, "style", /*style*/ ctx[10]);
    			}

    			if (dirty & /*klass, flat*/ 3) {
    				toggle_class(div, "flat", /*flat*/ ctx[1]);
    			}

    			if (dirty & /*klass, tile*/ 5) {
    				toggle_class(div, "tile", /*tile*/ ctx[2]);
    			}

    			if (dirty & /*klass, outlined*/ 9) {
    				toggle_class(div, "outlined", /*outlined*/ ctx[3]);
    			}

    			if (dirty & /*klass, raised*/ 17) {
    				toggle_class(div, "raised", /*raised*/ ctx[4]);
    			}

    			if (dirty & /*klass, shaped*/ 33) {
    				toggle_class(div, "shaped", /*shaped*/ ctx[5]);
    			}

    			if (dirty & /*klass, hover*/ 65) {
    				toggle_class(div, "hover", /*hover*/ ctx[6]);
    			}

    			if (dirty & /*klass, link*/ 129) {
    				toggle_class(div, "link", /*link*/ ctx[7]);
    			}

    			if (dirty & /*klass, disabled*/ 513) {
    				toggle_class(div, "disabled", /*disabled*/ ctx[9]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$g($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Card', slots, ['progress','default']);
    	let { class: klass = '' } = $$props;
    	let { flat = false } = $$props;
    	let { tile = false } = $$props;
    	let { outlined = false } = $$props;
    	let { raised = false } = $$props;
    	let { shaped = false } = $$props;
    	let { hover = false } = $$props;
    	let { link = false } = $$props;
    	let { loading = false } = $$props;
    	let { disabled = false } = $$props;
    	let { style = null } = $$props;

    	const writable_props = [
    		'class',
    		'flat',
    		'tile',
    		'outlined',
    		'raised',
    		'shaped',
    		'hover',
    		'link',
    		'loading',
    		'disabled',
    		'style'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Card> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(0, klass = $$props.class);
    		if ('flat' in $$props) $$invalidate(1, flat = $$props.flat);
    		if ('tile' in $$props) $$invalidate(2, tile = $$props.tile);
    		if ('outlined' in $$props) $$invalidate(3, outlined = $$props.outlined);
    		if ('raised' in $$props) $$invalidate(4, raised = $$props.raised);
    		if ('shaped' in $$props) $$invalidate(5, shaped = $$props.shaped);
    		if ('hover' in $$props) $$invalidate(6, hover = $$props.hover);
    		if ('link' in $$props) $$invalidate(7, link = $$props.link);
    		if ('loading' in $$props) $$invalidate(8, loading = $$props.loading);
    		if ('disabled' in $$props) $$invalidate(9, disabled = $$props.disabled);
    		if ('style' in $$props) $$invalidate(10, style = $$props.style);
    		if ('$$scope' in $$props) $$invalidate(11, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		ProgressLinear,
    		klass,
    		flat,
    		tile,
    		outlined,
    		raised,
    		shaped,
    		hover,
    		link,
    		loading,
    		disabled,
    		style
    	});

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(0, klass = $$props.klass);
    		if ('flat' in $$props) $$invalidate(1, flat = $$props.flat);
    		if ('tile' in $$props) $$invalidate(2, tile = $$props.tile);
    		if ('outlined' in $$props) $$invalidate(3, outlined = $$props.outlined);
    		if ('raised' in $$props) $$invalidate(4, raised = $$props.raised);
    		if ('shaped' in $$props) $$invalidate(5, shaped = $$props.shaped);
    		if ('hover' in $$props) $$invalidate(6, hover = $$props.hover);
    		if ('link' in $$props) $$invalidate(7, link = $$props.link);
    		if ('loading' in $$props) $$invalidate(8, loading = $$props.loading);
    		if ('disabled' in $$props) $$invalidate(9, disabled = $$props.disabled);
    		if ('style' in $$props) $$invalidate(10, style = $$props.style);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		klass,
    		flat,
    		tile,
    		outlined,
    		raised,
    		shaped,
    		hover,
    		link,
    		loading,
    		disabled,
    		style,
    		$$scope,
    		slots
    	];
    }

    class Card extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$g, create_fragment$g, safe_not_equal, {
    			class: 0,
    			flat: 1,
    			tile: 2,
    			outlined: 3,
    			raised: 4,
    			shaped: 5,
    			hover: 6,
    			link: 7,
    			loading: 8,
    			disabled: 9,
    			style: 10
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Card",
    			options,
    			id: create_fragment$g.name
    		});
    	}

    	get class() {
    		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get flat() {
    		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set flat(value) {
    		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tile() {
    		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tile(value) {
    		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get outlined() {
    		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set outlined(value) {
    		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get raised() {
    		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set raised(value) {
    		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get shaped() {
    		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set shaped(value) {
    		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hover() {
    		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hover(value) {
    		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get link() {
    		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set link(value) {
    		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get loading() {
    		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set loading(value) {
    		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-materialify\dist\components\Card\CardActions.svelte generated by Svelte v3.48.0 */

    const file$f = "node_modules\\svelte-materialify\\dist\\components\\Card\\CardActions.svelte";

    function create_fragment$f(ctx) {
    	let div;
    	let div_class_value;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[3].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", div_class_value = "s-card-actions " + /*klass*/ ctx[0]);
    			attr_dev(div, "style", /*style*/ ctx[1]);
    			add_location(div, file$f, 12, 0, 239);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[2],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*klass*/ 1 && div_class_value !== (div_class_value = "s-card-actions " + /*klass*/ ctx[0])) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (!current || dirty & /*style*/ 2) {
    				attr_dev(div, "style", /*style*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$f($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('CardActions', slots, ['default']);
    	let { class: klass = '' } = $$props;
    	let { style = null } = $$props;
    	const writable_props = ['class', 'style'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<CardActions> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(0, klass = $$props.class);
    		if ('style' in $$props) $$invalidate(1, style = $$props.style);
    		if ('$$scope' in $$props) $$invalidate(2, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({ klass, style });

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(0, klass = $$props.klass);
    		if ('style' in $$props) $$invalidate(1, style = $$props.style);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [klass, style, $$scope, slots];
    }

    class CardActions extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$f, create_fragment$f, safe_not_equal, { class: 0, style: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CardActions",
    			options,
    			id: create_fragment$f.name
    		});
    	}

    	get class() {
    		throw new Error("<CardActions>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<CardActions>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<CardActions>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<CardActions>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-materialify\dist\components\Card\CardText.svelte generated by Svelte v3.48.0 */

    const file$e = "node_modules\\svelte-materialify\\dist\\components\\Card\\CardText.svelte";

    function create_fragment$e(ctx) {
    	let div;
    	let div_class_value;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[3].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", div_class_value = "s-card-text " + /*klass*/ ctx[0]);
    			attr_dev(div, "style", /*style*/ ctx[1]);
    			add_location(div, file$e, 16, 0, 349);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[2],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*klass*/ 1 && div_class_value !== (div_class_value = "s-card-text " + /*klass*/ ctx[0])) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (!current || dirty & /*style*/ 2) {
    				attr_dev(div, "style", /*style*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('CardText', slots, ['default']);
    	let { class: klass = '' } = $$props;
    	let { style = null } = $$props;
    	const writable_props = ['class', 'style'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<CardText> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(0, klass = $$props.class);
    		if ('style' in $$props) $$invalidate(1, style = $$props.style);
    		if ('$$scope' in $$props) $$invalidate(2, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({ klass, style });

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(0, klass = $$props.klass);
    		if ('style' in $$props) $$invalidate(1, style = $$props.style);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [klass, style, $$scope, slots];
    }

    class CardText extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$e, create_fragment$e, safe_not_equal, { class: 0, style: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CardText",
    			options,
    			id: create_fragment$e.name
    		});
    	}

    	get class() {
    		throw new Error("<CardText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<CardText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<CardText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<CardText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-materialify\dist\components\Card\CardTitle.svelte generated by Svelte v3.48.0 */

    const file$d = "node_modules\\svelte-materialify\\dist\\components\\Card\\CardTitle.svelte";

    function create_fragment$d(ctx) {
    	let div;
    	let div_class_value;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[3].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", div_class_value = "s-card-title " + /*klass*/ ctx[0]);
    			attr_dev(div, "style", /*style*/ ctx[1]);
    			add_location(div, file$d, 27, 0, 592);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[2],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*klass*/ 1 && div_class_value !== (div_class_value = "s-card-title " + /*klass*/ ctx[0])) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (!current || dirty & /*style*/ 2) {
    				attr_dev(div, "style", /*style*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$d($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('CardTitle', slots, ['default']);
    	let { class: klass = '' } = $$props;
    	let { style = null } = $$props;
    	const writable_props = ['class', 'style'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<CardTitle> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(0, klass = $$props.class);
    		if ('style' in $$props) $$invalidate(1, style = $$props.style);
    		if ('$$scope' in $$props) $$invalidate(2, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({ klass, style });

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(0, klass = $$props.klass);
    		if ('style' in $$props) $$invalidate(1, style = $$props.style);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [klass, style, $$scope, slots];
    }

    class CardTitle extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$d, create_fragment$d, safe_not_equal, { class: 0, style: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CardTitle",
    			options,
    			id: create_fragment$d.name
    		});
    	}

    	get class() {
    		throw new Error("<CardTitle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<CardTitle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<CardTitle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<CardTitle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var prevIcon = 'M15.41,16.58L10.83,12L15.41,7.41L14,6L8,12L14,18L15.41,16.58Z';

    var nextIcon = 'M8.59,16.58L13.17,12L8.59,7.41L10,6L16,12L10,18L8.59,16.58Z';

    /* node_modules\svelte-materialify\dist\components\SlideGroup\SlideGroup.svelte generated by Svelte v3.48.0 */
    const file$c = "node_modules\\svelte-materialify\\dist\\components\\SlideGroup\\SlideGroup.svelte";
    const get_next_slot_changes = dirty => ({});
    const get_next_slot_context = ctx => ({});
    const get_previous_slot_changes = dirty => ({});
    const get_previous_slot_context = ctx => ({});

    // (111:2) {#if arrowsVisible}
    function create_if_block_1$4(ctx) {
    	let div;
    	let current;
    	let mounted;
    	let dispose;
    	const previous_slot_template = /*#slots*/ ctx[17].previous;
    	const previous_slot = create_slot(previous_slot_template, ctx, /*$$scope*/ ctx[22], get_previous_slot_context);
    	const previous_slot_or_fallback = previous_slot || fallback_block_1(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (previous_slot_or_fallback) previous_slot_or_fallback.c();
    			attr_dev(div, "class", "s-slide-group__prev");
    			toggle_class(div, "disabled", /*x*/ ctx[9] === 0);
    			toggle_class(div, "hide-disabled-arrows", /*hideDisabledArrows*/ ctx[2]);
    			add_location(div, file$c, 111, 4, 2532);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (previous_slot_or_fallback) {
    				previous_slot_or_fallback.m(div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*prev*/ ctx[12], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (previous_slot) {
    				if (previous_slot.p && (!current || dirty & /*$$scope*/ 4194304)) {
    					update_slot_base(
    						previous_slot,
    						previous_slot_template,
    						ctx,
    						/*$$scope*/ ctx[22],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[22])
    						: get_slot_changes(previous_slot_template, /*$$scope*/ ctx[22], dirty, get_previous_slot_changes),
    						get_previous_slot_context
    					);
    				}
    			}

    			if (dirty & /*x*/ 512) {
    				toggle_class(div, "disabled", /*x*/ ctx[9] === 0);
    			}

    			if (dirty & /*hideDisabledArrows*/ 4) {
    				toggle_class(div, "hide-disabled-arrows", /*hideDisabledArrows*/ ctx[2]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(previous_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(previous_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (previous_slot_or_fallback) previous_slot_or_fallback.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$4.name,
    		type: "if",
    		source: "(111:2) {#if arrowsVisible}",
    		ctx
    	});

    	return block;
    }

    // (117:28)          
    function fallback_block_1(ctx) {
    	let icon;
    	let current;

    	icon = new Icon({
    			props: { path: prevIcon },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block_1.name,
    		type: "fallback",
    		source: "(117:28)          ",
    		ctx
    	});

    	return block;
    }

    // (134:2) {#if arrowsVisible}
    function create_if_block$5(ctx) {
    	let div;
    	let current;
    	let mounted;
    	let dispose;
    	const next_slot_template = /*#slots*/ ctx[17].next;
    	const next_slot = create_slot(next_slot_template, ctx, /*$$scope*/ ctx[22], get_next_slot_context);
    	const next_slot_or_fallback = next_slot || fallback_block(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (next_slot_or_fallback) next_slot_or_fallback.c();
    			attr_dev(div, "class", "s-slide-group__next");
    			toggle_class(div, "disabled", /*x*/ ctx[9] === /*contentWidth*/ ctx[7] - /*wrapperWidth*/ ctx[8]);
    			toggle_class(div, "show-arrows", /*hideDisabledArrows*/ ctx[2]);
    			add_location(div, file$c, 134, 4, 3117);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (next_slot_or_fallback) {
    				next_slot_or_fallback.m(div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*next*/ ctx[11], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (next_slot) {
    				if (next_slot.p && (!current || dirty & /*$$scope*/ 4194304)) {
    					update_slot_base(
    						next_slot,
    						next_slot_template,
    						ctx,
    						/*$$scope*/ ctx[22],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[22])
    						: get_slot_changes(next_slot_template, /*$$scope*/ ctx[22], dirty, get_next_slot_changes),
    						get_next_slot_context
    					);
    				}
    			}

    			if (dirty & /*x, contentWidth, wrapperWidth*/ 896) {
    				toggle_class(div, "disabled", /*x*/ ctx[9] === /*contentWidth*/ ctx[7] - /*wrapperWidth*/ ctx[8]);
    			}

    			if (dirty & /*hideDisabledArrows*/ 4) {
    				toggle_class(div, "show-arrows", /*hideDisabledArrows*/ ctx[2]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(next_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(next_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (next_slot_or_fallback) next_slot_or_fallback.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(134:2) {#if arrowsVisible}",
    		ctx
    	});

    	return block;
    }

    // (140:24)          
    function fallback_block(ctx) {
    	let icon;
    	let current;

    	icon = new Icon({
    			props: { path: nextIcon },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block.name,
    		type: "fallback",
    		source: "(140:24)          ",
    		ctx
    	});

    	return block;
    }

    // (103:0) <ItemGroup   class="s-slide-group {klass}"   on:change   bind:value   {activeClass}   {multiple}   {mandatory}   {max}>
    function create_default_slot$7(ctx) {
    	let t0;
    	let div1;
    	let div0;
    	let div0_resize_listener;
    	let div1_resize_listener;
    	let t1;
    	let if_block1_anchor;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*arrowsVisible*/ ctx[10] && create_if_block_1$4(ctx);
    	const default_slot_template = /*#slots*/ ctx[17].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[22], null);
    	let if_block1 = /*arrowsVisible*/ ctx[10] && create_if_block$5(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			div1 = element("div");
    			div0 = element("div");
    			if (default_slot) default_slot.c();
    			t1 = space();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty();
    			attr_dev(div0, "class", "s-slide-group__content");
    			set_style(div0, "transform", "translate(-" + /*x*/ ctx[9] + "px)");
    			add_render_callback(() => /*div0_elementresize_handler*/ ctx[18].call(div0));
    			add_location(div0, file$c, 126, 4, 2933);
    			attr_dev(div1, "class", "s-slide-group__wrapper");
    			add_render_callback(() => /*div1_elementresize_handler*/ ctx[19].call(div1));
    			add_location(div1, file$c, 121, 2, 2776);
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);

    			if (default_slot) {
    				default_slot.m(div0, null);
    			}

    			div0_resize_listener = add_resize_listener(div0, /*div0_elementresize_handler*/ ctx[18].bind(div0));
    			div1_resize_listener = add_resize_listener(div1, /*div1_elementresize_handler*/ ctx[19].bind(div1));
    			insert_dev(target, t1, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div1, "touchstart", /*touchstart*/ ctx[13], { passive: true }, false, false),
    					listen_dev(div1, "touchmove", /*touchmove*/ ctx[14], { passive: true }, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (/*arrowsVisible*/ ctx[10]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*arrowsVisible*/ 1024) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_1$4(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 4194304)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[22],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[22])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[22], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*x*/ 512) {
    				set_style(div0, "transform", "translate(-" + /*x*/ ctx[9] + "px)");
    			}

    			if (/*arrowsVisible*/ ctx[10]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*arrowsVisible*/ 1024) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block$5(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(default_slot, local);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(default_slot, local);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div1);
    			if (default_slot) default_slot.d(detaching);
    			div0_resize_listener();
    			div1_resize_listener();
    			if (detaching) detach_dev(t1);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(if_block1_anchor);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$7.name,
    		type: "slot",
    		source: "(103:0) <ItemGroup   class=\\\"s-slide-group {klass}\\\"   on:change   bind:value   {activeClass}   {multiple}   {mandatory}   {max}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$c(ctx) {
    	let itemgroup;
    	let updating_value;
    	let current;

    	function itemgroup_value_binding(value) {
    		/*itemgroup_value_binding*/ ctx[20](value);
    	}

    	let itemgroup_props = {
    		class: "s-slide-group " + /*klass*/ ctx[1],
    		activeClass: /*activeClass*/ ctx[3],
    		multiple: /*multiple*/ ctx[4],
    		mandatory: /*mandatory*/ ctx[5],
    		max: /*max*/ ctx[6],
    		$$slots: { default: [create_default_slot$7] },
    		$$scope: { ctx }
    	};

    	if (/*value*/ ctx[0] !== void 0) {
    		itemgroup_props.value = /*value*/ ctx[0];
    	}

    	itemgroup = new ItemGroup({ props: itemgroup_props, $$inline: true });
    	binding_callbacks.push(() => bind(itemgroup, 'value', itemgroup_value_binding));
    	itemgroup.$on("change", /*change_handler*/ ctx[21]);

    	const block = {
    		c: function create() {
    			create_component(itemgroup.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(itemgroup, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const itemgroup_changes = {};
    			if (dirty & /*klass*/ 2) itemgroup_changes.class = "s-slide-group " + /*klass*/ ctx[1];
    			if (dirty & /*activeClass*/ 8) itemgroup_changes.activeClass = /*activeClass*/ ctx[3];
    			if (dirty & /*multiple*/ 16) itemgroup_changes.multiple = /*multiple*/ ctx[4];
    			if (dirty & /*mandatory*/ 32) itemgroup_changes.mandatory = /*mandatory*/ ctx[5];
    			if (dirty & /*max*/ 64) itemgroup_changes.max = /*max*/ ctx[6];

    			if (dirty & /*$$scope, x, contentWidth, wrapperWidth, hideDisabledArrows, arrowsVisible*/ 4196228) {
    				itemgroup_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty & /*value*/ 1) {
    				updating_value = true;
    				itemgroup_changes.value = /*value*/ ctx[0];
    				add_flush_callback(() => updating_value = false);
    			}

    			itemgroup.$set(itemgroup_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(itemgroup.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(itemgroup.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(itemgroup, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const SLIDE_GROUP = {};

    function instance$c($$self, $$props, $$invalidate) {
    	let arrowsVisible;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SlideGroup', slots, ['previous','default','next']);
    	let contentWidth;
    	let wrapperWidth;
    	let { class: klass = '' } = $$props;
    	let { showArrows = true } = $$props;
    	let { hideDisabledArrows = false } = $$props;
    	let { centerActive = false } = $$props;
    	let { activeClass = '' } = $$props;
    	let { value = [] } = $$props;
    	let { multiple = false } = $$props;
    	let { mandatory = false } = $$props;
    	let { max = Infinity } = $$props;
    	let x = 0;

    	setContext(SLIDE_GROUP, item => {
    		const left = item.offsetLeft;
    		const width = item.offsetWidth;

    		if (centerActive) $$invalidate(9, x = left + (width - wrapperWidth) / 2); else if (left + 1.25 * width > wrapperWidth + x) {
    			$$invalidate(9, x = left + 1.25 * width - wrapperWidth);
    		} else if (left < x + width / 4) {
    			$$invalidate(9, x = left - width / 4);
    		}
    	});

    	afterUpdate(() => {
    		if (x + wrapperWidth > contentWidth) $$invalidate(9, x = contentWidth - wrapperWidth); else if (x < 0) $$invalidate(9, x = 0);
    	});

    	function next() {
    		$$invalidate(9, x += wrapperWidth);
    	}

    	function prev() {
    		$$invalidate(9, x -= wrapperWidth);
    	}

    	let touchStartX;

    	function touchstart({ touches }) {
    		touchStartX = x + touches[0].clientX;
    	}

    	function touchmove({ touches }) {
    		$$invalidate(9, x = touchStartX - touches[0].clientX);
    	}

    	const writable_props = [
    		'class',
    		'showArrows',
    		'hideDisabledArrows',
    		'centerActive',
    		'activeClass',
    		'value',
    		'multiple',
    		'mandatory',
    		'max'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SlideGroup> was created with unknown prop '${key}'`);
    	});

    	function div0_elementresize_handler() {
    		contentWidth = this.clientWidth;
    		$$invalidate(7, contentWidth);
    	}

    	function div1_elementresize_handler() {
    		wrapperWidth = this.clientWidth;
    		$$invalidate(8, wrapperWidth);
    	}

    	function itemgroup_value_binding(value$1) {
    		value = value$1;
    		$$invalidate(0, value);
    	}

    	function change_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(1, klass = $$props.class);
    		if ('showArrows' in $$props) $$invalidate(15, showArrows = $$props.showArrows);
    		if ('hideDisabledArrows' in $$props) $$invalidate(2, hideDisabledArrows = $$props.hideDisabledArrows);
    		if ('centerActive' in $$props) $$invalidate(16, centerActive = $$props.centerActive);
    		if ('activeClass' in $$props) $$invalidate(3, activeClass = $$props.activeClass);
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('multiple' in $$props) $$invalidate(4, multiple = $$props.multiple);
    		if ('mandatory' in $$props) $$invalidate(5, mandatory = $$props.mandatory);
    		if ('max' in $$props) $$invalidate(6, max = $$props.max);
    		if ('$$scope' in $$props) $$invalidate(22, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		SLIDE_GROUP,
    		setContext,
    		afterUpdate,
    		ItemGroup,
    		prevIcon,
    		nextIcon,
    		Icon,
    		contentWidth,
    		wrapperWidth,
    		klass,
    		showArrows,
    		hideDisabledArrows,
    		centerActive,
    		activeClass,
    		value,
    		multiple,
    		mandatory,
    		max,
    		x,
    		next,
    		prev,
    		touchStartX,
    		touchstart,
    		touchmove,
    		arrowsVisible
    	});

    	$$self.$inject_state = $$props => {
    		if ('contentWidth' in $$props) $$invalidate(7, contentWidth = $$props.contentWidth);
    		if ('wrapperWidth' in $$props) $$invalidate(8, wrapperWidth = $$props.wrapperWidth);
    		if ('klass' in $$props) $$invalidate(1, klass = $$props.klass);
    		if ('showArrows' in $$props) $$invalidate(15, showArrows = $$props.showArrows);
    		if ('hideDisabledArrows' in $$props) $$invalidate(2, hideDisabledArrows = $$props.hideDisabledArrows);
    		if ('centerActive' in $$props) $$invalidate(16, centerActive = $$props.centerActive);
    		if ('activeClass' in $$props) $$invalidate(3, activeClass = $$props.activeClass);
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('multiple' in $$props) $$invalidate(4, multiple = $$props.multiple);
    		if ('mandatory' in $$props) $$invalidate(5, mandatory = $$props.mandatory);
    		if ('max' in $$props) $$invalidate(6, max = $$props.max);
    		if ('x' in $$props) $$invalidate(9, x = $$props.x);
    		if ('touchStartX' in $$props) touchStartX = $$props.touchStartX;
    		if ('arrowsVisible' in $$props) $$invalidate(10, arrowsVisible = $$props.arrowsVisible);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*wrapperWidth, contentWidth, showArrows*/ 33152) {
    			$$invalidate(10, arrowsVisible = wrapperWidth < contentWidth && showArrows);
    		}
    	};

    	return [
    		value,
    		klass,
    		hideDisabledArrows,
    		activeClass,
    		multiple,
    		mandatory,
    		max,
    		contentWidth,
    		wrapperWidth,
    		x,
    		arrowsVisible,
    		next,
    		prev,
    		touchstart,
    		touchmove,
    		showArrows,
    		centerActive,
    		slots,
    		div0_elementresize_handler,
    		div1_elementresize_handler,
    		itemgroup_value_binding,
    		change_handler,
    		$$scope
    	];
    }

    class SlideGroup extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$c, create_fragment$c, safe_not_equal, {
    			class: 1,
    			showArrows: 15,
    			hideDisabledArrows: 2,
    			centerActive: 16,
    			activeClass: 3,
    			value: 0,
    			multiple: 4,
    			mandatory: 5,
    			max: 6
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SlideGroup",
    			options,
    			id: create_fragment$c.name
    		});
    	}

    	get class() {
    		throw new Error("<SlideGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<SlideGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get showArrows() {
    		throw new Error("<SlideGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showArrows(value) {
    		throw new Error("<SlideGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hideDisabledArrows() {
    		throw new Error("<SlideGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hideDisabledArrows(value) {
    		throw new Error("<SlideGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get centerActive() {
    		throw new Error("<SlideGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set centerActive(value) {
    		throw new Error("<SlideGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get activeClass() {
    		throw new Error("<SlideGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set activeClass(value) {
    		throw new Error("<SlideGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<SlideGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<SlideGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get multiple() {
    		throw new Error("<SlideGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set multiple(value) {
    		throw new Error("<SlideGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get mandatory() {
    		throw new Error("<SlideGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set mandatory(value) {
    		throw new Error("<SlideGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get max() {
    		throw new Error("<SlideGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set max(value) {
    		throw new Error("<SlideGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-materialify\dist\components\Window\Window.svelte generated by Svelte v3.48.0 */
    const file$b = "node_modules\\svelte-materialify\\dist\\components\\Window\\Window.svelte";

    function create_fragment$b(ctx) {
    	let div;
    	let div_class_value;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[11].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", div_class_value = "s-window " + /*klass*/ ctx[0]);
    			toggle_class(div, "horizontal", !/*vertical*/ ctx[1]);
    			toggle_class(div, "vertical", /*vertical*/ ctx[1]);
    			toggle_class(div, "reverse", /*reverse*/ ctx[2]);
    			add_location(div, file$b, 126, 0, 3562);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			/*div_binding*/ ctx[12](div);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[10],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*klass*/ 1 && div_class_value !== (div_class_value = "s-window " + /*klass*/ ctx[0])) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (dirty & /*klass, vertical*/ 3) {
    				toggle_class(div, "horizontal", !/*vertical*/ ctx[1]);
    			}

    			if (dirty & /*klass, vertical*/ 3) {
    				toggle_class(div, "vertical", /*vertical*/ ctx[1]);
    			}

    			if (dirty & /*klass, reverse*/ 5) {
    				toggle_class(div, "reverse", /*reverse*/ ctx[2]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			/*div_binding*/ ctx[12](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const WINDOW = {};

    function instance$b($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Window', slots, ['default']);
    	let { class: klass = '' } = $$props;
    	let { activeClass = 'active' } = $$props;
    	let { value = 0 } = $$props;
    	let { vertical = false } = $$props;
    	let { reverse = false } = $$props;
    	let { continuous = true } = $$props;
    	let container;
    	const windowItems = [];
    	let moving = false;

    	setContext(WINDOW, window => {
    		windowItems.push(window);
    	});

    	function set(index) {
    		const prevIndex = windowItems.findIndex(i => i.classList.contains(activeClass));

    		if (!moving && windowItems[index] && index !== prevIndex) {
    			moving = true;
    			let direction;
    			let position;

    			if (index > prevIndex) {
    				direction = 'left';
    				position = 'next';
    			} else {
    				direction = 'right';
    				position = 'prev';
    			}

    			const prev = windowItems[prevIndex];
    			prev.classList.add(direction);
    			$$invalidate(3, container.style.height = `${prev.offsetHeight}px`, container);
    			const active = windowItems[index];
    			active.classList.add(position);
    			$$invalidate(3, container.style.height = `${active.offsetHeight}px`, container);
    			active.classList.add(direction);

    			setTimeout(
    				() => {
    					prev.classList.remove('active', direction);
    					active.classList.add('active');
    					active.classList.remove(position, direction);
    					$$invalidate(3, container.style.height = null, container);
    					moving = false;
    					$$invalidate(4, value = index);
    				},
    				300
    			);
    		}
    	}

    	function next() {
    		if (value === windowItems.length - 1) {
    			if (continuous) set(0);
    		} else {
    			set(value + 1);
    		}
    	}

    	function previous() {
    		if (value === 0) {
    			if (continuous) set(windowItems.length - 1);
    		} else {
    			set(value - 1);
    		}
    	}

    	onMount(() => {
    		const activeItem = windowItems[value];
    		if (activeItem) activeItem.classList.add(activeClass);
    	});

    	const writable_props = ['class', 'activeClass', 'value', 'vertical', 'reverse', 'continuous'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Window> was created with unknown prop '${key}'`);
    	});

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			container = $$value;
    			$$invalidate(3, container);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(0, klass = $$props.class);
    		if ('activeClass' in $$props) $$invalidate(5, activeClass = $$props.activeClass);
    		if ('value' in $$props) $$invalidate(4, value = $$props.value);
    		if ('vertical' in $$props) $$invalidate(1, vertical = $$props.vertical);
    		if ('reverse' in $$props) $$invalidate(2, reverse = $$props.reverse);
    		if ('continuous' in $$props) $$invalidate(6, continuous = $$props.continuous);
    		if ('$$scope' in $$props) $$invalidate(10, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		WINDOW,
    		onMount,
    		setContext,
    		klass,
    		activeClass,
    		value,
    		vertical,
    		reverse,
    		continuous,
    		container,
    		windowItems,
    		moving,
    		set,
    		next,
    		previous
    	});

    	$$self.$inject_state = $$props => {
    		if ('klass' in $$props) $$invalidate(0, klass = $$props.klass);
    		if ('activeClass' in $$props) $$invalidate(5, activeClass = $$props.activeClass);
    		if ('value' in $$props) $$invalidate(4, value = $$props.value);
    		if ('vertical' in $$props) $$invalidate(1, vertical = $$props.vertical);
    		if ('reverse' in $$props) $$invalidate(2, reverse = $$props.reverse);
    		if ('continuous' in $$props) $$invalidate(6, continuous = $$props.continuous);
    		if ('container' in $$props) $$invalidate(3, container = $$props.container);
    		if ('moving' in $$props) moving = $$props.moving;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*value*/ 16) {
    			set(value);
    		}
    	};

    	return [
    		klass,
    		vertical,
    		reverse,
    		container,
    		value,
    		activeClass,
    		continuous,
    		set,
    		next,
    		previous,
    		$$scope,
    		slots,
    		div_binding
    	];
    }

    class Window extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$b, create_fragment$b, safe_not_equal, {
    			class: 0,
    			activeClass: 5,
    			value: 4,
    			vertical: 1,
    			reverse: 2,
    			continuous: 6,
    			set: 7,
    			next: 8,
    			previous: 9
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Window",
    			options,
    			id: create_fragment$b.name
    		});
    	}

    	get class() {
    		throw new Error("<Window>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Window>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get activeClass() {
    		throw new Error("<Window>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set activeClass(value) {
    		throw new Error("<Window>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<Window>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<Window>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get vertical() {
    		throw new Error("<Window>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set vertical(value) {
    		throw new Error("<Window>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get reverse() {
    		throw new Error("<Window>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set reverse(value) {
    		throw new Error("<Window>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get continuous() {
    		throw new Error("<Window>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set continuous(value) {
    		throw new Error("<Window>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get set() {
    		return this.$$.ctx[7];
    	}

    	set set(value) {
    		throw new Error("<Window>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get next() {
    		return this.$$.ctx[8];
    	}

    	set next(value) {
    		throw new Error("<Window>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get previous() {
    		return this.$$.ctx[9];
    	}

    	set previous(value) {
    		throw new Error("<Window>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-materialify\dist\components\Window\WindowItem.svelte generated by Svelte v3.48.0 */
    const file$a = "node_modules\\svelte-materialify\\dist\\components\\Window\\WindowItem.svelte";

    function create_fragment$a(ctx) {
    	let div;
    	let div_class_value;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[4].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", div_class_value = "s-window-item " + /*klass*/ ctx[0]);
    			attr_dev(div, "style", /*style*/ ctx[1]);
    			add_location(div, file$a, 31, 0, 699);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			/*div_binding*/ ctx[5](div);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[3],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*klass*/ 1 && div_class_value !== (div_class_value = "s-window-item " + /*klass*/ ctx[0])) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (!current || dirty & /*style*/ 2) {
    				attr_dev(div, "style", /*style*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			/*div_binding*/ ctx[5](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('WindowItem', slots, ['default']);
    	let window;
    	const registerWindow = getContext(WINDOW);
    	let { class: klass = '' } = $$props;
    	let { style = null } = $$props;

    	onMount(() => {
    		registerWindow(window);
    	});

    	const writable_props = ['class', 'style'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<WindowItem> was created with unknown prop '${key}'`);
    	});

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			window = $$value;
    			$$invalidate(2, window);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(0, klass = $$props.class);
    		if ('style' in $$props) $$invalidate(1, style = $$props.style);
    		if ('$$scope' in $$props) $$invalidate(3, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		onMount,
    		WINDOW,
    		window,
    		registerWindow,
    		klass,
    		style
    	});

    	$$self.$inject_state = $$props => {
    		if ('window' in $$props) $$invalidate(2, window = $$props.window);
    		if ('klass' in $$props) $$invalidate(0, klass = $$props.klass);
    		if ('style' in $$props) $$invalidate(1, style = $$props.style);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [klass, style, window, $$scope, slots, div_binding];
    }

    class WindowItem extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$a, create_fragment$a, safe_not_equal, { class: 0, style: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "WindowItem",
    			options,
    			id: create_fragment$a.name
    		});
    	}

    	get class() {
    		throw new Error("<WindowItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<WindowItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<WindowItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<WindowItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-materialify\dist\components\Tabs\Tabs.svelte generated by Svelte v3.48.0 */
    const file$9 = "node_modules\\svelte-materialify\\dist\\components\\Tabs\\Tabs.svelte";
    const get_tabs_slot_changes = dirty => ({});
    const get_tabs_slot_context = ctx => ({});

    // (169:6) {#if slider}
    function create_if_block$4(ctx) {
    	let div;
    	let div_class_value;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", div_class_value = "s-tab-slider " + /*sliderClass*/ ctx[10]);
    			add_location(div, file$9, 169, 8, 3566);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			/*div_binding*/ ctx[17](div);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*sliderClass*/ 1024 && div_class_value !== (div_class_value = "s-tab-slider " + /*sliderClass*/ ctx[10])) {
    				attr_dev(div, "class", div_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			/*div_binding*/ ctx[17](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(169:6) {#if slider}",
    		ctx
    	});

    	return block;
    }

    // (161:4) <SlideGroup       bind:value       mandatory       {centerActive}       {showArrows}       on:change={moveSlider}       on:change>
    function create_default_slot_1$6(ctx) {
    	let t;
    	let if_block_anchor;
    	let current;
    	const tabs_slot_template = /*#slots*/ ctx[16].tabs;
    	const tabs_slot = create_slot(tabs_slot_template, ctx, /*$$scope*/ ctx[21], get_tabs_slot_context);
    	let if_block = /*slider*/ ctx[9] && create_if_block$4(ctx);

    	const block = {
    		c: function create() {
    			if (tabs_slot) tabs_slot.c();
    			t = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (tabs_slot) {
    				tabs_slot.m(target, anchor);
    			}

    			insert_dev(target, t, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (tabs_slot) {
    				if (tabs_slot.p && (!current || dirty & /*$$scope*/ 2097152)) {
    					update_slot_base(
    						tabs_slot,
    						tabs_slot_template,
    						ctx,
    						/*$$scope*/ ctx[21],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[21])
    						: get_slot_changes(tabs_slot_template, /*$$scope*/ ctx[21], dirty, get_tabs_slot_changes),
    						get_tabs_slot_context
    					);
    				}
    			}

    			if (/*slider*/ ctx[9]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$4(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tabs_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tabs_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (tabs_slot) tabs_slot.d(detaching);
    			if (detaching) detach_dev(t);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$6.name,
    		type: "slot",
    		source: "(161:4) <SlideGroup       bind:value       mandatory       {centerActive}       {showArrows}       on:change={moveSlider}       on:change>",
    		ctx
    	});

    	return block;
    }

    // (174:2) <Window bind:this={windowComponent}>
    function create_default_slot$6(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[16].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[21], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 2097152)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[21],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[21])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[21], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$6.name,
    		type: "slot",
    		source: "(174:2) <Window bind:this={windowComponent}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$9(ctx) {
    	let div1;
    	let div0;
    	let slidegroup;
    	let updating_value;
    	let div0_class_value;
    	let t;
    	let window;
    	let current;

    	function slidegroup_value_binding(value) {
    		/*slidegroup_value_binding*/ ctx[18](value);
    	}

    	let slidegroup_props = {
    		mandatory: true,
    		centerActive: /*centerActive*/ ctx[2],
    		showArrows: /*showArrows*/ ctx[3],
    		$$slots: { default: [create_default_slot_1$6] },
    		$$scope: { ctx }
    	};

    	if (/*value*/ ctx[0] !== void 0) {
    		slidegroup_props.value = /*value*/ ctx[0];
    	}

    	slidegroup = new SlideGroup({ props: slidegroup_props, $$inline: true });
    	binding_callbacks.push(() => bind(slidegroup, 'value', slidegroup_value_binding));
    	slidegroup.$on("change", /*moveSlider*/ ctx[14]);
    	slidegroup.$on("change", /*change_handler*/ ctx[19]);

    	let window_props = {
    		$$slots: { default: [create_default_slot$6] },
    		$$scope: { ctx }
    	};

    	window = new Window({ props: window_props, $$inline: true });
    	/*window_binding*/ ctx[20](window);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			create_component(slidegroup.$$.fragment);
    			t = space();
    			create_component(window.$$.fragment);
    			attr_dev(div0, "class", div0_class_value = "s-tabs-bar " + /*klass*/ ctx[1]);
    			attr_dev(div0, "role", "tablist");
    			toggle_class(div0, "fixed-tabs", /*fixedTabs*/ ctx[4]);
    			toggle_class(div0, "grow", /*grow*/ ctx[5]);
    			toggle_class(div0, "centered", /*centered*/ ctx[6]);
    			toggle_class(div0, "right", /*right*/ ctx[7]);
    			toggle_class(div0, "icons", /*icons*/ ctx[8]);
    			add_location(div0, file$9, 152, 2, 3222);
    			attr_dev(div1, "class", "s-tabs");
    			attr_dev(div1, "role", "tablist");
    			toggle_class(div1, "vertical", /*vertical*/ ctx[11]);
    			add_location(div1, file$9, 151, 0, 3169);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			mount_component(slidegroup, div0, null);
    			append_dev(div1, t);
    			mount_component(window, div1, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const slidegroup_changes = {};
    			if (dirty & /*centerActive*/ 4) slidegroup_changes.centerActive = /*centerActive*/ ctx[2];
    			if (dirty & /*showArrows*/ 8) slidegroup_changes.showArrows = /*showArrows*/ ctx[3];

    			if (dirty & /*$$scope, sliderClass, sliderElement, slider*/ 2102784) {
    				slidegroup_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty & /*value*/ 1) {
    				updating_value = true;
    				slidegroup_changes.value = /*value*/ ctx[0];
    				add_flush_callback(() => updating_value = false);
    			}

    			slidegroup.$set(slidegroup_changes);

    			if (!current || dirty & /*klass*/ 2 && div0_class_value !== (div0_class_value = "s-tabs-bar " + /*klass*/ ctx[1])) {
    				attr_dev(div0, "class", div0_class_value);
    			}

    			if (dirty & /*klass, fixedTabs*/ 18) {
    				toggle_class(div0, "fixed-tabs", /*fixedTabs*/ ctx[4]);
    			}

    			if (dirty & /*klass, grow*/ 34) {
    				toggle_class(div0, "grow", /*grow*/ ctx[5]);
    			}

    			if (dirty & /*klass, centered*/ 66) {
    				toggle_class(div0, "centered", /*centered*/ ctx[6]);
    			}

    			if (dirty & /*klass, right*/ 130) {
    				toggle_class(div0, "right", /*right*/ ctx[7]);
    			}

    			if (dirty & /*klass, icons*/ 258) {
    				toggle_class(div0, "icons", /*icons*/ ctx[8]);
    			}

    			const window_changes = {};

    			if (dirty & /*$$scope*/ 2097152) {
    				window_changes.$$scope = { dirty, ctx };
    			}

    			window.$set(window_changes);

    			if (dirty & /*vertical*/ 2048) {
    				toggle_class(div1, "vertical", /*vertical*/ ctx[11]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(slidegroup.$$.fragment, local);
    			transition_in(window.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(slidegroup.$$.fragment, local);
    			transition_out(window.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(slidegroup);
    			/*window_binding*/ ctx[20](null);
    			destroy_component(window);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const TABS = {};

    function instance$9($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Tabs', slots, ['tabs','default']);
    	let sliderElement;
    	let windowComponent;
    	const tabs = [];
    	let { class: klass = '' } = $$props;
    	let { value = 0 } = $$props;
    	let { centerActive = false } = $$props;
    	let { showArrows = true } = $$props;
    	let { fixedTabs = false } = $$props;
    	let { grow = false } = $$props;
    	let { centered = false } = $$props;
    	let { right = false } = $$props;
    	let { icons = false } = $$props;
    	let { slider = true } = $$props;
    	let { sliderClass = '' } = $$props;
    	let { ripple = {} } = $$props;
    	let { vertical = false } = $$props;

    	setContext(TABS, {
    		ripple,
    		registerTab: tab => {
    			tabs.push(tab);
    		}
    	});

    	function moveSlider({ detail }) {
    		if (slider) {
    			const activeTab = tabs[detail];

    			if (vertical) {
    				$$invalidate(12, sliderElement.style.top = `${activeTab.offsetTop}px`, sliderElement);
    				$$invalidate(12, sliderElement.style.height = `${activeTab.offsetHeight}px`, sliderElement);
    			} else {
    				$$invalidate(12, sliderElement.style.left = `${activeTab.offsetLeft}px`, sliderElement);
    				$$invalidate(12, sliderElement.style.width = `${activeTab.offsetWidth}px`, sliderElement);
    			}
    		}

    		windowComponent.set(value);
    	}

    	onMount(() => {
    		moveSlider({ detail: value });
    	});

    	const writable_props = [
    		'class',
    		'value',
    		'centerActive',
    		'showArrows',
    		'fixedTabs',
    		'grow',
    		'centered',
    		'right',
    		'icons',
    		'slider',
    		'sliderClass',
    		'ripple',
    		'vertical'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Tabs> was created with unknown prop '${key}'`);
    	});

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			sliderElement = $$value;
    			$$invalidate(12, sliderElement);
    		});
    	}

    	function slidegroup_value_binding(value$1) {
    		value = value$1;
    		$$invalidate(0, value);
    	}

    	function change_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function window_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			windowComponent = $$value;
    			$$invalidate(13, windowComponent);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(1, klass = $$props.class);
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('centerActive' in $$props) $$invalidate(2, centerActive = $$props.centerActive);
    		if ('showArrows' in $$props) $$invalidate(3, showArrows = $$props.showArrows);
    		if ('fixedTabs' in $$props) $$invalidate(4, fixedTabs = $$props.fixedTabs);
    		if ('grow' in $$props) $$invalidate(5, grow = $$props.grow);
    		if ('centered' in $$props) $$invalidate(6, centered = $$props.centered);
    		if ('right' in $$props) $$invalidate(7, right = $$props.right);
    		if ('icons' in $$props) $$invalidate(8, icons = $$props.icons);
    		if ('slider' in $$props) $$invalidate(9, slider = $$props.slider);
    		if ('sliderClass' in $$props) $$invalidate(10, sliderClass = $$props.sliderClass);
    		if ('ripple' in $$props) $$invalidate(15, ripple = $$props.ripple);
    		if ('vertical' in $$props) $$invalidate(11, vertical = $$props.vertical);
    		if ('$$scope' in $$props) $$invalidate(21, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		TABS,
    		SlideGroup,
    		Window,
    		onMount,
    		setContext,
    		sliderElement,
    		windowComponent,
    		tabs,
    		klass,
    		value,
    		centerActive,
    		showArrows,
    		fixedTabs,
    		grow,
    		centered,
    		right,
    		icons,
    		slider,
    		sliderClass,
    		ripple,
    		vertical,
    		moveSlider
    	});

    	$$self.$inject_state = $$props => {
    		if ('sliderElement' in $$props) $$invalidate(12, sliderElement = $$props.sliderElement);
    		if ('windowComponent' in $$props) $$invalidate(13, windowComponent = $$props.windowComponent);
    		if ('klass' in $$props) $$invalidate(1, klass = $$props.klass);
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('centerActive' in $$props) $$invalidate(2, centerActive = $$props.centerActive);
    		if ('showArrows' in $$props) $$invalidate(3, showArrows = $$props.showArrows);
    		if ('fixedTabs' in $$props) $$invalidate(4, fixedTabs = $$props.fixedTabs);
    		if ('grow' in $$props) $$invalidate(5, grow = $$props.grow);
    		if ('centered' in $$props) $$invalidate(6, centered = $$props.centered);
    		if ('right' in $$props) $$invalidate(7, right = $$props.right);
    		if ('icons' in $$props) $$invalidate(8, icons = $$props.icons);
    		if ('slider' in $$props) $$invalidate(9, slider = $$props.slider);
    		if ('sliderClass' in $$props) $$invalidate(10, sliderClass = $$props.sliderClass);
    		if ('ripple' in $$props) $$invalidate(15, ripple = $$props.ripple);
    		if ('vertical' in $$props) $$invalidate(11, vertical = $$props.vertical);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		value,
    		klass,
    		centerActive,
    		showArrows,
    		fixedTabs,
    		grow,
    		centered,
    		right,
    		icons,
    		slider,
    		sliderClass,
    		vertical,
    		sliderElement,
    		windowComponent,
    		moveSlider,
    		ripple,
    		slots,
    		div_binding,
    		slidegroup_value_binding,
    		change_handler,
    		window_binding,
    		$$scope
    	];
    }

    class Tabs extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$9, create_fragment$9, safe_not_equal, {
    			class: 1,
    			value: 0,
    			centerActive: 2,
    			showArrows: 3,
    			fixedTabs: 4,
    			grow: 5,
    			centered: 6,
    			right: 7,
    			icons: 8,
    			slider: 9,
    			sliderClass: 10,
    			ripple: 15,
    			vertical: 11
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Tabs",
    			options,
    			id: create_fragment$9.name
    		});
    	}

    	get class() {
    		throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get centerActive() {
    		throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set centerActive(value) {
    		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get showArrows() {
    		throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showArrows(value) {
    		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fixedTabs() {
    		throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fixedTabs(value) {
    		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get grow() {
    		throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set grow(value) {
    		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get centered() {
    		throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set centered(value) {
    		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get right() {
    		throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set right(value) {
    		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get icons() {
    		throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set icons(value) {
    		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get slider() {
    		throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set slider(value) {
    		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get sliderClass() {
    		throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set sliderClass(value) {
    		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ripple() {
    		throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ripple(value) {
    		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get vertical() {
    		throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set vertical(value) {
    		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-materialify\dist\components\Tabs\Tab.svelte generated by Svelte v3.48.0 */
    const file$8 = "node_modules\\svelte-materialify\\dist\\components\\Tabs\\Tab.svelte";

    function create_fragment$8(ctx) {
    	let button;
    	let button_class_value;
    	let button_tabindex_value;
    	let Class_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[9].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

    	const block = {
    		c: function create() {
    			button = element("button");
    			if (default_slot) default_slot.c();
    			attr_dev(button, "class", button_class_value = "s-tab s-slide-item " + /*klass*/ ctx[0]);
    			attr_dev(button, "role", "tab");
    			attr_dev(button, "aria-selected", /*active*/ ctx[4]);
    			attr_dev(button, "tabindex", button_tabindex_value = /*disabled*/ ctx[2] ? -1 : 0);
    			toggle_class(button, "disabled", /*disabled*/ ctx[2]);
    			toggle_class(button, "active", /*active*/ ctx[4]);
    			add_location(button, file$8, 92, 0, 2031);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (default_slot) {
    				default_slot.m(button, null);
    			}

    			/*button_binding*/ ctx[11](button);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(Class_action = Class.call(null, button, [/*active*/ ctx[4] && /*activeClass*/ ctx[1]])),
    					listen_dev(button, "click", /*selectTab*/ ctx[6], false, false, false),
    					listen_dev(button, "click", /*click_handler*/ ctx[10], false, false, false),
    					action_destroyer(Ripple.call(null, button, /*ripple*/ ctx[5]))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[8],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*klass*/ 1 && button_class_value !== (button_class_value = "s-tab s-slide-item " + /*klass*/ ctx[0])) {
    				attr_dev(button, "class", button_class_value);
    			}

    			if (!current || dirty & /*active*/ 16) {
    				attr_dev(button, "aria-selected", /*active*/ ctx[4]);
    			}

    			if (!current || dirty & /*disabled*/ 4 && button_tabindex_value !== (button_tabindex_value = /*disabled*/ ctx[2] ? -1 : 0)) {
    				attr_dev(button, "tabindex", button_tabindex_value);
    			}

    			if (Class_action && is_function(Class_action.update) && dirty & /*active, activeClass*/ 18) Class_action.update.call(null, [/*active*/ ctx[4] && /*activeClass*/ ctx[1]]);

    			if (dirty & /*klass, disabled*/ 5) {
    				toggle_class(button, "disabled", /*disabled*/ ctx[2]);
    			}

    			if (dirty & /*klass, active*/ 17) {
    				toggle_class(button, "active", /*active*/ ctx[4]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			if (default_slot) default_slot.d(detaching);
    			/*button_binding*/ ctx[11](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Tab', slots, ['default']);
    	let tab;
    	const click = getContext(SLIDE_GROUP);
    	const ITEM = getContext(ITEM_GROUP);
    	const { ripple, registerTab } = getContext(TABS);
    	let { class: klass = '' } = $$props;
    	let { value = ITEM.index() } = $$props;
    	let { activeClass = ITEM.activeClass } = $$props;
    	let { disabled = false } = $$props;
    	let active;

    	ITEM.register(values => {
    		$$invalidate(4, active = values.includes(value));
    	});

    	function selectTab({ target }) {
    		if (!disabled) {
    			click(target);
    			ITEM.select(value);
    		}
    	}

    	onMount(() => {
    		registerTab(tab);
    	});

    	const writable_props = ['class', 'value', 'activeClass', 'disabled'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Tab> was created with unknown prop '${key}'`);
    	});

    	function click_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function button_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			tab = $$value;
    			$$invalidate(3, tab);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(0, klass = $$props.class);
    		if ('value' in $$props) $$invalidate(7, value = $$props.value);
    		if ('activeClass' in $$props) $$invalidate(1, activeClass = $$props.activeClass);
    		if ('disabled' in $$props) $$invalidate(2, disabled = $$props.disabled);
    		if ('$$scope' in $$props) $$invalidate(8, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		onMount,
    		SLIDE_GROUP,
    		ITEM_GROUP,
    		TABS,
    		Class,
    		Ripple,
    		tab,
    		click,
    		ITEM,
    		ripple,
    		registerTab,
    		klass,
    		value,
    		activeClass,
    		disabled,
    		active,
    		selectTab
    	});

    	$$self.$inject_state = $$props => {
    		if ('tab' in $$props) $$invalidate(3, tab = $$props.tab);
    		if ('klass' in $$props) $$invalidate(0, klass = $$props.klass);
    		if ('value' in $$props) $$invalidate(7, value = $$props.value);
    		if ('activeClass' in $$props) $$invalidate(1, activeClass = $$props.activeClass);
    		if ('disabled' in $$props) $$invalidate(2, disabled = $$props.disabled);
    		if ('active' in $$props) $$invalidate(4, active = $$props.active);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		klass,
    		activeClass,
    		disabled,
    		tab,
    		active,
    		ripple,
    		selectTab,
    		value,
    		$$scope,
    		slots,
    		click_handler,
    		button_binding
    	];
    }

    class Tab extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$8, create_fragment$8, safe_not_equal, {
    			class: 0,
    			value: 7,
    			activeClass: 1,
    			disabled: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Tab",
    			options,
    			id: create_fragment$8.name
    		});
    	}

    	get class() {
    		throw new Error("<Tab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<Tab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get activeClass() {
    		throw new Error("<Tab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set activeClass(value) {
    		throw new Error("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<Tab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function createCommonjsModule(fn) {
      var module = { exports: {} };
    	return fn(module, module.exports), module.exports;
    }

    function commonjsRequire (target) {
    	throw new Error('Could not dynamically require "' + target + '". Please configure the dynamicRequireTargets option of @rollup/plugin-commonjs appropriately for this require call to behave properly.');
    }

    var moment = createCommonjsModule(function (module, exports) {
    (function (global, factory) {
        module.exports = factory() ;
    }(commonjsGlobal, (function () {
        var hookCallback;

        function hooks() {
            return hookCallback.apply(null, arguments);
        }

        // This is done to register the method called with moment()
        // without creating circular dependencies.
        function setHookCallback(callback) {
            hookCallback = callback;
        }

        function isArray(input) {
            return (
                input instanceof Array ||
                Object.prototype.toString.call(input) === '[object Array]'
            );
        }

        function isObject(input) {
            // IE8 will treat undefined and null as object if it wasn't for
            // input != null
            return (
                input != null &&
                Object.prototype.toString.call(input) === '[object Object]'
            );
        }

        function hasOwnProp(a, b) {
            return Object.prototype.hasOwnProperty.call(a, b);
        }

        function isObjectEmpty(obj) {
            if (Object.getOwnPropertyNames) {
                return Object.getOwnPropertyNames(obj).length === 0;
            } else {
                var k;
                for (k in obj) {
                    if (hasOwnProp(obj, k)) {
                        return false;
                    }
                }
                return true;
            }
        }

        function isUndefined(input) {
            return input === void 0;
        }

        function isNumber(input) {
            return (
                typeof input === 'number' ||
                Object.prototype.toString.call(input) === '[object Number]'
            );
        }

        function isDate(input) {
            return (
                input instanceof Date ||
                Object.prototype.toString.call(input) === '[object Date]'
            );
        }

        function map(arr, fn) {
            var res = [],
                i,
                arrLen = arr.length;
            for (i = 0; i < arrLen; ++i) {
                res.push(fn(arr[i], i));
            }
            return res;
        }

        function extend(a, b) {
            for (var i in b) {
                if (hasOwnProp(b, i)) {
                    a[i] = b[i];
                }
            }

            if (hasOwnProp(b, 'toString')) {
                a.toString = b.toString;
            }

            if (hasOwnProp(b, 'valueOf')) {
                a.valueOf = b.valueOf;
            }

            return a;
        }

        function createUTC(input, format, locale, strict) {
            return createLocalOrUTC(input, format, locale, strict, true).utc();
        }

        function defaultParsingFlags() {
            // We need to deep clone this object.
            return {
                empty: false,
                unusedTokens: [],
                unusedInput: [],
                overflow: -2,
                charsLeftOver: 0,
                nullInput: false,
                invalidEra: null,
                invalidMonth: null,
                invalidFormat: false,
                userInvalidated: false,
                iso: false,
                parsedDateParts: [],
                era: null,
                meridiem: null,
                rfc2822: false,
                weekdayMismatch: false,
            };
        }

        function getParsingFlags(m) {
            if (m._pf == null) {
                m._pf = defaultParsingFlags();
            }
            return m._pf;
        }

        var some;
        if (Array.prototype.some) {
            some = Array.prototype.some;
        } else {
            some = function (fun) {
                var t = Object(this),
                    len = t.length >>> 0,
                    i;

                for (i = 0; i < len; i++) {
                    if (i in t && fun.call(this, t[i], i, t)) {
                        return true;
                    }
                }

                return false;
            };
        }

        function isValid(m) {
            if (m._isValid == null) {
                var flags = getParsingFlags(m),
                    parsedParts = some.call(flags.parsedDateParts, function (i) {
                        return i != null;
                    }),
                    isNowValid =
                        !isNaN(m._d.getTime()) &&
                        flags.overflow < 0 &&
                        !flags.empty &&
                        !flags.invalidEra &&
                        !flags.invalidMonth &&
                        !flags.invalidWeekday &&
                        !flags.weekdayMismatch &&
                        !flags.nullInput &&
                        !flags.invalidFormat &&
                        !flags.userInvalidated &&
                        (!flags.meridiem || (flags.meridiem && parsedParts));

                if (m._strict) {
                    isNowValid =
                        isNowValid &&
                        flags.charsLeftOver === 0 &&
                        flags.unusedTokens.length === 0 &&
                        flags.bigHour === undefined;
                }

                if (Object.isFrozen == null || !Object.isFrozen(m)) {
                    m._isValid = isNowValid;
                } else {
                    return isNowValid;
                }
            }
            return m._isValid;
        }

        function createInvalid(flags) {
            var m = createUTC(NaN);
            if (flags != null) {
                extend(getParsingFlags(m), flags);
            } else {
                getParsingFlags(m).userInvalidated = true;
            }

            return m;
        }

        // Plugins that add properties should also add the key here (null value),
        // so we can properly clone ourselves.
        var momentProperties = (hooks.momentProperties = []),
            updateInProgress = false;

        function copyConfig(to, from) {
            var i,
                prop,
                val,
                momentPropertiesLen = momentProperties.length;

            if (!isUndefined(from._isAMomentObject)) {
                to._isAMomentObject = from._isAMomentObject;
            }
            if (!isUndefined(from._i)) {
                to._i = from._i;
            }
            if (!isUndefined(from._f)) {
                to._f = from._f;
            }
            if (!isUndefined(from._l)) {
                to._l = from._l;
            }
            if (!isUndefined(from._strict)) {
                to._strict = from._strict;
            }
            if (!isUndefined(from._tzm)) {
                to._tzm = from._tzm;
            }
            if (!isUndefined(from._isUTC)) {
                to._isUTC = from._isUTC;
            }
            if (!isUndefined(from._offset)) {
                to._offset = from._offset;
            }
            if (!isUndefined(from._pf)) {
                to._pf = getParsingFlags(from);
            }
            if (!isUndefined(from._locale)) {
                to._locale = from._locale;
            }

            if (momentPropertiesLen > 0) {
                for (i = 0; i < momentPropertiesLen; i++) {
                    prop = momentProperties[i];
                    val = from[prop];
                    if (!isUndefined(val)) {
                        to[prop] = val;
                    }
                }
            }

            return to;
        }

        // Moment prototype object
        function Moment(config) {
            copyConfig(this, config);
            this._d = new Date(config._d != null ? config._d.getTime() : NaN);
            if (!this.isValid()) {
                this._d = new Date(NaN);
            }
            // Prevent infinite loop in case updateOffset creates new moment
            // objects.
            if (updateInProgress === false) {
                updateInProgress = true;
                hooks.updateOffset(this);
                updateInProgress = false;
            }
        }

        function isMoment(obj) {
            return (
                obj instanceof Moment || (obj != null && obj._isAMomentObject != null)
            );
        }

        function warn(msg) {
            if (
                hooks.suppressDeprecationWarnings === false &&
                typeof console !== 'undefined' &&
                console.warn
            ) {
                console.warn('Deprecation warning: ' + msg);
            }
        }

        function deprecate(msg, fn) {
            var firstTime = true;

            return extend(function () {
                if (hooks.deprecationHandler != null) {
                    hooks.deprecationHandler(null, msg);
                }
                if (firstTime) {
                    var args = [],
                        arg,
                        i,
                        key,
                        argLen = arguments.length;
                    for (i = 0; i < argLen; i++) {
                        arg = '';
                        if (typeof arguments[i] === 'object') {
                            arg += '\n[' + i + '] ';
                            for (key in arguments[0]) {
                                if (hasOwnProp(arguments[0], key)) {
                                    arg += key + ': ' + arguments[0][key] + ', ';
                                }
                            }
                            arg = arg.slice(0, -2); // Remove trailing comma and space
                        } else {
                            arg = arguments[i];
                        }
                        args.push(arg);
                    }
                    warn(
                        msg +
                            '\nArguments: ' +
                            Array.prototype.slice.call(args).join('') +
                            '\n' +
                            new Error().stack
                    );
                    firstTime = false;
                }
                return fn.apply(this, arguments);
            }, fn);
        }

        var deprecations = {};

        function deprecateSimple(name, msg) {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(name, msg);
            }
            if (!deprecations[name]) {
                warn(msg);
                deprecations[name] = true;
            }
        }

        hooks.suppressDeprecationWarnings = false;
        hooks.deprecationHandler = null;

        function isFunction(input) {
            return (
                (typeof Function !== 'undefined' && input instanceof Function) ||
                Object.prototype.toString.call(input) === '[object Function]'
            );
        }

        function set(config) {
            var prop, i;
            for (i in config) {
                if (hasOwnProp(config, i)) {
                    prop = config[i];
                    if (isFunction(prop)) {
                        this[i] = prop;
                    } else {
                        this['_' + i] = prop;
                    }
                }
            }
            this._config = config;
            // Lenient ordinal parsing accepts just a number in addition to
            // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
            // TODO: Remove "ordinalParse" fallback in next major release.
            this._dayOfMonthOrdinalParseLenient = new RegExp(
                (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                    '|' +
                    /\d{1,2}/.source
            );
        }

        function mergeConfigs(parentConfig, childConfig) {
            var res = extend({}, parentConfig),
                prop;
            for (prop in childConfig) {
                if (hasOwnProp(childConfig, prop)) {
                    if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                        res[prop] = {};
                        extend(res[prop], parentConfig[prop]);
                        extend(res[prop], childConfig[prop]);
                    } else if (childConfig[prop] != null) {
                        res[prop] = childConfig[prop];
                    } else {
                        delete res[prop];
                    }
                }
            }
            for (prop in parentConfig) {
                if (
                    hasOwnProp(parentConfig, prop) &&
                    !hasOwnProp(childConfig, prop) &&
                    isObject(parentConfig[prop])
                ) {
                    // make sure changes to properties don't modify parent config
                    res[prop] = extend({}, res[prop]);
                }
            }
            return res;
        }

        function Locale(config) {
            if (config != null) {
                this.set(config);
            }
        }

        var keys;

        if (Object.keys) {
            keys = Object.keys;
        } else {
            keys = function (obj) {
                var i,
                    res = [];
                for (i in obj) {
                    if (hasOwnProp(obj, i)) {
                        res.push(i);
                    }
                }
                return res;
            };
        }

        var defaultCalendar = {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        };

        function calendar(key, mom, now) {
            var output = this._calendar[key] || this._calendar['sameElse'];
            return isFunction(output) ? output.call(mom, now) : output;
        }

        function zeroFill(number, targetLength, forceSign) {
            var absNumber = '' + Math.abs(number),
                zerosToFill = targetLength - absNumber.length,
                sign = number >= 0;
            return (
                (sign ? (forceSign ? '+' : '') : '-') +
                Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
                absNumber
            );
        }

        var formattingTokens =
                /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
            localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
            formatFunctions = {},
            formatTokenFunctions = {};

        // token:    'M'
        // padded:   ['MM', 2]
        // ordinal:  'Mo'
        // callback: function () { this.month() + 1 }
        function addFormatToken(token, padded, ordinal, callback) {
            var func = callback;
            if (typeof callback === 'string') {
                func = function () {
                    return this[callback]();
                };
            }
            if (token) {
                formatTokenFunctions[token] = func;
            }
            if (padded) {
                formatTokenFunctions[padded[0]] = function () {
                    return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
                };
            }
            if (ordinal) {
                formatTokenFunctions[ordinal] = function () {
                    return this.localeData().ordinal(
                        func.apply(this, arguments),
                        token
                    );
                };
            }
        }

        function removeFormattingTokens(input) {
            if (input.match(/\[[\s\S]/)) {
                return input.replace(/^\[|\]$/g, '');
            }
            return input.replace(/\\/g, '');
        }

        function makeFormatFunction(format) {
            var array = format.match(formattingTokens),
                i,
                length;

            for (i = 0, length = array.length; i < length; i++) {
                if (formatTokenFunctions[array[i]]) {
                    array[i] = formatTokenFunctions[array[i]];
                } else {
                    array[i] = removeFormattingTokens(array[i]);
                }
            }

            return function (mom) {
                var output = '',
                    i;
                for (i = 0; i < length; i++) {
                    output += isFunction(array[i])
                        ? array[i].call(mom, format)
                        : array[i];
                }
                return output;
            };
        }

        // format date using native date object
        function formatMoment(m, format) {
            if (!m.isValid()) {
                return m.localeData().invalidDate();
            }

            format = expandFormat(format, m.localeData());
            formatFunctions[format] =
                formatFunctions[format] || makeFormatFunction(format);

            return formatFunctions[format](m);
        }

        function expandFormat(format, locale) {
            var i = 5;

            function replaceLongDateFormatTokens(input) {
                return locale.longDateFormat(input) || input;
            }

            localFormattingTokens.lastIndex = 0;
            while (i >= 0 && localFormattingTokens.test(format)) {
                format = format.replace(
                    localFormattingTokens,
                    replaceLongDateFormatTokens
                );
                localFormattingTokens.lastIndex = 0;
                i -= 1;
            }

            return format;
        }

        var defaultLongDateFormat = {
            LTS: 'h:mm:ss A',
            LT: 'h:mm A',
            L: 'MM/DD/YYYY',
            LL: 'MMMM D, YYYY',
            LLL: 'MMMM D, YYYY h:mm A',
            LLLL: 'dddd, MMMM D, YYYY h:mm A',
        };

        function longDateFormat(key) {
            var format = this._longDateFormat[key],
                formatUpper = this._longDateFormat[key.toUpperCase()];

            if (format || !formatUpper) {
                return format;
            }

            this._longDateFormat[key] = formatUpper
                .match(formattingTokens)
                .map(function (tok) {
                    if (
                        tok === 'MMMM' ||
                        tok === 'MM' ||
                        tok === 'DD' ||
                        tok === 'dddd'
                    ) {
                        return tok.slice(1);
                    }
                    return tok;
                })
                .join('');

            return this._longDateFormat[key];
        }

        var defaultInvalidDate = 'Invalid date';

        function invalidDate() {
            return this._invalidDate;
        }

        var defaultOrdinal = '%d',
            defaultDayOfMonthOrdinalParse = /\d{1,2}/;

        function ordinal(number) {
            return this._ordinal.replace('%d', number);
        }

        var defaultRelativeTime = {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            w: 'a week',
            ww: '%d weeks',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        };

        function relativeTime(number, withoutSuffix, string, isFuture) {
            var output = this._relativeTime[string];
            return isFunction(output)
                ? output(number, withoutSuffix, string, isFuture)
                : output.replace(/%d/i, number);
        }

        function pastFuture(diff, output) {
            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
            return isFunction(format) ? format(output) : format.replace(/%s/i, output);
        }

        var aliases = {};

        function addUnitAlias(unit, shorthand) {
            var lowerCase = unit.toLowerCase();
            aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
        }

        function normalizeUnits(units) {
            return typeof units === 'string'
                ? aliases[units] || aliases[units.toLowerCase()]
                : undefined;
        }

        function normalizeObjectUnits(inputObject) {
            var normalizedInput = {},
                normalizedProp,
                prop;

            for (prop in inputObject) {
                if (hasOwnProp(inputObject, prop)) {
                    normalizedProp = normalizeUnits(prop);
                    if (normalizedProp) {
                        normalizedInput[normalizedProp] = inputObject[prop];
                    }
                }
            }

            return normalizedInput;
        }

        var priorities = {};

        function addUnitPriority(unit, priority) {
            priorities[unit] = priority;
        }

        function getPrioritizedUnits(unitsObj) {
            var units = [],
                u;
            for (u in unitsObj) {
                if (hasOwnProp(unitsObj, u)) {
                    units.push({ unit: u, priority: priorities[u] });
                }
            }
            units.sort(function (a, b) {
                return a.priority - b.priority;
            });
            return units;
        }

        function isLeapYear(year) {
            return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
        }

        function absFloor(number) {
            if (number < 0) {
                // -0 -> 0
                return Math.ceil(number) || 0;
            } else {
                return Math.floor(number);
            }
        }

        function toInt(argumentForCoercion) {
            var coercedNumber = +argumentForCoercion,
                value = 0;

            if (coercedNumber !== 0 && isFinite(coercedNumber)) {
                value = absFloor(coercedNumber);
            }

            return value;
        }

        function makeGetSet(unit, keepTime) {
            return function (value) {
                if (value != null) {
                    set$1(this, unit, value);
                    hooks.updateOffset(this, keepTime);
                    return this;
                } else {
                    return get(this, unit);
                }
            };
        }

        function get(mom, unit) {
            return mom.isValid()
                ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]()
                : NaN;
        }

        function set$1(mom, unit, value) {
            if (mom.isValid() && !isNaN(value)) {
                if (
                    unit === 'FullYear' &&
                    isLeapYear(mom.year()) &&
                    mom.month() === 1 &&
                    mom.date() === 29
                ) {
                    value = toInt(value);
                    mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](
                        value,
                        mom.month(),
                        daysInMonth(value, mom.month())
                    );
                } else {
                    mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
                }
            }
        }

        // MOMENTS

        function stringGet(units) {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units]();
            }
            return this;
        }

        function stringSet(units, value) {
            if (typeof units === 'object') {
                units = normalizeObjectUnits(units);
                var prioritized = getPrioritizedUnits(units),
                    i,
                    prioritizedLen = prioritized.length;
                for (i = 0; i < prioritizedLen; i++) {
                    this[prioritized[i].unit](units[prioritized[i].unit]);
                }
            } else {
                units = normalizeUnits(units);
                if (isFunction(this[units])) {
                    return this[units](value);
                }
            }
            return this;
        }

        var match1 = /\d/, //       0 - 9
            match2 = /\d\d/, //      00 - 99
            match3 = /\d{3}/, //     000 - 999
            match4 = /\d{4}/, //    0000 - 9999
            match6 = /[+-]?\d{6}/, // -999999 - 999999
            match1to2 = /\d\d?/, //       0 - 99
            match3to4 = /\d\d\d\d?/, //     999 - 9999
            match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
            match1to3 = /\d{1,3}/, //       0 - 999
            match1to4 = /\d{1,4}/, //       0 - 9999
            match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
            matchUnsigned = /\d+/, //       0 - inf
            matchSigned = /[+-]?\d+/, //    -inf - inf
            matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
            matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
            matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
            // any word (or two) characters or numbers including two/three word month in arabic.
            // includes scottish gaelic two word and hyphenated months
            matchWord =
                /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
            regexes;

        regexes = {};

        function addRegexToken(token, regex, strictRegex) {
            regexes[token] = isFunction(regex)
                ? regex
                : function (isStrict, localeData) {
                      return isStrict && strictRegex ? strictRegex : regex;
                  };
        }

        function getParseRegexForToken(token, config) {
            if (!hasOwnProp(regexes, token)) {
                return new RegExp(unescapeFormat(token));
            }

            return regexes[token](config._strict, config._locale);
        }

        // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
        function unescapeFormat(s) {
            return regexEscape(
                s
                    .replace('\\', '')
                    .replace(
                        /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
                        function (matched, p1, p2, p3, p4) {
                            return p1 || p2 || p3 || p4;
                        }
                    )
            );
        }

        function regexEscape(s) {
            return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
        }

        var tokens = {};

        function addParseToken(token, callback) {
            var i,
                func = callback,
                tokenLen;
            if (typeof token === 'string') {
                token = [token];
            }
            if (isNumber(callback)) {
                func = function (input, array) {
                    array[callback] = toInt(input);
                };
            }
            tokenLen = token.length;
            for (i = 0; i < tokenLen; i++) {
                tokens[token[i]] = func;
            }
        }

        function addWeekParseToken(token, callback) {
            addParseToken(token, function (input, array, config, token) {
                config._w = config._w || {};
                callback(input, config._w, config, token);
            });
        }

        function addTimeToArrayFromToken(token, input, config) {
            if (input != null && hasOwnProp(tokens, token)) {
                tokens[token](input, config._a, config, token);
            }
        }

        var YEAR = 0,
            MONTH = 1,
            DATE = 2,
            HOUR = 3,
            MINUTE = 4,
            SECOND = 5,
            MILLISECOND = 6,
            WEEK = 7,
            WEEKDAY = 8;

        function mod(n, x) {
            return ((n % x) + x) % x;
        }

        var indexOf;

        if (Array.prototype.indexOf) {
            indexOf = Array.prototype.indexOf;
        } else {
            indexOf = function (o) {
                // I know
                var i;
                for (i = 0; i < this.length; ++i) {
                    if (this[i] === o) {
                        return i;
                    }
                }
                return -1;
            };
        }

        function daysInMonth(year, month) {
            if (isNaN(year) || isNaN(month)) {
                return NaN;
            }
            var modMonth = mod(month, 12);
            year += (month - modMonth) / 12;
            return modMonth === 1
                ? isLeapYear(year)
                    ? 29
                    : 28
                : 31 - ((modMonth % 7) % 2);
        }

        // FORMATTING

        addFormatToken('M', ['MM', 2], 'Mo', function () {
            return this.month() + 1;
        });

        addFormatToken('MMM', 0, 0, function (format) {
            return this.localeData().monthsShort(this, format);
        });

        addFormatToken('MMMM', 0, 0, function (format) {
            return this.localeData().months(this, format);
        });

        // ALIASES

        addUnitAlias('month', 'M');

        // PRIORITY

        addUnitPriority('month', 8);

        // PARSING

        addRegexToken('M', match1to2);
        addRegexToken('MM', match1to2, match2);
        addRegexToken('MMM', function (isStrict, locale) {
            return locale.monthsShortRegex(isStrict);
        });
        addRegexToken('MMMM', function (isStrict, locale) {
            return locale.monthsRegex(isStrict);
        });

        addParseToken(['M', 'MM'], function (input, array) {
            array[MONTH] = toInt(input) - 1;
        });

        addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
            var month = config._locale.monthsParse(input, token, config._strict);
            // if we didn't find a month name, mark the date as invalid.
            if (month != null) {
                array[MONTH] = month;
            } else {
                getParsingFlags(config).invalidMonth = input;
            }
        });

        // LOCALES

        var defaultLocaleMonths =
                'January_February_March_April_May_June_July_August_September_October_November_December'.split(
                    '_'
                ),
            defaultLocaleMonthsShort =
                'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
            MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
            defaultMonthsShortRegex = matchWord,
            defaultMonthsRegex = matchWord;

        function localeMonths(m, format) {
            if (!m) {
                return isArray(this._months)
                    ? this._months
                    : this._months['standalone'];
            }
            return isArray(this._months)
                ? this._months[m.month()]
                : this._months[
                      (this._months.isFormat || MONTHS_IN_FORMAT).test(format)
                          ? 'format'
                          : 'standalone'
                  ][m.month()];
        }

        function localeMonthsShort(m, format) {
            if (!m) {
                return isArray(this._monthsShort)
                    ? this._monthsShort
                    : this._monthsShort['standalone'];
            }
            return isArray(this._monthsShort)
                ? this._monthsShort[m.month()]
                : this._monthsShort[
                      MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'
                  ][m.month()];
        }

        function handleStrictParse(monthName, format, strict) {
            var i,
                ii,
                mom,
                llc = monthName.toLocaleLowerCase();
            if (!this._monthsParse) {
                // this is not used
                this._monthsParse = [];
                this._longMonthsParse = [];
                this._shortMonthsParse = [];
                for (i = 0; i < 12; ++i) {
                    mom = createUTC([2000, i]);
                    this._shortMonthsParse[i] = this.monthsShort(
                        mom,
                        ''
                    ).toLocaleLowerCase();
                    this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
                }
            }

            if (strict) {
                if (format === 'MMM') {
                    ii = indexOf.call(this._shortMonthsParse, llc);
                    return ii !== -1 ? ii : null;
                } else {
                    ii = indexOf.call(this._longMonthsParse, llc);
                    return ii !== -1 ? ii : null;
                }
            } else {
                if (format === 'MMM') {
                    ii = indexOf.call(this._shortMonthsParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._longMonthsParse, llc);
                    return ii !== -1 ? ii : null;
                } else {
                    ii = indexOf.call(this._longMonthsParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._shortMonthsParse, llc);
                    return ii !== -1 ? ii : null;
                }
            }
        }

        function localeMonthsParse(monthName, format, strict) {
            var i, mom, regex;

            if (this._monthsParseExact) {
                return handleStrictParse.call(this, monthName, format, strict);
            }

            if (!this._monthsParse) {
                this._monthsParse = [];
                this._longMonthsParse = [];
                this._shortMonthsParse = [];
            }

            // TODO: add sorting
            // Sorting makes sure if one month (or abbr) is a prefix of another
            // see sorting in computeMonthsParse
            for (i = 0; i < 12; i++) {
                // make the regex if we don't have it already
                mom = createUTC([2000, i]);
                if (strict && !this._longMonthsParse[i]) {
                    this._longMonthsParse[i] = new RegExp(
                        '^' + this.months(mom, '').replace('.', '') + '$',
                        'i'
                    );
                    this._shortMonthsParse[i] = new RegExp(
                        '^' + this.monthsShort(mom, '').replace('.', '') + '$',
                        'i'
                    );
                }
                if (!strict && !this._monthsParse[i]) {
                    regex =
                        '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                    this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (
                    strict &&
                    format === 'MMMM' &&
                    this._longMonthsParse[i].test(monthName)
                ) {
                    return i;
                } else if (
                    strict &&
                    format === 'MMM' &&
                    this._shortMonthsParse[i].test(monthName)
                ) {
                    return i;
                } else if (!strict && this._monthsParse[i].test(monthName)) {
                    return i;
                }
            }
        }

        // MOMENTS

        function setMonth(mom, value) {
            var dayOfMonth;

            if (!mom.isValid()) {
                // No op
                return mom;
            }

            if (typeof value === 'string') {
                if (/^\d+$/.test(value)) {
                    value = toInt(value);
                } else {
                    value = mom.localeData().monthsParse(value);
                    // TODO: Another silent failure?
                    if (!isNumber(value)) {
                        return mom;
                    }
                }
            }

            dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
            mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
            return mom;
        }

        function getSetMonth(value) {
            if (value != null) {
                setMonth(this, value);
                hooks.updateOffset(this, true);
                return this;
            } else {
                return get(this, 'Month');
            }
        }

        function getDaysInMonth() {
            return daysInMonth(this.year(), this.month());
        }

        function monthsShortRegex(isStrict) {
            if (this._monthsParseExact) {
                if (!hasOwnProp(this, '_monthsRegex')) {
                    computeMonthsParse.call(this);
                }
                if (isStrict) {
                    return this._monthsShortStrictRegex;
                } else {
                    return this._monthsShortRegex;
                }
            } else {
                if (!hasOwnProp(this, '_monthsShortRegex')) {
                    this._monthsShortRegex = defaultMonthsShortRegex;
                }
                return this._monthsShortStrictRegex && isStrict
                    ? this._monthsShortStrictRegex
                    : this._monthsShortRegex;
            }
        }

        function monthsRegex(isStrict) {
            if (this._monthsParseExact) {
                if (!hasOwnProp(this, '_monthsRegex')) {
                    computeMonthsParse.call(this);
                }
                if (isStrict) {
                    return this._monthsStrictRegex;
                } else {
                    return this._monthsRegex;
                }
            } else {
                if (!hasOwnProp(this, '_monthsRegex')) {
                    this._monthsRegex = defaultMonthsRegex;
                }
                return this._monthsStrictRegex && isStrict
                    ? this._monthsStrictRegex
                    : this._monthsRegex;
            }
        }

        function computeMonthsParse() {
            function cmpLenRev(a, b) {
                return b.length - a.length;
            }

            var shortPieces = [],
                longPieces = [],
                mixedPieces = [],
                i,
                mom;
            for (i = 0; i < 12; i++) {
                // make the regex if we don't have it already
                mom = createUTC([2000, i]);
                shortPieces.push(this.monthsShort(mom, ''));
                longPieces.push(this.months(mom, ''));
                mixedPieces.push(this.months(mom, ''));
                mixedPieces.push(this.monthsShort(mom, ''));
            }
            // Sorting makes sure if one month (or abbr) is a prefix of another it
            // will match the longer piece.
            shortPieces.sort(cmpLenRev);
            longPieces.sort(cmpLenRev);
            mixedPieces.sort(cmpLenRev);
            for (i = 0; i < 12; i++) {
                shortPieces[i] = regexEscape(shortPieces[i]);
                longPieces[i] = regexEscape(longPieces[i]);
            }
            for (i = 0; i < 24; i++) {
                mixedPieces[i] = regexEscape(mixedPieces[i]);
            }

            this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
            this._monthsShortRegex = this._monthsRegex;
            this._monthsStrictRegex = new RegExp(
                '^(' + longPieces.join('|') + ')',
                'i'
            );
            this._monthsShortStrictRegex = new RegExp(
                '^(' + shortPieces.join('|') + ')',
                'i'
            );
        }

        // FORMATTING

        addFormatToken('Y', 0, 0, function () {
            var y = this.year();
            return y <= 9999 ? zeroFill(y, 4) : '+' + y;
        });

        addFormatToken(0, ['YY', 2], 0, function () {
            return this.year() % 100;
        });

        addFormatToken(0, ['YYYY', 4], 0, 'year');
        addFormatToken(0, ['YYYYY', 5], 0, 'year');
        addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

        // ALIASES

        addUnitAlias('year', 'y');

        // PRIORITIES

        addUnitPriority('year', 1);

        // PARSING

        addRegexToken('Y', matchSigned);
        addRegexToken('YY', match1to2, match2);
        addRegexToken('YYYY', match1to4, match4);
        addRegexToken('YYYYY', match1to6, match6);
        addRegexToken('YYYYYY', match1to6, match6);

        addParseToken(['YYYYY', 'YYYYYY'], YEAR);
        addParseToken('YYYY', function (input, array) {
            array[YEAR] =
                input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
        });
        addParseToken('YY', function (input, array) {
            array[YEAR] = hooks.parseTwoDigitYear(input);
        });
        addParseToken('Y', function (input, array) {
            array[YEAR] = parseInt(input, 10);
        });

        // HELPERS

        function daysInYear(year) {
            return isLeapYear(year) ? 366 : 365;
        }

        // HOOKS

        hooks.parseTwoDigitYear = function (input) {
            return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
        };

        // MOMENTS

        var getSetYear = makeGetSet('FullYear', true);

        function getIsLeapYear() {
            return isLeapYear(this.year());
        }

        function createDate(y, m, d, h, M, s, ms) {
            // can't just apply() to create a date:
            // https://stackoverflow.com/q/181348
            var date;
            // the date constructor remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
                // preserve leap years using a full 400 year cycle, then reset
                date = new Date(y + 400, m, d, h, M, s, ms);
                if (isFinite(date.getFullYear())) {
                    date.setFullYear(y);
                }
            } else {
                date = new Date(y, m, d, h, M, s, ms);
            }

            return date;
        }

        function createUTCDate(y) {
            var date, args;
            // the Date.UTC function remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
                args = Array.prototype.slice.call(arguments);
                // preserve leap years using a full 400 year cycle, then reset
                args[0] = y + 400;
                date = new Date(Date.UTC.apply(null, args));
                if (isFinite(date.getUTCFullYear())) {
                    date.setUTCFullYear(y);
                }
            } else {
                date = new Date(Date.UTC.apply(null, arguments));
            }

            return date;
        }

        // start-of-first-week - start-of-year
        function firstWeekOffset(year, dow, doy) {
            var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
                fwd = 7 + dow - doy,
                // first-week day local weekday -- which local weekday is fwd
                fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

            return -fwdlw + fwd - 1;
        }

        // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
        function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
            var localWeekday = (7 + weekday - dow) % 7,
                weekOffset = firstWeekOffset(year, dow, doy),
                dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
                resYear,
                resDayOfYear;

            if (dayOfYear <= 0) {
                resYear = year - 1;
                resDayOfYear = daysInYear(resYear) + dayOfYear;
            } else if (dayOfYear > daysInYear(year)) {
                resYear = year + 1;
                resDayOfYear = dayOfYear - daysInYear(year);
            } else {
                resYear = year;
                resDayOfYear = dayOfYear;
            }

            return {
                year: resYear,
                dayOfYear: resDayOfYear,
            };
        }

        function weekOfYear(mom, dow, doy) {
            var weekOffset = firstWeekOffset(mom.year(), dow, doy),
                week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
                resWeek,
                resYear;

            if (week < 1) {
                resYear = mom.year() - 1;
                resWeek = week + weeksInYear(resYear, dow, doy);
            } else if (week > weeksInYear(mom.year(), dow, doy)) {
                resWeek = week - weeksInYear(mom.year(), dow, doy);
                resYear = mom.year() + 1;
            } else {
                resYear = mom.year();
                resWeek = week;
            }

            return {
                week: resWeek,
                year: resYear,
            };
        }

        function weeksInYear(year, dow, doy) {
            var weekOffset = firstWeekOffset(year, dow, doy),
                weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
            return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
        }

        // FORMATTING

        addFormatToken('w', ['ww', 2], 'wo', 'week');
        addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

        // ALIASES

        addUnitAlias('week', 'w');
        addUnitAlias('isoWeek', 'W');

        // PRIORITIES

        addUnitPriority('week', 5);
        addUnitPriority('isoWeek', 5);

        // PARSING

        addRegexToken('w', match1to2);
        addRegexToken('ww', match1to2, match2);
        addRegexToken('W', match1to2);
        addRegexToken('WW', match1to2, match2);

        addWeekParseToken(
            ['w', 'ww', 'W', 'WW'],
            function (input, week, config, token) {
                week[token.substr(0, 1)] = toInt(input);
            }
        );

        // HELPERS

        // LOCALES

        function localeWeek(mom) {
            return weekOfYear(mom, this._week.dow, this._week.doy).week;
        }

        var defaultLocaleWeek = {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        };

        function localeFirstDayOfWeek() {
            return this._week.dow;
        }

        function localeFirstDayOfYear() {
            return this._week.doy;
        }

        // MOMENTS

        function getSetWeek(input) {
            var week = this.localeData().week(this);
            return input == null ? week : this.add((input - week) * 7, 'd');
        }

        function getSetISOWeek(input) {
            var week = weekOfYear(this, 1, 4).week;
            return input == null ? week : this.add((input - week) * 7, 'd');
        }

        // FORMATTING

        addFormatToken('d', 0, 'do', 'day');

        addFormatToken('dd', 0, 0, function (format) {
            return this.localeData().weekdaysMin(this, format);
        });

        addFormatToken('ddd', 0, 0, function (format) {
            return this.localeData().weekdaysShort(this, format);
        });

        addFormatToken('dddd', 0, 0, function (format) {
            return this.localeData().weekdays(this, format);
        });

        addFormatToken('e', 0, 0, 'weekday');
        addFormatToken('E', 0, 0, 'isoWeekday');

        // ALIASES

        addUnitAlias('day', 'd');
        addUnitAlias('weekday', 'e');
        addUnitAlias('isoWeekday', 'E');

        // PRIORITY
        addUnitPriority('day', 11);
        addUnitPriority('weekday', 11);
        addUnitPriority('isoWeekday', 11);

        // PARSING

        addRegexToken('d', match1to2);
        addRegexToken('e', match1to2);
        addRegexToken('E', match1to2);
        addRegexToken('dd', function (isStrict, locale) {
            return locale.weekdaysMinRegex(isStrict);
        });
        addRegexToken('ddd', function (isStrict, locale) {
            return locale.weekdaysShortRegex(isStrict);
        });
        addRegexToken('dddd', function (isStrict, locale) {
            return locale.weekdaysRegex(isStrict);
        });

        addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
            var weekday = config._locale.weekdaysParse(input, token, config._strict);
            // if we didn't get a weekday name, mark the date as invalid
            if (weekday != null) {
                week.d = weekday;
            } else {
                getParsingFlags(config).invalidWeekday = input;
            }
        });

        addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
            week[token] = toInt(input);
        });

        // HELPERS

        function parseWeekday(input, locale) {
            if (typeof input !== 'string') {
                return input;
            }

            if (!isNaN(input)) {
                return parseInt(input, 10);
            }

            input = locale.weekdaysParse(input);
            if (typeof input === 'number') {
                return input;
            }

            return null;
        }

        function parseIsoWeekday(input, locale) {
            if (typeof input === 'string') {
                return locale.weekdaysParse(input) % 7 || 7;
            }
            return isNaN(input) ? null : input;
        }

        // LOCALES
        function shiftWeekdays(ws, n) {
            return ws.slice(n, 7).concat(ws.slice(0, n));
        }

        var defaultLocaleWeekdays =
                'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
            defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
            defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
            defaultWeekdaysRegex = matchWord,
            defaultWeekdaysShortRegex = matchWord,
            defaultWeekdaysMinRegex = matchWord;

        function localeWeekdays(m, format) {
            var weekdays = isArray(this._weekdays)
                ? this._weekdays
                : this._weekdays[
                      m && m !== true && this._weekdays.isFormat.test(format)
                          ? 'format'
                          : 'standalone'
                  ];
            return m === true
                ? shiftWeekdays(weekdays, this._week.dow)
                : m
                ? weekdays[m.day()]
                : weekdays;
        }

        function localeWeekdaysShort(m) {
            return m === true
                ? shiftWeekdays(this._weekdaysShort, this._week.dow)
                : m
                ? this._weekdaysShort[m.day()]
                : this._weekdaysShort;
        }

        function localeWeekdaysMin(m) {
            return m === true
                ? shiftWeekdays(this._weekdaysMin, this._week.dow)
                : m
                ? this._weekdaysMin[m.day()]
                : this._weekdaysMin;
        }

        function handleStrictParse$1(weekdayName, format, strict) {
            var i,
                ii,
                mom,
                llc = weekdayName.toLocaleLowerCase();
            if (!this._weekdaysParse) {
                this._weekdaysParse = [];
                this._shortWeekdaysParse = [];
                this._minWeekdaysParse = [];

                for (i = 0; i < 7; ++i) {
                    mom = createUTC([2000, 1]).day(i);
                    this._minWeekdaysParse[i] = this.weekdaysMin(
                        mom,
                        ''
                    ).toLocaleLowerCase();
                    this._shortWeekdaysParse[i] = this.weekdaysShort(
                        mom,
                        ''
                    ).toLocaleLowerCase();
                    this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
                }
            }

            if (strict) {
                if (format === 'dddd') {
                    ii = indexOf.call(this._weekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                } else if (format === 'ddd') {
                    ii = indexOf.call(this._shortWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                } else {
                    ii = indexOf.call(this._minWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                }
            } else {
                if (format === 'dddd') {
                    ii = indexOf.call(this._weekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._shortWeekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._minWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                } else if (format === 'ddd') {
                    ii = indexOf.call(this._shortWeekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._weekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._minWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                } else {
                    ii = indexOf.call(this._minWeekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._weekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._shortWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                }
            }
        }

        function localeWeekdaysParse(weekdayName, format, strict) {
            var i, mom, regex;

            if (this._weekdaysParseExact) {
                return handleStrictParse$1.call(this, weekdayName, format, strict);
            }

            if (!this._weekdaysParse) {
                this._weekdaysParse = [];
                this._minWeekdaysParse = [];
                this._shortWeekdaysParse = [];
                this._fullWeekdaysParse = [];
            }

            for (i = 0; i < 7; i++) {
                // make the regex if we don't have it already

                mom = createUTC([2000, 1]).day(i);
                if (strict && !this._fullWeekdaysParse[i]) {
                    this._fullWeekdaysParse[i] = new RegExp(
                        '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
                        'i'
                    );
                    this._shortWeekdaysParse[i] = new RegExp(
                        '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
                        'i'
                    );
                    this._minWeekdaysParse[i] = new RegExp(
                        '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
                        'i'
                    );
                }
                if (!this._weekdaysParse[i]) {
                    regex =
                        '^' +
                        this.weekdays(mom, '') +
                        '|^' +
                        this.weekdaysShort(mom, '') +
                        '|^' +
                        this.weekdaysMin(mom, '');
                    this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (
                    strict &&
                    format === 'dddd' &&
                    this._fullWeekdaysParse[i].test(weekdayName)
                ) {
                    return i;
                } else if (
                    strict &&
                    format === 'ddd' &&
                    this._shortWeekdaysParse[i].test(weekdayName)
                ) {
                    return i;
                } else if (
                    strict &&
                    format === 'dd' &&
                    this._minWeekdaysParse[i].test(weekdayName)
                ) {
                    return i;
                } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                    return i;
                }
            }
        }

        // MOMENTS

        function getSetDayOfWeek(input) {
            if (!this.isValid()) {
                return input != null ? this : NaN;
            }
            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
            if (input != null) {
                input = parseWeekday(input, this.localeData());
                return this.add(input - day, 'd');
            } else {
                return day;
            }
        }

        function getSetLocaleDayOfWeek(input) {
            if (!this.isValid()) {
                return input != null ? this : NaN;
            }
            var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
            return input == null ? weekday : this.add(input - weekday, 'd');
        }

        function getSetISODayOfWeek(input) {
            if (!this.isValid()) {
                return input != null ? this : NaN;
            }

            // behaves the same as moment#day except
            // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
            // as a setter, sunday should belong to the previous week.

            if (input != null) {
                var weekday = parseIsoWeekday(input, this.localeData());
                return this.day(this.day() % 7 ? weekday : weekday - 7);
            } else {
                return this.day() || 7;
            }
        }

        function weekdaysRegex(isStrict) {
            if (this._weekdaysParseExact) {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                    computeWeekdaysParse.call(this);
                }
                if (isStrict) {
                    return this._weekdaysStrictRegex;
                } else {
                    return this._weekdaysRegex;
                }
            } else {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                    this._weekdaysRegex = defaultWeekdaysRegex;
                }
                return this._weekdaysStrictRegex && isStrict
                    ? this._weekdaysStrictRegex
                    : this._weekdaysRegex;
            }
        }

        function weekdaysShortRegex(isStrict) {
            if (this._weekdaysParseExact) {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                    computeWeekdaysParse.call(this);
                }
                if (isStrict) {
                    return this._weekdaysShortStrictRegex;
                } else {
                    return this._weekdaysShortRegex;
                }
            } else {
                if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                    this._weekdaysShortRegex = defaultWeekdaysShortRegex;
                }
                return this._weekdaysShortStrictRegex && isStrict
                    ? this._weekdaysShortStrictRegex
                    : this._weekdaysShortRegex;
            }
        }

        function weekdaysMinRegex(isStrict) {
            if (this._weekdaysParseExact) {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                    computeWeekdaysParse.call(this);
                }
                if (isStrict) {
                    return this._weekdaysMinStrictRegex;
                } else {
                    return this._weekdaysMinRegex;
                }
            } else {
                if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                    this._weekdaysMinRegex = defaultWeekdaysMinRegex;
                }
                return this._weekdaysMinStrictRegex && isStrict
                    ? this._weekdaysMinStrictRegex
                    : this._weekdaysMinRegex;
            }
        }

        function computeWeekdaysParse() {
            function cmpLenRev(a, b) {
                return b.length - a.length;
            }

            var minPieces = [],
                shortPieces = [],
                longPieces = [],
                mixedPieces = [],
                i,
                mom,
                minp,
                shortp,
                longp;
            for (i = 0; i < 7; i++) {
                // make the regex if we don't have it already
                mom = createUTC([2000, 1]).day(i);
                minp = regexEscape(this.weekdaysMin(mom, ''));
                shortp = regexEscape(this.weekdaysShort(mom, ''));
                longp = regexEscape(this.weekdays(mom, ''));
                minPieces.push(minp);
                shortPieces.push(shortp);
                longPieces.push(longp);
                mixedPieces.push(minp);
                mixedPieces.push(shortp);
                mixedPieces.push(longp);
            }
            // Sorting makes sure if one weekday (or abbr) is a prefix of another it
            // will match the longer piece.
            minPieces.sort(cmpLenRev);
            shortPieces.sort(cmpLenRev);
            longPieces.sort(cmpLenRev);
            mixedPieces.sort(cmpLenRev);

            this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
            this._weekdaysShortRegex = this._weekdaysRegex;
            this._weekdaysMinRegex = this._weekdaysRegex;

            this._weekdaysStrictRegex = new RegExp(
                '^(' + longPieces.join('|') + ')',
                'i'
            );
            this._weekdaysShortStrictRegex = new RegExp(
                '^(' + shortPieces.join('|') + ')',
                'i'
            );
            this._weekdaysMinStrictRegex = new RegExp(
                '^(' + minPieces.join('|') + ')',
                'i'
            );
        }

        // FORMATTING

        function hFormat() {
            return this.hours() % 12 || 12;
        }

        function kFormat() {
            return this.hours() || 24;
        }

        addFormatToken('H', ['HH', 2], 0, 'hour');
        addFormatToken('h', ['hh', 2], 0, hFormat);
        addFormatToken('k', ['kk', 2], 0, kFormat);

        addFormatToken('hmm', 0, 0, function () {
            return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
        });

        addFormatToken('hmmss', 0, 0, function () {
            return (
                '' +
                hFormat.apply(this) +
                zeroFill(this.minutes(), 2) +
                zeroFill(this.seconds(), 2)
            );
        });

        addFormatToken('Hmm', 0, 0, function () {
            return '' + this.hours() + zeroFill(this.minutes(), 2);
        });

        addFormatToken('Hmmss', 0, 0, function () {
            return (
                '' +
                this.hours() +
                zeroFill(this.minutes(), 2) +
                zeroFill(this.seconds(), 2)
            );
        });

        function meridiem(token, lowercase) {
            addFormatToken(token, 0, 0, function () {
                return this.localeData().meridiem(
                    this.hours(),
                    this.minutes(),
                    lowercase
                );
            });
        }

        meridiem('a', true);
        meridiem('A', false);

        // ALIASES

        addUnitAlias('hour', 'h');

        // PRIORITY
        addUnitPriority('hour', 13);

        // PARSING

        function matchMeridiem(isStrict, locale) {
            return locale._meridiemParse;
        }

        addRegexToken('a', matchMeridiem);
        addRegexToken('A', matchMeridiem);
        addRegexToken('H', match1to2);
        addRegexToken('h', match1to2);
        addRegexToken('k', match1to2);
        addRegexToken('HH', match1to2, match2);
        addRegexToken('hh', match1to2, match2);
        addRegexToken('kk', match1to2, match2);

        addRegexToken('hmm', match3to4);
        addRegexToken('hmmss', match5to6);
        addRegexToken('Hmm', match3to4);
        addRegexToken('Hmmss', match5to6);

        addParseToken(['H', 'HH'], HOUR);
        addParseToken(['k', 'kk'], function (input, array, config) {
            var kInput = toInt(input);
            array[HOUR] = kInput === 24 ? 0 : kInput;
        });
        addParseToken(['a', 'A'], function (input, array, config) {
            config._isPm = config._locale.isPM(input);
            config._meridiem = input;
        });
        addParseToken(['h', 'hh'], function (input, array, config) {
            array[HOUR] = toInt(input);
            getParsingFlags(config).bigHour = true;
        });
        addParseToken('hmm', function (input, array, config) {
            var pos = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos));
            array[MINUTE] = toInt(input.substr(pos));
            getParsingFlags(config).bigHour = true;
        });
        addParseToken('hmmss', function (input, array, config) {
            var pos1 = input.length - 4,
                pos2 = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos1));
            array[MINUTE] = toInt(input.substr(pos1, 2));
            array[SECOND] = toInt(input.substr(pos2));
            getParsingFlags(config).bigHour = true;
        });
        addParseToken('Hmm', function (input, array, config) {
            var pos = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos));
            array[MINUTE] = toInt(input.substr(pos));
        });
        addParseToken('Hmmss', function (input, array, config) {
            var pos1 = input.length - 4,
                pos2 = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos1));
            array[MINUTE] = toInt(input.substr(pos1, 2));
            array[SECOND] = toInt(input.substr(pos2));
        });

        // LOCALES

        function localeIsPM(input) {
            // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
            // Using charAt should be more compatible.
            return (input + '').toLowerCase().charAt(0) === 'p';
        }

        var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
            // Setting the hour should keep the time, because the user explicitly
            // specified which hour they want. So trying to maintain the same hour (in
            // a new timezone) makes sense. Adding/subtracting hours does not follow
            // this rule.
            getSetHour = makeGetSet('Hours', true);

        function localeMeridiem(hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'pm' : 'PM';
            } else {
                return isLower ? 'am' : 'AM';
            }
        }

        var baseConfig = {
            calendar: defaultCalendar,
            longDateFormat: defaultLongDateFormat,
            invalidDate: defaultInvalidDate,
            ordinal: defaultOrdinal,
            dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
            relativeTime: defaultRelativeTime,

            months: defaultLocaleMonths,
            monthsShort: defaultLocaleMonthsShort,

            week: defaultLocaleWeek,

            weekdays: defaultLocaleWeekdays,
            weekdaysMin: defaultLocaleWeekdaysMin,
            weekdaysShort: defaultLocaleWeekdaysShort,

            meridiemParse: defaultLocaleMeridiemParse,
        };

        // internal storage for locale config files
        var locales = {},
            localeFamilies = {},
            globalLocale;

        function commonPrefix(arr1, arr2) {
            var i,
                minl = Math.min(arr1.length, arr2.length);
            for (i = 0; i < minl; i += 1) {
                if (arr1[i] !== arr2[i]) {
                    return i;
                }
            }
            return minl;
        }

        function normalizeLocale(key) {
            return key ? key.toLowerCase().replace('_', '-') : key;
        }

        // pick the locale from the array
        // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
        // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
        function chooseLocale(names) {
            var i = 0,
                j,
                next,
                locale,
                split;

            while (i < names.length) {
                split = normalizeLocale(names[i]).split('-');
                j = split.length;
                next = normalizeLocale(names[i + 1]);
                next = next ? next.split('-') : null;
                while (j > 0) {
                    locale = loadLocale(split.slice(0, j).join('-'));
                    if (locale) {
                        return locale;
                    }
                    if (
                        next &&
                        next.length >= j &&
                        commonPrefix(split, next) >= j - 1
                    ) {
                        //the next array item is better than a shallower substring of this one
                        break;
                    }
                    j--;
                }
                i++;
            }
            return globalLocale;
        }

        function isLocaleNameSane(name) {
            // Prevent names that look like filesystem paths, i.e contain '/' or '\'
            return name.match('^[^/\\\\]*$') != null;
        }

        function loadLocale(name) {
            var oldLocale = null,
                aliasedRequire;
            // TODO: Find a better way to register and load all the locales in Node
            if (
                locales[name] === undefined &&
                'object' !== 'undefined' &&
                module &&
                module.exports &&
                isLocaleNameSane(name)
            ) {
                try {
                    oldLocale = globalLocale._abbr;
                    aliasedRequire = commonjsRequire;
                    aliasedRequire('./locale/' + name);
                    getSetGlobalLocale(oldLocale);
                } catch (e) {
                    // mark as not found to avoid repeating expensive file require call causing high CPU
                    // when trying to find en-US, en_US, en-us for every format call
                    locales[name] = null; // null means not found
                }
            }
            return locales[name];
        }

        // This function will load locale and then set the global locale.  If
        // no arguments are passed in, it will simply return the current global
        // locale key.
        function getSetGlobalLocale(key, values) {
            var data;
            if (key) {
                if (isUndefined(values)) {
                    data = getLocale(key);
                } else {
                    data = defineLocale(key, values);
                }

                if (data) {
                    // moment.duration._locale = moment._locale = data;
                    globalLocale = data;
                } else {
                    if (typeof console !== 'undefined' && console.warn) {
                        //warn user if arguments are passed but the locale could not be set
                        console.warn(
                            'Locale ' + key + ' not found. Did you forget to load it?'
                        );
                    }
                }
            }

            return globalLocale._abbr;
        }

        function defineLocale(name, config) {
            if (config !== null) {
                var locale,
                    parentConfig = baseConfig;
                config.abbr = name;
                if (locales[name] != null) {
                    deprecateSimple(
                        'defineLocaleOverride',
                        'use moment.updateLocale(localeName, config) to change ' +
                            'an existing locale. moment.defineLocale(localeName, ' +
                            'config) should only be used for creating a new locale ' +
                            'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'
                    );
                    parentConfig = locales[name]._config;
                } else if (config.parentLocale != null) {
                    if (locales[config.parentLocale] != null) {
                        parentConfig = locales[config.parentLocale]._config;
                    } else {
                        locale = loadLocale(config.parentLocale);
                        if (locale != null) {
                            parentConfig = locale._config;
                        } else {
                            if (!localeFamilies[config.parentLocale]) {
                                localeFamilies[config.parentLocale] = [];
                            }
                            localeFamilies[config.parentLocale].push({
                                name: name,
                                config: config,
                            });
                            return null;
                        }
                    }
                }
                locales[name] = new Locale(mergeConfigs(parentConfig, config));

                if (localeFamilies[name]) {
                    localeFamilies[name].forEach(function (x) {
                        defineLocale(x.name, x.config);
                    });
                }

                // backwards compat for now: also set the locale
                // make sure we set the locale AFTER all child locales have been
                // created, so we won't end up with the child locale set.
                getSetGlobalLocale(name);

                return locales[name];
            } else {
                // useful for testing
                delete locales[name];
                return null;
            }
        }

        function updateLocale(name, config) {
            if (config != null) {
                var locale,
                    tmpLocale,
                    parentConfig = baseConfig;

                if (locales[name] != null && locales[name].parentLocale != null) {
                    // Update existing child locale in-place to avoid memory-leaks
                    locales[name].set(mergeConfigs(locales[name]._config, config));
                } else {
                    // MERGE
                    tmpLocale = loadLocale(name);
                    if (tmpLocale != null) {
                        parentConfig = tmpLocale._config;
                    }
                    config = mergeConfigs(parentConfig, config);
                    if (tmpLocale == null) {
                        // updateLocale is called for creating a new locale
                        // Set abbr so it will have a name (getters return
                        // undefined otherwise).
                        config.abbr = name;
                    }
                    locale = new Locale(config);
                    locale.parentLocale = locales[name];
                    locales[name] = locale;
                }

                // backwards compat for now: also set the locale
                getSetGlobalLocale(name);
            } else {
                // pass null for config to unupdate, useful for tests
                if (locales[name] != null) {
                    if (locales[name].parentLocale != null) {
                        locales[name] = locales[name].parentLocale;
                        if (name === getSetGlobalLocale()) {
                            getSetGlobalLocale(name);
                        }
                    } else if (locales[name] != null) {
                        delete locales[name];
                    }
                }
            }
            return locales[name];
        }

        // returns locale data
        function getLocale(key) {
            var locale;

            if (key && key._locale && key._locale._abbr) {
                key = key._locale._abbr;
            }

            if (!key) {
                return globalLocale;
            }

            if (!isArray(key)) {
                //short-circuit everything else
                locale = loadLocale(key);
                if (locale) {
                    return locale;
                }
                key = [key];
            }

            return chooseLocale(key);
        }

        function listLocales() {
            return keys(locales);
        }

        function checkOverflow(m) {
            var overflow,
                a = m._a;

            if (a && getParsingFlags(m).overflow === -2) {
                overflow =
                    a[MONTH] < 0 || a[MONTH] > 11
                        ? MONTH
                        : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
                        ? DATE
                        : a[HOUR] < 0 ||
                          a[HOUR] > 24 ||
                          (a[HOUR] === 24 &&
                              (a[MINUTE] !== 0 ||
                                  a[SECOND] !== 0 ||
                                  a[MILLISECOND] !== 0))
                        ? HOUR
                        : a[MINUTE] < 0 || a[MINUTE] > 59
                        ? MINUTE
                        : a[SECOND] < 0 || a[SECOND] > 59
                        ? SECOND
                        : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
                        ? MILLISECOND
                        : -1;

                if (
                    getParsingFlags(m)._overflowDayOfYear &&
                    (overflow < YEAR || overflow > DATE)
                ) {
                    overflow = DATE;
                }
                if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                    overflow = WEEK;
                }
                if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                    overflow = WEEKDAY;
                }

                getParsingFlags(m).overflow = overflow;
            }

            return m;
        }

        // iso 8601 regex
        // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
        var extendedIsoRegex =
                /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
            basicIsoRegex =
                /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
            tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
            isoDates = [
                ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
                ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
                ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
                ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
                ['YYYY-DDD', /\d{4}-\d{3}/],
                ['YYYY-MM', /\d{4}-\d\d/, false],
                ['YYYYYYMMDD', /[+-]\d{10}/],
                ['YYYYMMDD', /\d{8}/],
                ['GGGG[W]WWE', /\d{4}W\d{3}/],
                ['GGGG[W]WW', /\d{4}W\d{2}/, false],
                ['YYYYDDD', /\d{7}/],
                ['YYYYMM', /\d{6}/, false],
                ['YYYY', /\d{4}/, false],
            ],
            // iso time formats and regexes
            isoTimes = [
                ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
                ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
                ['HH:mm:ss', /\d\d:\d\d:\d\d/],
                ['HH:mm', /\d\d:\d\d/],
                ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
                ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
                ['HHmmss', /\d\d\d\d\d\d/],
                ['HHmm', /\d\d\d\d/],
                ['HH', /\d\d/],
            ],
            aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
            // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
            rfc2822 =
                /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
            obsOffsets = {
                UT: 0,
                GMT: 0,
                EDT: -4 * 60,
                EST: -5 * 60,
                CDT: -5 * 60,
                CST: -6 * 60,
                MDT: -6 * 60,
                MST: -7 * 60,
                PDT: -7 * 60,
                PST: -8 * 60,
            };

        // date from iso format
        function configFromISO(config) {
            var i,
                l,
                string = config._i,
                match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
                allowTime,
                dateFormat,
                timeFormat,
                tzFormat,
                isoDatesLen = isoDates.length,
                isoTimesLen = isoTimes.length;

            if (match) {
                getParsingFlags(config).iso = true;
                for (i = 0, l = isoDatesLen; i < l; i++) {
                    if (isoDates[i][1].exec(match[1])) {
                        dateFormat = isoDates[i][0];
                        allowTime = isoDates[i][2] !== false;
                        break;
                    }
                }
                if (dateFormat == null) {
                    config._isValid = false;
                    return;
                }
                if (match[3]) {
                    for (i = 0, l = isoTimesLen; i < l; i++) {
                        if (isoTimes[i][1].exec(match[3])) {
                            // match[2] should be 'T' or space
                            timeFormat = (match[2] || ' ') + isoTimes[i][0];
                            break;
                        }
                    }
                    if (timeFormat == null) {
                        config._isValid = false;
                        return;
                    }
                }
                if (!allowTime && timeFormat != null) {
                    config._isValid = false;
                    return;
                }
                if (match[4]) {
                    if (tzRegex.exec(match[4])) {
                        tzFormat = 'Z';
                    } else {
                        config._isValid = false;
                        return;
                    }
                }
                config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
                configFromStringAndFormat(config);
            } else {
                config._isValid = false;
            }
        }

        function extractFromRFC2822Strings(
            yearStr,
            monthStr,
            dayStr,
            hourStr,
            minuteStr,
            secondStr
        ) {
            var result = [
                untruncateYear(yearStr),
                defaultLocaleMonthsShort.indexOf(monthStr),
                parseInt(dayStr, 10),
                parseInt(hourStr, 10),
                parseInt(minuteStr, 10),
            ];

            if (secondStr) {
                result.push(parseInt(secondStr, 10));
            }

            return result;
        }

        function untruncateYear(yearStr) {
            var year = parseInt(yearStr, 10);
            if (year <= 49) {
                return 2000 + year;
            } else if (year <= 999) {
                return 1900 + year;
            }
            return year;
        }

        function preprocessRFC2822(s) {
            // Remove comments and folding whitespace and replace multiple-spaces with a single space
            return s
                .replace(/\([^)]*\)|[\n\t]/g, ' ')
                .replace(/(\s\s+)/g, ' ')
                .replace(/^\s\s*/, '')
                .replace(/\s\s*$/, '');
        }

        function checkWeekday(weekdayStr, parsedInput, config) {
            if (weekdayStr) {
                // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
                var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                    weekdayActual = new Date(
                        parsedInput[0],
                        parsedInput[1],
                        parsedInput[2]
                    ).getDay();
                if (weekdayProvided !== weekdayActual) {
                    getParsingFlags(config).weekdayMismatch = true;
                    config._isValid = false;
                    return false;
                }
            }
            return true;
        }

        function calculateOffset(obsOffset, militaryOffset, numOffset) {
            if (obsOffset) {
                return obsOffsets[obsOffset];
            } else if (militaryOffset) {
                // the only allowed military tz is Z
                return 0;
            } else {
                var hm = parseInt(numOffset, 10),
                    m = hm % 100,
                    h = (hm - m) / 100;
                return h * 60 + m;
            }
        }

        // date and time from ref 2822 format
        function configFromRFC2822(config) {
            var match = rfc2822.exec(preprocessRFC2822(config._i)),
                parsedArray;
            if (match) {
                parsedArray = extractFromRFC2822Strings(
                    match[4],
                    match[3],
                    match[2],
                    match[5],
                    match[6],
                    match[7]
                );
                if (!checkWeekday(match[1], parsedArray, config)) {
                    return;
                }

                config._a = parsedArray;
                config._tzm = calculateOffset(match[8], match[9], match[10]);

                config._d = createUTCDate.apply(null, config._a);
                config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

                getParsingFlags(config).rfc2822 = true;
            } else {
                config._isValid = false;
            }
        }

        // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
        function configFromString(config) {
            var matched = aspNetJsonRegex.exec(config._i);
            if (matched !== null) {
                config._d = new Date(+matched[1]);
                return;
            }

            configFromISO(config);
            if (config._isValid === false) {
                delete config._isValid;
            } else {
                return;
            }

            configFromRFC2822(config);
            if (config._isValid === false) {
                delete config._isValid;
            } else {
                return;
            }

            if (config._strict) {
                config._isValid = false;
            } else {
                // Final attempt, use Input Fallback
                hooks.createFromInputFallback(config);
            }
        }

        hooks.createFromInputFallback = deprecate(
            'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
                'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
                'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.',
            function (config) {
                config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
            }
        );

        // Pick the first defined of two or three arguments.
        function defaults(a, b, c) {
            if (a != null) {
                return a;
            }
            if (b != null) {
                return b;
            }
            return c;
        }

        function currentDateArray(config) {
            // hooks is actually the exported moment object
            var nowValue = new Date(hooks.now());
            if (config._useUTC) {
                return [
                    nowValue.getUTCFullYear(),
                    nowValue.getUTCMonth(),
                    nowValue.getUTCDate(),
                ];
            }
            return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
        }

        // convert an array to a date.
        // the array should mirror the parameters below
        // note: all values past the year are optional and will default to the lowest possible value.
        // [year, month, day , hour, minute, second, millisecond]
        function configFromArray(config) {
            var i,
                date,
                input = [],
                currentDate,
                expectedWeekday,
                yearToUse;

            if (config._d) {
                return;
            }

            currentDate = currentDateArray(config);

            //compute day of the year from weeks and weekdays
            if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
                dayOfYearFromWeekInfo(config);
            }

            //if the day of the year is set, figure out what it is
            if (config._dayOfYear != null) {
                yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

                if (
                    config._dayOfYear > daysInYear(yearToUse) ||
                    config._dayOfYear === 0
                ) {
                    getParsingFlags(config)._overflowDayOfYear = true;
                }

                date = createUTCDate(yearToUse, 0, config._dayOfYear);
                config._a[MONTH] = date.getUTCMonth();
                config._a[DATE] = date.getUTCDate();
            }

            // Default to current date.
            // * if no year, month, day of month are given, default to today
            // * if day of month is given, default month and year
            // * if month is given, default only year
            // * if year is given, don't default anything
            for (i = 0; i < 3 && config._a[i] == null; ++i) {
                config._a[i] = input[i] = currentDate[i];
            }

            // Zero out whatever was not defaulted, including time
            for (; i < 7; i++) {
                config._a[i] = input[i] =
                    config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
            }

            // Check for 24:00:00.000
            if (
                config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0
            ) {
                config._nextDay = true;
                config._a[HOUR] = 0;
            }

            config._d = (config._useUTC ? createUTCDate : createDate).apply(
                null,
                input
            );
            expectedWeekday = config._useUTC
                ? config._d.getUTCDay()
                : config._d.getDay();

            // Apply timezone offset from input. The actual utcOffset can be changed
            // with parseZone.
            if (config._tzm != null) {
                config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
            }

            if (config._nextDay) {
                config._a[HOUR] = 24;
            }

            // check for mismatching day of week
            if (
                config._w &&
                typeof config._w.d !== 'undefined' &&
                config._w.d !== expectedWeekday
            ) {
                getParsingFlags(config).weekdayMismatch = true;
            }
        }

        function dayOfYearFromWeekInfo(config) {
            var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;

            w = config._w;
            if (w.GG != null || w.W != null || w.E != null) {
                dow = 1;
                doy = 4;

                // TODO: We need to take the current isoWeekYear, but that depends on
                // how we interpret now (local, utc, fixed offset). So create
                // a now version of current config (take local/utc/offset flags, and
                // create now).
                weekYear = defaults(
                    w.GG,
                    config._a[YEAR],
                    weekOfYear(createLocal(), 1, 4).year
                );
                week = defaults(w.W, 1);
                weekday = defaults(w.E, 1);
                if (weekday < 1 || weekday > 7) {
                    weekdayOverflow = true;
                }
            } else {
                dow = config._locale._week.dow;
                doy = config._locale._week.doy;

                curWeek = weekOfYear(createLocal(), dow, doy);

                weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

                // Default to current week.
                week = defaults(w.w, curWeek.week);

                if (w.d != null) {
                    // weekday -- low day numbers are considered next week
                    weekday = w.d;
                    if (weekday < 0 || weekday > 6) {
                        weekdayOverflow = true;
                    }
                } else if (w.e != null) {
                    // local weekday -- counting starts from beginning of week
                    weekday = w.e + dow;
                    if (w.e < 0 || w.e > 6) {
                        weekdayOverflow = true;
                    }
                } else {
                    // default to beginning of week
                    weekday = dow;
                }
            }
            if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
                getParsingFlags(config)._overflowWeeks = true;
            } else if (weekdayOverflow != null) {
                getParsingFlags(config)._overflowWeekday = true;
            } else {
                temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
                config._a[YEAR] = temp.year;
                config._dayOfYear = temp.dayOfYear;
            }
        }

        // constant that refers to the ISO standard
        hooks.ISO_8601 = function () {};

        // constant that refers to the RFC 2822 form
        hooks.RFC_2822 = function () {};

        // date from string and format string
        function configFromStringAndFormat(config) {
            // TODO: Move this to another part of the creation flow to prevent circular deps
            if (config._f === hooks.ISO_8601) {
                configFromISO(config);
                return;
            }
            if (config._f === hooks.RFC_2822) {
                configFromRFC2822(config);
                return;
            }
            config._a = [];
            getParsingFlags(config).empty = true;

            // This array is used to make a Date, either with `new Date` or `Date.UTC`
            var string = '' + config._i,
                i,
                parsedInput,
                tokens,
                token,
                skipped,
                stringLength = string.length,
                totalParsedInputLength = 0,
                era,
                tokenLen;

            tokens =
                expandFormat(config._f, config._locale).match(formattingTokens) || [];
            tokenLen = tokens.length;
            for (i = 0; i < tokenLen; i++) {
                token = tokens[i];
                parsedInput = (string.match(getParseRegexForToken(token, config)) ||
                    [])[0];
                if (parsedInput) {
                    skipped = string.substr(0, string.indexOf(parsedInput));
                    if (skipped.length > 0) {
                        getParsingFlags(config).unusedInput.push(skipped);
                    }
                    string = string.slice(
                        string.indexOf(parsedInput) + parsedInput.length
                    );
                    totalParsedInputLength += parsedInput.length;
                }
                // don't parse if it's not a known token
                if (formatTokenFunctions[token]) {
                    if (parsedInput) {
                        getParsingFlags(config).empty = false;
                    } else {
                        getParsingFlags(config).unusedTokens.push(token);
                    }
                    addTimeToArrayFromToken(token, parsedInput, config);
                } else if (config._strict && !parsedInput) {
                    getParsingFlags(config).unusedTokens.push(token);
                }
            }

            // add remaining unparsed input length to the string
            getParsingFlags(config).charsLeftOver =
                stringLength - totalParsedInputLength;
            if (string.length > 0) {
                getParsingFlags(config).unusedInput.push(string);
            }

            // clear _12h flag if hour is <= 12
            if (
                config._a[HOUR] <= 12 &&
                getParsingFlags(config).bigHour === true &&
                config._a[HOUR] > 0
            ) {
                getParsingFlags(config).bigHour = undefined;
            }

            getParsingFlags(config).parsedDateParts = config._a.slice(0);
            getParsingFlags(config).meridiem = config._meridiem;
            // handle meridiem
            config._a[HOUR] = meridiemFixWrap(
                config._locale,
                config._a[HOUR],
                config._meridiem
            );

            // handle era
            era = getParsingFlags(config).era;
            if (era !== null) {
                config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
            }

            configFromArray(config);
            checkOverflow(config);
        }

        function meridiemFixWrap(locale, hour, meridiem) {
            var isPm;

            if (meridiem == null) {
                // nothing to do
                return hour;
            }
            if (locale.meridiemHour != null) {
                return locale.meridiemHour(hour, meridiem);
            } else if (locale.isPM != null) {
                // Fallback
                isPm = locale.isPM(meridiem);
                if (isPm && hour < 12) {
                    hour += 12;
                }
                if (!isPm && hour === 12) {
                    hour = 0;
                }
                return hour;
            } else {
                // this is not supposed to happen
                return hour;
            }
        }

        // date from string and array of format strings
        function configFromStringAndArray(config) {
            var tempConfig,
                bestMoment,
                scoreToBeat,
                i,
                currentScore,
                validFormatFound,
                bestFormatIsValid = false,
                configfLen = config._f.length;

            if (configfLen === 0) {
                getParsingFlags(config).invalidFormat = true;
                config._d = new Date(NaN);
                return;
            }

            for (i = 0; i < configfLen; i++) {
                currentScore = 0;
                validFormatFound = false;
                tempConfig = copyConfig({}, config);
                if (config._useUTC != null) {
                    tempConfig._useUTC = config._useUTC;
                }
                tempConfig._f = config._f[i];
                configFromStringAndFormat(tempConfig);

                if (isValid(tempConfig)) {
                    validFormatFound = true;
                }

                // if there is any input that was not parsed add a penalty for that format
                currentScore += getParsingFlags(tempConfig).charsLeftOver;

                //or tokens
                currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

                getParsingFlags(tempConfig).score = currentScore;

                if (!bestFormatIsValid) {
                    if (
                        scoreToBeat == null ||
                        currentScore < scoreToBeat ||
                        validFormatFound
                    ) {
                        scoreToBeat = currentScore;
                        bestMoment = tempConfig;
                        if (validFormatFound) {
                            bestFormatIsValid = true;
                        }
                    }
                } else {
                    if (currentScore < scoreToBeat) {
                        scoreToBeat = currentScore;
                        bestMoment = tempConfig;
                    }
                }
            }

            extend(config, bestMoment || tempConfig);
        }

        function configFromObject(config) {
            if (config._d) {
                return;
            }

            var i = normalizeObjectUnits(config._i),
                dayOrDate = i.day === undefined ? i.date : i.day;
            config._a = map(
                [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
                function (obj) {
                    return obj && parseInt(obj, 10);
                }
            );

            configFromArray(config);
        }

        function createFromConfig(config) {
            var res = new Moment(checkOverflow(prepareConfig(config)));
            if (res._nextDay) {
                // Adding is smart enough around DST
                res.add(1, 'd');
                res._nextDay = undefined;
            }

            return res;
        }

        function prepareConfig(config) {
            var input = config._i,
                format = config._f;

            config._locale = config._locale || getLocale(config._l);

            if (input === null || (format === undefined && input === '')) {
                return createInvalid({ nullInput: true });
            }

            if (typeof input === 'string') {
                config._i = input = config._locale.preparse(input);
            }

            if (isMoment(input)) {
                return new Moment(checkOverflow(input));
            } else if (isDate(input)) {
                config._d = input;
            } else if (isArray(format)) {
                configFromStringAndArray(config);
            } else if (format) {
                configFromStringAndFormat(config);
            } else {
                configFromInput(config);
            }

            if (!isValid(config)) {
                config._d = null;
            }

            return config;
        }

        function configFromInput(config) {
            var input = config._i;
            if (isUndefined(input)) {
                config._d = new Date(hooks.now());
            } else if (isDate(input)) {
                config._d = new Date(input.valueOf());
            } else if (typeof input === 'string') {
                configFromString(config);
            } else if (isArray(input)) {
                config._a = map(input.slice(0), function (obj) {
                    return parseInt(obj, 10);
                });
                configFromArray(config);
            } else if (isObject(input)) {
                configFromObject(config);
            } else if (isNumber(input)) {
                // from milliseconds
                config._d = new Date(input);
            } else {
                hooks.createFromInputFallback(config);
            }
        }

        function createLocalOrUTC(input, format, locale, strict, isUTC) {
            var c = {};

            if (format === true || format === false) {
                strict = format;
                format = undefined;
            }

            if (locale === true || locale === false) {
                strict = locale;
                locale = undefined;
            }

            if (
                (isObject(input) && isObjectEmpty(input)) ||
                (isArray(input) && input.length === 0)
            ) {
                input = undefined;
            }
            // object construction must be done this way.
            // https://github.com/moment/moment/issues/1423
            c._isAMomentObject = true;
            c._useUTC = c._isUTC = isUTC;
            c._l = locale;
            c._i = input;
            c._f = format;
            c._strict = strict;

            return createFromConfig(c);
        }

        function createLocal(input, format, locale, strict) {
            return createLocalOrUTC(input, format, locale, strict, false);
        }

        var prototypeMin = deprecate(
                'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
                function () {
                    var other = createLocal.apply(null, arguments);
                    if (this.isValid() && other.isValid()) {
                        return other < this ? this : other;
                    } else {
                        return createInvalid();
                    }
                }
            ),
            prototypeMax = deprecate(
                'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
                function () {
                    var other = createLocal.apply(null, arguments);
                    if (this.isValid() && other.isValid()) {
                        return other > this ? this : other;
                    } else {
                        return createInvalid();
                    }
                }
            );

        // Pick a moment m from moments so that m[fn](other) is true for all
        // other. This relies on the function fn to be transitive.
        //
        // moments should either be an array of moment objects or an array, whose
        // first element is an array of moment objects.
        function pickBy(fn, moments) {
            var res, i;
            if (moments.length === 1 && isArray(moments[0])) {
                moments = moments[0];
            }
            if (!moments.length) {
                return createLocal();
            }
            res = moments[0];
            for (i = 1; i < moments.length; ++i) {
                if (!moments[i].isValid() || moments[i][fn](res)) {
                    res = moments[i];
                }
            }
            return res;
        }

        // TODO: Use [].sort instead?
        function min() {
            var args = [].slice.call(arguments, 0);

            return pickBy('isBefore', args);
        }

        function max() {
            var args = [].slice.call(arguments, 0);

            return pickBy('isAfter', args);
        }

        var now = function () {
            return Date.now ? Date.now() : +new Date();
        };

        var ordering = [
            'year',
            'quarter',
            'month',
            'week',
            'day',
            'hour',
            'minute',
            'second',
            'millisecond',
        ];

        function isDurationValid(m) {
            var key,
                unitHasDecimal = false,
                i,
                orderLen = ordering.length;
            for (key in m) {
                if (
                    hasOwnProp(m, key) &&
                    !(
                        indexOf.call(ordering, key) !== -1 &&
                        (m[key] == null || !isNaN(m[key]))
                    )
                ) {
                    return false;
                }
            }

            for (i = 0; i < orderLen; ++i) {
                if (m[ordering[i]]) {
                    if (unitHasDecimal) {
                        return false; // only allow non-integers for smallest unit
                    }
                    if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                        unitHasDecimal = true;
                    }
                }
            }

            return true;
        }

        function isValid$1() {
            return this._isValid;
        }

        function createInvalid$1() {
            return createDuration(NaN);
        }

        function Duration(duration) {
            var normalizedInput = normalizeObjectUnits(duration),
                years = normalizedInput.year || 0,
                quarters = normalizedInput.quarter || 0,
                months = normalizedInput.month || 0,
                weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
                days = normalizedInput.day || 0,
                hours = normalizedInput.hour || 0,
                minutes = normalizedInput.minute || 0,
                seconds = normalizedInput.second || 0,
                milliseconds = normalizedInput.millisecond || 0;

            this._isValid = isDurationValid(normalizedInput);

            // representation for dateAddRemove
            this._milliseconds =
                +milliseconds +
                seconds * 1e3 + // 1000
                minutes * 6e4 + // 1000 * 60
                hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
            // Because of dateAddRemove treats 24 hours as different from a
            // day when working around DST, we need to store them separately
            this._days = +days + weeks * 7;
            // It is impossible to translate months into days without knowing
            // which months you are are talking about, so we have to store
            // it separately.
            this._months = +months + quarters * 3 + years * 12;

            this._data = {};

            this._locale = getLocale();

            this._bubble();
        }

        function isDuration(obj) {
            return obj instanceof Duration;
        }

        function absRound(number) {
            if (number < 0) {
                return Math.round(-1 * number) * -1;
            } else {
                return Math.round(number);
            }
        }

        // compare two arrays, return the number of differences
        function compareArrays(array1, array2, dontConvert) {
            var len = Math.min(array1.length, array2.length),
                lengthDiff = Math.abs(array1.length - array2.length),
                diffs = 0,
                i;
            for (i = 0; i < len; i++) {
                if (
                    (dontConvert && array1[i] !== array2[i]) ||
                    (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
                ) {
                    diffs++;
                }
            }
            return diffs + lengthDiff;
        }

        // FORMATTING

        function offset(token, separator) {
            addFormatToken(token, 0, 0, function () {
                var offset = this.utcOffset(),
                    sign = '+';
                if (offset < 0) {
                    offset = -offset;
                    sign = '-';
                }
                return (
                    sign +
                    zeroFill(~~(offset / 60), 2) +
                    separator +
                    zeroFill(~~offset % 60, 2)
                );
            });
        }

        offset('Z', ':');
        offset('ZZ', '');

        // PARSING

        addRegexToken('Z', matchShortOffset);
        addRegexToken('ZZ', matchShortOffset);
        addParseToken(['Z', 'ZZ'], function (input, array, config) {
            config._useUTC = true;
            config._tzm = offsetFromString(matchShortOffset, input);
        });

        // HELPERS

        // timezone chunker
        // '+10:00' > ['10',  '00']
        // '-1530'  > ['-15', '30']
        var chunkOffset = /([\+\-]|\d\d)/gi;

        function offsetFromString(matcher, string) {
            var matches = (string || '').match(matcher),
                chunk,
                parts,
                minutes;

            if (matches === null) {
                return null;
            }

            chunk = matches[matches.length - 1] || [];
            parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
            minutes = +(parts[1] * 60) + toInt(parts[2]);

            return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
        }

        // Return a moment from input, that is local/utc/zone equivalent to model.
        function cloneWithOffset(input, model) {
            var res, diff;
            if (model._isUTC) {
                res = model.clone();
                diff =
                    (isMoment(input) || isDate(input)
                        ? input.valueOf()
                        : createLocal(input).valueOf()) - res.valueOf();
                // Use low-level api, because this fn is low-level api.
                res._d.setTime(res._d.valueOf() + diff);
                hooks.updateOffset(res, false);
                return res;
            } else {
                return createLocal(input).local();
            }
        }

        function getDateOffset(m) {
            // On Firefox.24 Date#getTimezoneOffset returns a floating point.
            // https://github.com/moment/moment/pull/1871
            return -Math.round(m._d.getTimezoneOffset());
        }

        // HOOKS

        // This function will be called whenever a moment is mutated.
        // It is intended to keep the offset in sync with the timezone.
        hooks.updateOffset = function () {};

        // MOMENTS

        // keepLocalTime = true means only change the timezone, without
        // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
        // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
        // +0200, so we adjust the time as needed, to be valid.
        //
        // Keeping the time actually adds/subtracts (one hour)
        // from the actual represented time. That is why we call updateOffset
        // a second time. In case it wants us to change the offset again
        // _changeInProgress == true case, then we have to adjust, because
        // there is no such time in the given timezone.
        function getSetOffset(input, keepLocalTime, keepMinutes) {
            var offset = this._offset || 0,
                localAdjust;
            if (!this.isValid()) {
                return input != null ? this : NaN;
            }
            if (input != null) {
                if (typeof input === 'string') {
                    input = offsetFromString(matchShortOffset, input);
                    if (input === null) {
                        return this;
                    }
                } else if (Math.abs(input) < 16 && !keepMinutes) {
                    input = input * 60;
                }
                if (!this._isUTC && keepLocalTime) {
                    localAdjust = getDateOffset(this);
                }
                this._offset = input;
                this._isUTC = true;
                if (localAdjust != null) {
                    this.add(localAdjust, 'm');
                }
                if (offset !== input) {
                    if (!keepLocalTime || this._changeInProgress) {
                        addSubtract(
                            this,
                            createDuration(input - offset, 'm'),
                            1,
                            false
                        );
                    } else if (!this._changeInProgress) {
                        this._changeInProgress = true;
                        hooks.updateOffset(this, true);
                        this._changeInProgress = null;
                    }
                }
                return this;
            } else {
                return this._isUTC ? offset : getDateOffset(this);
            }
        }

        function getSetZone(input, keepLocalTime) {
            if (input != null) {
                if (typeof input !== 'string') {
                    input = -input;
                }

                this.utcOffset(input, keepLocalTime);

                return this;
            } else {
                return -this.utcOffset();
            }
        }

        function setOffsetToUTC(keepLocalTime) {
            return this.utcOffset(0, keepLocalTime);
        }

        function setOffsetToLocal(keepLocalTime) {
            if (this._isUTC) {
                this.utcOffset(0, keepLocalTime);
                this._isUTC = false;

                if (keepLocalTime) {
                    this.subtract(getDateOffset(this), 'm');
                }
            }
            return this;
        }

        function setOffsetToParsedOffset() {
            if (this._tzm != null) {
                this.utcOffset(this._tzm, false, true);
            } else if (typeof this._i === 'string') {
                var tZone = offsetFromString(matchOffset, this._i);
                if (tZone != null) {
                    this.utcOffset(tZone);
                } else {
                    this.utcOffset(0, true);
                }
            }
            return this;
        }

        function hasAlignedHourOffset(input) {
            if (!this.isValid()) {
                return false;
            }
            input = input ? createLocal(input).utcOffset() : 0;

            return (this.utcOffset() - input) % 60 === 0;
        }

        function isDaylightSavingTime() {
            return (
                this.utcOffset() > this.clone().month(0).utcOffset() ||
                this.utcOffset() > this.clone().month(5).utcOffset()
            );
        }

        function isDaylightSavingTimeShifted() {
            if (!isUndefined(this._isDSTShifted)) {
                return this._isDSTShifted;
            }

            var c = {},
                other;

            copyConfig(c, this);
            c = prepareConfig(c);

            if (c._a) {
                other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
                this._isDSTShifted =
                    this.isValid() && compareArrays(c._a, other.toArray()) > 0;
            } else {
                this._isDSTShifted = false;
            }

            return this._isDSTShifted;
        }

        function isLocal() {
            return this.isValid() ? !this._isUTC : false;
        }

        function isUtcOffset() {
            return this.isValid() ? this._isUTC : false;
        }

        function isUtc() {
            return this.isValid() ? this._isUTC && this._offset === 0 : false;
        }

        // ASP.NET json date format regex
        var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
            // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
            // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
            // and further modified to allow for strings containing both week and day
            isoRegex =
                /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

        function createDuration(input, key) {
            var duration = input,
                // matching against regexp is expensive, do it on demand
                match = null,
                sign,
                ret,
                diffRes;

            if (isDuration(input)) {
                duration = {
                    ms: input._milliseconds,
                    d: input._days,
                    M: input._months,
                };
            } else if (isNumber(input) || !isNaN(+input)) {
                duration = {};
                if (key) {
                    duration[key] = +input;
                } else {
                    duration.milliseconds = +input;
                }
            } else if ((match = aspNetRegex.exec(input))) {
                sign = match[1] === '-' ? -1 : 1;
                duration = {
                    y: 0,
                    d: toInt(match[DATE]) * sign,
                    h: toInt(match[HOUR]) * sign,
                    m: toInt(match[MINUTE]) * sign,
                    s: toInt(match[SECOND]) * sign,
                    ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
                };
            } else if ((match = isoRegex.exec(input))) {
                sign = match[1] === '-' ? -1 : 1;
                duration = {
                    y: parseIso(match[2], sign),
                    M: parseIso(match[3], sign),
                    w: parseIso(match[4], sign),
                    d: parseIso(match[5], sign),
                    h: parseIso(match[6], sign),
                    m: parseIso(match[7], sign),
                    s: parseIso(match[8], sign),
                };
            } else if (duration == null) {
                // checks for null or undefined
                duration = {};
            } else if (
                typeof duration === 'object' &&
                ('from' in duration || 'to' in duration)
            ) {
                diffRes = momentsDifference(
                    createLocal(duration.from),
                    createLocal(duration.to)
                );

                duration = {};
                duration.ms = diffRes.milliseconds;
                duration.M = diffRes.months;
            }

            ret = new Duration(duration);

            if (isDuration(input) && hasOwnProp(input, '_locale')) {
                ret._locale = input._locale;
            }

            if (isDuration(input) && hasOwnProp(input, '_isValid')) {
                ret._isValid = input._isValid;
            }

            return ret;
        }

        createDuration.fn = Duration.prototype;
        createDuration.invalid = createInvalid$1;

        function parseIso(inp, sign) {
            // We'd normally use ~~inp for this, but unfortunately it also
            // converts floats to ints.
            // inp may be undefined, so careful calling replace on it.
            var res = inp && parseFloat(inp.replace(',', '.'));
            // apply sign while we're at it
            return (isNaN(res) ? 0 : res) * sign;
        }

        function positiveMomentsDifference(base, other) {
            var res = {};

            res.months =
                other.month() - base.month() + (other.year() - base.year()) * 12;
            if (base.clone().add(res.months, 'M').isAfter(other)) {
                --res.months;
            }

            res.milliseconds = +other - +base.clone().add(res.months, 'M');

            return res;
        }

        function momentsDifference(base, other) {
            var res;
            if (!(base.isValid() && other.isValid())) {
                return { milliseconds: 0, months: 0 };
            }

            other = cloneWithOffset(other, base);
            if (base.isBefore(other)) {
                res = positiveMomentsDifference(base, other);
            } else {
                res = positiveMomentsDifference(other, base);
                res.milliseconds = -res.milliseconds;
                res.months = -res.months;
            }

            return res;
        }

        // TODO: remove 'name' arg after deprecation is removed
        function createAdder(direction, name) {
            return function (val, period) {
                var dur, tmp;
                //invert the arguments, but complain about it
                if (period !== null && !isNaN(+period)) {
                    deprecateSimple(
                        name,
                        'moment().' +
                            name +
                            '(period, number) is deprecated. Please use moment().' +
                            name +
                            '(number, period). ' +
                            'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'
                    );
                    tmp = val;
                    val = period;
                    period = tmp;
                }

                dur = createDuration(val, period);
                addSubtract(this, dur, direction);
                return this;
            };
        }

        function addSubtract(mom, duration, isAdding, updateOffset) {
            var milliseconds = duration._milliseconds,
                days = absRound(duration._days),
                months = absRound(duration._months);

            if (!mom.isValid()) {
                // No op
                return;
            }

            updateOffset = updateOffset == null ? true : updateOffset;

            if (months) {
                setMonth(mom, get(mom, 'Month') + months * isAdding);
            }
            if (days) {
                set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
            }
            if (milliseconds) {
                mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
            }
            if (updateOffset) {
                hooks.updateOffset(mom, days || months);
            }
        }

        var add = createAdder(1, 'add'),
            subtract = createAdder(-1, 'subtract');

        function isString(input) {
            return typeof input === 'string' || input instanceof String;
        }

        // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
        function isMomentInput(input) {
            return (
                isMoment(input) ||
                isDate(input) ||
                isString(input) ||
                isNumber(input) ||
                isNumberOrStringArray(input) ||
                isMomentInputObject(input) ||
                input === null ||
                input === undefined
            );
        }

        function isMomentInputObject(input) {
            var objectTest = isObject(input) && !isObjectEmpty(input),
                propertyTest = false,
                properties = [
                    'years',
                    'year',
                    'y',
                    'months',
                    'month',
                    'M',
                    'days',
                    'day',
                    'd',
                    'dates',
                    'date',
                    'D',
                    'hours',
                    'hour',
                    'h',
                    'minutes',
                    'minute',
                    'm',
                    'seconds',
                    'second',
                    's',
                    'milliseconds',
                    'millisecond',
                    'ms',
                ],
                i,
                property,
                propertyLen = properties.length;

            for (i = 0; i < propertyLen; i += 1) {
                property = properties[i];
                propertyTest = propertyTest || hasOwnProp(input, property);
            }

            return objectTest && propertyTest;
        }

        function isNumberOrStringArray(input) {
            var arrayTest = isArray(input),
                dataTypeTest = false;
            if (arrayTest) {
                dataTypeTest =
                    input.filter(function (item) {
                        return !isNumber(item) && isString(input);
                    }).length === 0;
            }
            return arrayTest && dataTypeTest;
        }

        function isCalendarSpec(input) {
            var objectTest = isObject(input) && !isObjectEmpty(input),
                propertyTest = false,
                properties = [
                    'sameDay',
                    'nextDay',
                    'lastDay',
                    'nextWeek',
                    'lastWeek',
                    'sameElse',
                ],
                i,
                property;

            for (i = 0; i < properties.length; i += 1) {
                property = properties[i];
                propertyTest = propertyTest || hasOwnProp(input, property);
            }

            return objectTest && propertyTest;
        }

        function getCalendarFormat(myMoment, now) {
            var diff = myMoment.diff(now, 'days', true);
            return diff < -6
                ? 'sameElse'
                : diff < -1
                ? 'lastWeek'
                : diff < 0
                ? 'lastDay'
                : diff < 1
                ? 'sameDay'
                : diff < 2
                ? 'nextDay'
                : diff < 7
                ? 'nextWeek'
                : 'sameElse';
        }

        function calendar$1(time, formats) {
            // Support for single parameter, formats only overload to the calendar function
            if (arguments.length === 1) {
                if (!arguments[0]) {
                    time = undefined;
                    formats = undefined;
                } else if (isMomentInput(arguments[0])) {
                    time = arguments[0];
                    formats = undefined;
                } else if (isCalendarSpec(arguments[0])) {
                    formats = arguments[0];
                    time = undefined;
                }
            }
            // We want to compare the start of today, vs this.
            // Getting start-of-today depends on whether we're local/utc/offset or not.
            var now = time || createLocal(),
                sod = cloneWithOffset(now, this).startOf('day'),
                format = hooks.calendarFormat(this, sod) || 'sameElse',
                output =
                    formats &&
                    (isFunction(formats[format])
                        ? formats[format].call(this, now)
                        : formats[format]);

            return this.format(
                output || this.localeData().calendar(format, this, createLocal(now))
            );
        }

        function clone() {
            return new Moment(this);
        }

        function isAfter(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input);
            if (!(this.isValid() && localInput.isValid())) {
                return false;
            }
            units = normalizeUnits(units) || 'millisecond';
            if (units === 'millisecond') {
                return this.valueOf() > localInput.valueOf();
            } else {
                return localInput.valueOf() < this.clone().startOf(units).valueOf();
            }
        }

        function isBefore(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input);
            if (!(this.isValid() && localInput.isValid())) {
                return false;
            }
            units = normalizeUnits(units) || 'millisecond';
            if (units === 'millisecond') {
                return this.valueOf() < localInput.valueOf();
            } else {
                return this.clone().endOf(units).valueOf() < localInput.valueOf();
            }
        }

        function isBetween(from, to, units, inclusivity) {
            var localFrom = isMoment(from) ? from : createLocal(from),
                localTo = isMoment(to) ? to : createLocal(to);
            if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
                return false;
            }
            inclusivity = inclusivity || '()';
            return (
                (inclusivity[0] === '('
                    ? this.isAfter(localFrom, units)
                    : !this.isBefore(localFrom, units)) &&
                (inclusivity[1] === ')'
                    ? this.isBefore(localTo, units)
                    : !this.isAfter(localTo, units))
            );
        }

        function isSame(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input),
                inputMs;
            if (!(this.isValid() && localInput.isValid())) {
                return false;
            }
            units = normalizeUnits(units) || 'millisecond';
            if (units === 'millisecond') {
                return this.valueOf() === localInput.valueOf();
            } else {
                inputMs = localInput.valueOf();
                return (
                    this.clone().startOf(units).valueOf() <= inputMs &&
                    inputMs <= this.clone().endOf(units).valueOf()
                );
            }
        }

        function isSameOrAfter(input, units) {
            return this.isSame(input, units) || this.isAfter(input, units);
        }

        function isSameOrBefore(input, units) {
            return this.isSame(input, units) || this.isBefore(input, units);
        }

        function diff(input, units, asFloat) {
            var that, zoneDelta, output;

            if (!this.isValid()) {
                return NaN;
            }

            that = cloneWithOffset(input, this);

            if (!that.isValid()) {
                return NaN;
            }

            zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

            units = normalizeUnits(units);

            switch (units) {
                case 'year':
                    output = monthDiff(this, that) / 12;
                    break;
                case 'month':
                    output = monthDiff(this, that);
                    break;
                case 'quarter':
                    output = monthDiff(this, that) / 3;
                    break;
                case 'second':
                    output = (this - that) / 1e3;
                    break; // 1000
                case 'minute':
                    output = (this - that) / 6e4;
                    break; // 1000 * 60
                case 'hour':
                    output = (this - that) / 36e5;
                    break; // 1000 * 60 * 60
                case 'day':
                    output = (this - that - zoneDelta) / 864e5;
                    break; // 1000 * 60 * 60 * 24, negate dst
                case 'week':
                    output = (this - that - zoneDelta) / 6048e5;
                    break; // 1000 * 60 * 60 * 24 * 7, negate dst
                default:
                    output = this - that;
            }

            return asFloat ? output : absFloor(output);
        }

        function monthDiff(a, b) {
            if (a.date() < b.date()) {
                // end-of-month calculations work correct when the start month has more
                // days than the end month.
                return -monthDiff(b, a);
            }
            // difference in months
            var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
                // b is in (anchor - 1 month, anchor + 1 month)
                anchor = a.clone().add(wholeMonthDiff, 'months'),
                anchor2,
                adjust;

            if (b - anchor < 0) {
                anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
                // linear across the month
                adjust = (b - anchor) / (anchor - anchor2);
            } else {
                anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
                // linear across the month
                adjust = (b - anchor) / (anchor2 - anchor);
            }

            //check for negative zero, return zero if negative zero
            return -(wholeMonthDiff + adjust) || 0;
        }

        hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
        hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

        function toString() {
            return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
        }

        function toISOString(keepOffset) {
            if (!this.isValid()) {
                return null;
            }
            var utc = keepOffset !== true,
                m = utc ? this.clone().utc() : this;
            if (m.year() < 0 || m.year() > 9999) {
                return formatMoment(
                    m,
                    utc
                        ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'
                        : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'
                );
            }
            if (isFunction(Date.prototype.toISOString)) {
                // native implementation is ~50x faster, use it when we can
                if (utc) {
                    return this.toDate().toISOString();
                } else {
                    return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
                        .toISOString()
                        .replace('Z', formatMoment(m, 'Z'));
                }
            }
            return formatMoment(
                m,
                utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'
            );
        }

        /**
         * Return a human readable representation of a moment that can
         * also be evaluated to get a new moment which is the same
         *
         * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
         */
        function inspect() {
            if (!this.isValid()) {
                return 'moment.invalid(/* ' + this._i + ' */)';
            }
            var func = 'moment',
                zone = '',
                prefix,
                year,
                datetime,
                suffix;
            if (!this.isLocal()) {
                func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
                zone = 'Z';
            }
            prefix = '[' + func + '("]';
            year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
            datetime = '-MM-DD[T]HH:mm:ss.SSS';
            suffix = zone + '[")]';

            return this.format(prefix + year + datetime + suffix);
        }

        function format(inputString) {
            if (!inputString) {
                inputString = this.isUtc()
                    ? hooks.defaultFormatUtc
                    : hooks.defaultFormat;
            }
            var output = formatMoment(this, inputString);
            return this.localeData().postformat(output);
        }

        function from(time, withoutSuffix) {
            if (
                this.isValid() &&
                ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
            ) {
                return createDuration({ to: this, from: time })
                    .locale(this.locale())
                    .humanize(!withoutSuffix);
            } else {
                return this.localeData().invalidDate();
            }
        }

        function fromNow(withoutSuffix) {
            return this.from(createLocal(), withoutSuffix);
        }

        function to(time, withoutSuffix) {
            if (
                this.isValid() &&
                ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
            ) {
                return createDuration({ from: this, to: time })
                    .locale(this.locale())
                    .humanize(!withoutSuffix);
            } else {
                return this.localeData().invalidDate();
            }
        }

        function toNow(withoutSuffix) {
            return this.to(createLocal(), withoutSuffix);
        }

        // If passed a locale key, it will set the locale for this
        // instance.  Otherwise, it will return the locale configuration
        // variables for this instance.
        function locale(key) {
            var newLocaleData;

            if (key === undefined) {
                return this._locale._abbr;
            } else {
                newLocaleData = getLocale(key);
                if (newLocaleData != null) {
                    this._locale = newLocaleData;
                }
                return this;
            }
        }

        var lang = deprecate(
            'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
            function (key) {
                if (key === undefined) {
                    return this.localeData();
                } else {
                    return this.locale(key);
                }
            }
        );

        function localeData() {
            return this._locale;
        }

        var MS_PER_SECOND = 1000,
            MS_PER_MINUTE = 60 * MS_PER_SECOND,
            MS_PER_HOUR = 60 * MS_PER_MINUTE,
            MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

        // actual modulo - handles negative numbers (for dates before 1970):
        function mod$1(dividend, divisor) {
            return ((dividend % divisor) + divisor) % divisor;
        }

        function localStartOfDate(y, m, d) {
            // the date constructor remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
                // preserve leap years using a full 400 year cycle, then reset
                return new Date(y + 400, m, d) - MS_PER_400_YEARS;
            } else {
                return new Date(y, m, d).valueOf();
            }
        }

        function utcStartOfDate(y, m, d) {
            // Date.UTC remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
                // preserve leap years using a full 400 year cycle, then reset
                return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
            } else {
                return Date.UTC(y, m, d);
            }
        }

        function startOf(units) {
            var time, startOfDate;
            units = normalizeUnits(units);
            if (units === undefined || units === 'millisecond' || !this.isValid()) {
                return this;
            }

            startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

            switch (units) {
                case 'year':
                    time = startOfDate(this.year(), 0, 1);
                    break;
                case 'quarter':
                    time = startOfDate(
                        this.year(),
                        this.month() - (this.month() % 3),
                        1
                    );
                    break;
                case 'month':
                    time = startOfDate(this.year(), this.month(), 1);
                    break;
                case 'week':
                    time = startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - this.weekday()
                    );
                    break;
                case 'isoWeek':
                    time = startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - (this.isoWeekday() - 1)
                    );
                    break;
                case 'day':
                case 'date':
                    time = startOfDate(this.year(), this.month(), this.date());
                    break;
                case 'hour':
                    time = this._d.valueOf();
                    time -= mod$1(
                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                        MS_PER_HOUR
                    );
                    break;
                case 'minute':
                    time = this._d.valueOf();
                    time -= mod$1(time, MS_PER_MINUTE);
                    break;
                case 'second':
                    time = this._d.valueOf();
                    time -= mod$1(time, MS_PER_SECOND);
                    break;
            }

            this._d.setTime(time);
            hooks.updateOffset(this, true);
            return this;
        }

        function endOf(units) {
            var time, startOfDate;
            units = normalizeUnits(units);
            if (units === undefined || units === 'millisecond' || !this.isValid()) {
                return this;
            }

            startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

            switch (units) {
                case 'year':
                    time = startOfDate(this.year() + 1, 0, 1) - 1;
                    break;
                case 'quarter':
                    time =
                        startOfDate(
                            this.year(),
                            this.month() - (this.month() % 3) + 3,
                            1
                        ) - 1;
                    break;
                case 'month':
                    time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                    break;
                case 'week':
                    time =
                        startOfDate(
                            this.year(),
                            this.month(),
                            this.date() - this.weekday() + 7
                        ) - 1;
                    break;
                case 'isoWeek':
                    time =
                        startOfDate(
                            this.year(),
                            this.month(),
                            this.date() - (this.isoWeekday() - 1) + 7
                        ) - 1;
                    break;
                case 'day':
                case 'date':
                    time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                    break;
                case 'hour':
                    time = this._d.valueOf();
                    time +=
                        MS_PER_HOUR -
                        mod$1(
                            time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                            MS_PER_HOUR
                        ) -
                        1;
                    break;
                case 'minute':
                    time = this._d.valueOf();
                    time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                    break;
                case 'second':
                    time = this._d.valueOf();
                    time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                    break;
            }

            this._d.setTime(time);
            hooks.updateOffset(this, true);
            return this;
        }

        function valueOf() {
            return this._d.valueOf() - (this._offset || 0) * 60000;
        }

        function unix() {
            return Math.floor(this.valueOf() / 1000);
        }

        function toDate() {
            return new Date(this.valueOf());
        }

        function toArray() {
            var m = this;
            return [
                m.year(),
                m.month(),
                m.date(),
                m.hour(),
                m.minute(),
                m.second(),
                m.millisecond(),
            ];
        }

        function toObject() {
            var m = this;
            return {
                years: m.year(),
                months: m.month(),
                date: m.date(),
                hours: m.hours(),
                minutes: m.minutes(),
                seconds: m.seconds(),
                milliseconds: m.milliseconds(),
            };
        }

        function toJSON() {
            // new Date(NaN).toJSON() === null
            return this.isValid() ? this.toISOString() : null;
        }

        function isValid$2() {
            return isValid(this);
        }

        function parsingFlags() {
            return extend({}, getParsingFlags(this));
        }

        function invalidAt() {
            return getParsingFlags(this).overflow;
        }

        function creationData() {
            return {
                input: this._i,
                format: this._f,
                locale: this._locale,
                isUTC: this._isUTC,
                strict: this._strict,
            };
        }

        addFormatToken('N', 0, 0, 'eraAbbr');
        addFormatToken('NN', 0, 0, 'eraAbbr');
        addFormatToken('NNN', 0, 0, 'eraAbbr');
        addFormatToken('NNNN', 0, 0, 'eraName');
        addFormatToken('NNNNN', 0, 0, 'eraNarrow');

        addFormatToken('y', ['y', 1], 'yo', 'eraYear');
        addFormatToken('y', ['yy', 2], 0, 'eraYear');
        addFormatToken('y', ['yyy', 3], 0, 'eraYear');
        addFormatToken('y', ['yyyy', 4], 0, 'eraYear');

        addRegexToken('N', matchEraAbbr);
        addRegexToken('NN', matchEraAbbr);
        addRegexToken('NNN', matchEraAbbr);
        addRegexToken('NNNN', matchEraName);
        addRegexToken('NNNNN', matchEraNarrow);

        addParseToken(
            ['N', 'NN', 'NNN', 'NNNN', 'NNNNN'],
            function (input, array, config, token) {
                var era = config._locale.erasParse(input, token, config._strict);
                if (era) {
                    getParsingFlags(config).era = era;
                } else {
                    getParsingFlags(config).invalidEra = input;
                }
            }
        );

        addRegexToken('y', matchUnsigned);
        addRegexToken('yy', matchUnsigned);
        addRegexToken('yyy', matchUnsigned);
        addRegexToken('yyyy', matchUnsigned);
        addRegexToken('yo', matchEraYearOrdinal);

        addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
        addParseToken(['yo'], function (input, array, config, token) {
            var match;
            if (config._locale._eraYearOrdinalRegex) {
                match = input.match(config._locale._eraYearOrdinalRegex);
            }

            if (config._locale.eraYearOrdinalParse) {
                array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
            } else {
                array[YEAR] = parseInt(input, 10);
            }
        });

        function localeEras(m, format) {
            var i,
                l,
                date,
                eras = this._eras || getLocale('en')._eras;
            for (i = 0, l = eras.length; i < l; ++i) {
                switch (typeof eras[i].since) {
                    case 'string':
                        // truncate time
                        date = hooks(eras[i].since).startOf('day');
                        eras[i].since = date.valueOf();
                        break;
                }

                switch (typeof eras[i].until) {
                    case 'undefined':
                        eras[i].until = +Infinity;
                        break;
                    case 'string':
                        // truncate time
                        date = hooks(eras[i].until).startOf('day').valueOf();
                        eras[i].until = date.valueOf();
                        break;
                }
            }
            return eras;
        }

        function localeErasParse(eraName, format, strict) {
            var i,
                l,
                eras = this.eras(),
                name,
                abbr,
                narrow;
            eraName = eraName.toUpperCase();

            for (i = 0, l = eras.length; i < l; ++i) {
                name = eras[i].name.toUpperCase();
                abbr = eras[i].abbr.toUpperCase();
                narrow = eras[i].narrow.toUpperCase();

                if (strict) {
                    switch (format) {
                        case 'N':
                        case 'NN':
                        case 'NNN':
                            if (abbr === eraName) {
                                return eras[i];
                            }
                            break;

                        case 'NNNN':
                            if (name === eraName) {
                                return eras[i];
                            }
                            break;

                        case 'NNNNN':
                            if (narrow === eraName) {
                                return eras[i];
                            }
                            break;
                    }
                } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
                    return eras[i];
                }
            }
        }

        function localeErasConvertYear(era, year) {
            var dir = era.since <= era.until ? +1 : -1;
            if (year === undefined) {
                return hooks(era.since).year();
            } else {
                return hooks(era.since).year() + (year - era.offset) * dir;
            }
        }

        function getEraName() {
            var i,
                l,
                val,
                eras = this.localeData().eras();
            for (i = 0, l = eras.length; i < l; ++i) {
                // truncate time
                val = this.clone().startOf('day').valueOf();

                if (eras[i].since <= val && val <= eras[i].until) {
                    return eras[i].name;
                }
                if (eras[i].until <= val && val <= eras[i].since) {
                    return eras[i].name;
                }
            }

            return '';
        }

        function getEraNarrow() {
            var i,
                l,
                val,
                eras = this.localeData().eras();
            for (i = 0, l = eras.length; i < l; ++i) {
                // truncate time
                val = this.clone().startOf('day').valueOf();

                if (eras[i].since <= val && val <= eras[i].until) {
                    return eras[i].narrow;
                }
                if (eras[i].until <= val && val <= eras[i].since) {
                    return eras[i].narrow;
                }
            }

            return '';
        }

        function getEraAbbr() {
            var i,
                l,
                val,
                eras = this.localeData().eras();
            for (i = 0, l = eras.length; i < l; ++i) {
                // truncate time
                val = this.clone().startOf('day').valueOf();

                if (eras[i].since <= val && val <= eras[i].until) {
                    return eras[i].abbr;
                }
                if (eras[i].until <= val && val <= eras[i].since) {
                    return eras[i].abbr;
                }
            }

            return '';
        }

        function getEraYear() {
            var i,
                l,
                dir,
                val,
                eras = this.localeData().eras();
            for (i = 0, l = eras.length; i < l; ++i) {
                dir = eras[i].since <= eras[i].until ? +1 : -1;

                // truncate time
                val = this.clone().startOf('day').valueOf();

                if (
                    (eras[i].since <= val && val <= eras[i].until) ||
                    (eras[i].until <= val && val <= eras[i].since)
                ) {
                    return (
                        (this.year() - hooks(eras[i].since).year()) * dir +
                        eras[i].offset
                    );
                }
            }

            return this.year();
        }

        function erasNameRegex(isStrict) {
            if (!hasOwnProp(this, '_erasNameRegex')) {
                computeErasParse.call(this);
            }
            return isStrict ? this._erasNameRegex : this._erasRegex;
        }

        function erasAbbrRegex(isStrict) {
            if (!hasOwnProp(this, '_erasAbbrRegex')) {
                computeErasParse.call(this);
            }
            return isStrict ? this._erasAbbrRegex : this._erasRegex;
        }

        function erasNarrowRegex(isStrict) {
            if (!hasOwnProp(this, '_erasNarrowRegex')) {
                computeErasParse.call(this);
            }
            return isStrict ? this._erasNarrowRegex : this._erasRegex;
        }

        function matchEraAbbr(isStrict, locale) {
            return locale.erasAbbrRegex(isStrict);
        }

        function matchEraName(isStrict, locale) {
            return locale.erasNameRegex(isStrict);
        }

        function matchEraNarrow(isStrict, locale) {
            return locale.erasNarrowRegex(isStrict);
        }

        function matchEraYearOrdinal(isStrict, locale) {
            return locale._eraYearOrdinalRegex || matchUnsigned;
        }

        function computeErasParse() {
            var abbrPieces = [],
                namePieces = [],
                narrowPieces = [],
                mixedPieces = [],
                i,
                l,
                eras = this.eras();

            for (i = 0, l = eras.length; i < l; ++i) {
                namePieces.push(regexEscape(eras[i].name));
                abbrPieces.push(regexEscape(eras[i].abbr));
                narrowPieces.push(regexEscape(eras[i].narrow));

                mixedPieces.push(regexEscape(eras[i].name));
                mixedPieces.push(regexEscape(eras[i].abbr));
                mixedPieces.push(regexEscape(eras[i].narrow));
            }

            this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
            this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
            this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
            this._erasNarrowRegex = new RegExp(
                '^(' + narrowPieces.join('|') + ')',
                'i'
            );
        }

        // FORMATTING

        addFormatToken(0, ['gg', 2], 0, function () {
            return this.weekYear() % 100;
        });

        addFormatToken(0, ['GG', 2], 0, function () {
            return this.isoWeekYear() % 100;
        });

        function addWeekYearFormatToken(token, getter) {
            addFormatToken(0, [token, token.length], 0, getter);
        }

        addWeekYearFormatToken('gggg', 'weekYear');
        addWeekYearFormatToken('ggggg', 'weekYear');
        addWeekYearFormatToken('GGGG', 'isoWeekYear');
        addWeekYearFormatToken('GGGGG', 'isoWeekYear');

        // ALIASES

        addUnitAlias('weekYear', 'gg');
        addUnitAlias('isoWeekYear', 'GG');

        // PRIORITY

        addUnitPriority('weekYear', 1);
        addUnitPriority('isoWeekYear', 1);

        // PARSING

        addRegexToken('G', matchSigned);
        addRegexToken('g', matchSigned);
        addRegexToken('GG', match1to2, match2);
        addRegexToken('gg', match1to2, match2);
        addRegexToken('GGGG', match1to4, match4);
        addRegexToken('gggg', match1to4, match4);
        addRegexToken('GGGGG', match1to6, match6);
        addRegexToken('ggggg', match1to6, match6);

        addWeekParseToken(
            ['gggg', 'ggggg', 'GGGG', 'GGGGG'],
            function (input, week, config, token) {
                week[token.substr(0, 2)] = toInt(input);
            }
        );

        addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
            week[token] = hooks.parseTwoDigitYear(input);
        });

        // MOMENTS

        function getSetWeekYear(input) {
            return getSetWeekYearHelper.call(
                this,
                input,
                this.week(),
                this.weekday(),
                this.localeData()._week.dow,
                this.localeData()._week.doy
            );
        }

        function getSetISOWeekYear(input) {
            return getSetWeekYearHelper.call(
                this,
                input,
                this.isoWeek(),
                this.isoWeekday(),
                1,
                4
            );
        }

        function getISOWeeksInYear() {
            return weeksInYear(this.year(), 1, 4);
        }

        function getISOWeeksInISOWeekYear() {
            return weeksInYear(this.isoWeekYear(), 1, 4);
        }

        function getWeeksInYear() {
            var weekInfo = this.localeData()._week;
            return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
        }

        function getWeeksInWeekYear() {
            var weekInfo = this.localeData()._week;
            return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
        }

        function getSetWeekYearHelper(input, week, weekday, dow, doy) {
            var weeksTarget;
            if (input == null) {
                return weekOfYear(this, dow, doy).year;
            } else {
                weeksTarget = weeksInYear(input, dow, doy);
                if (week > weeksTarget) {
                    week = weeksTarget;
                }
                return setWeekAll.call(this, input, week, weekday, dow, doy);
            }
        }

        function setWeekAll(weekYear, week, weekday, dow, doy) {
            var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
                date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

            this.year(date.getUTCFullYear());
            this.month(date.getUTCMonth());
            this.date(date.getUTCDate());
            return this;
        }

        // FORMATTING

        addFormatToken('Q', 0, 'Qo', 'quarter');

        // ALIASES

        addUnitAlias('quarter', 'Q');

        // PRIORITY

        addUnitPriority('quarter', 7);

        // PARSING

        addRegexToken('Q', match1);
        addParseToken('Q', function (input, array) {
            array[MONTH] = (toInt(input) - 1) * 3;
        });

        // MOMENTS

        function getSetQuarter(input) {
            return input == null
                ? Math.ceil((this.month() + 1) / 3)
                : this.month((input - 1) * 3 + (this.month() % 3));
        }

        // FORMATTING

        addFormatToken('D', ['DD', 2], 'Do', 'date');

        // ALIASES

        addUnitAlias('date', 'D');

        // PRIORITY
        addUnitPriority('date', 9);

        // PARSING

        addRegexToken('D', match1to2);
        addRegexToken('DD', match1to2, match2);
        addRegexToken('Do', function (isStrict, locale) {
            // TODO: Remove "ordinalParse" fallback in next major release.
            return isStrict
                ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
                : locale._dayOfMonthOrdinalParseLenient;
        });

        addParseToken(['D', 'DD'], DATE);
        addParseToken('Do', function (input, array) {
            array[DATE] = toInt(input.match(match1to2)[0]);
        });

        // MOMENTS

        var getSetDayOfMonth = makeGetSet('Date', true);

        // FORMATTING

        addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

        // ALIASES

        addUnitAlias('dayOfYear', 'DDD');

        // PRIORITY
        addUnitPriority('dayOfYear', 4);

        // PARSING

        addRegexToken('DDD', match1to3);
        addRegexToken('DDDD', match3);
        addParseToken(['DDD', 'DDDD'], function (input, array, config) {
            config._dayOfYear = toInt(input);
        });

        // HELPERS

        // MOMENTS

        function getSetDayOfYear(input) {
            var dayOfYear =
                Math.round(
                    (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5
                ) + 1;
            return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
        }

        // FORMATTING

        addFormatToken('m', ['mm', 2], 0, 'minute');

        // ALIASES

        addUnitAlias('minute', 'm');

        // PRIORITY

        addUnitPriority('minute', 14);

        // PARSING

        addRegexToken('m', match1to2);
        addRegexToken('mm', match1to2, match2);
        addParseToken(['m', 'mm'], MINUTE);

        // MOMENTS

        var getSetMinute = makeGetSet('Minutes', false);

        // FORMATTING

        addFormatToken('s', ['ss', 2], 0, 'second');

        // ALIASES

        addUnitAlias('second', 's');

        // PRIORITY

        addUnitPriority('second', 15);

        // PARSING

        addRegexToken('s', match1to2);
        addRegexToken('ss', match1to2, match2);
        addParseToken(['s', 'ss'], SECOND);

        // MOMENTS

        var getSetSecond = makeGetSet('Seconds', false);

        // FORMATTING

        addFormatToken('S', 0, 0, function () {
            return ~~(this.millisecond() / 100);
        });

        addFormatToken(0, ['SS', 2], 0, function () {
            return ~~(this.millisecond() / 10);
        });

        addFormatToken(0, ['SSS', 3], 0, 'millisecond');
        addFormatToken(0, ['SSSS', 4], 0, function () {
            return this.millisecond() * 10;
        });
        addFormatToken(0, ['SSSSS', 5], 0, function () {
            return this.millisecond() * 100;
        });
        addFormatToken(0, ['SSSSSS', 6], 0, function () {
            return this.millisecond() * 1000;
        });
        addFormatToken(0, ['SSSSSSS', 7], 0, function () {
            return this.millisecond() * 10000;
        });
        addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
            return this.millisecond() * 100000;
        });
        addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
            return this.millisecond() * 1000000;
        });

        // ALIASES

        addUnitAlias('millisecond', 'ms');

        // PRIORITY

        addUnitPriority('millisecond', 16);

        // PARSING

        addRegexToken('S', match1to3, match1);
        addRegexToken('SS', match1to3, match2);
        addRegexToken('SSS', match1to3, match3);

        var token, getSetMillisecond;
        for (token = 'SSSS'; token.length <= 9; token += 'S') {
            addRegexToken(token, matchUnsigned);
        }

        function parseMs(input, array) {
            array[MILLISECOND] = toInt(('0.' + input) * 1000);
        }

        for (token = 'S'; token.length <= 9; token += 'S') {
            addParseToken(token, parseMs);
        }

        getSetMillisecond = makeGetSet('Milliseconds', false);

        // FORMATTING

        addFormatToken('z', 0, 0, 'zoneAbbr');
        addFormatToken('zz', 0, 0, 'zoneName');

        // MOMENTS

        function getZoneAbbr() {
            return this._isUTC ? 'UTC' : '';
        }

        function getZoneName() {
            return this._isUTC ? 'Coordinated Universal Time' : '';
        }

        var proto = Moment.prototype;

        proto.add = add;
        proto.calendar = calendar$1;
        proto.clone = clone;
        proto.diff = diff;
        proto.endOf = endOf;
        proto.format = format;
        proto.from = from;
        proto.fromNow = fromNow;
        proto.to = to;
        proto.toNow = toNow;
        proto.get = stringGet;
        proto.invalidAt = invalidAt;
        proto.isAfter = isAfter;
        proto.isBefore = isBefore;
        proto.isBetween = isBetween;
        proto.isSame = isSame;
        proto.isSameOrAfter = isSameOrAfter;
        proto.isSameOrBefore = isSameOrBefore;
        proto.isValid = isValid$2;
        proto.lang = lang;
        proto.locale = locale;
        proto.localeData = localeData;
        proto.max = prototypeMax;
        proto.min = prototypeMin;
        proto.parsingFlags = parsingFlags;
        proto.set = stringSet;
        proto.startOf = startOf;
        proto.subtract = subtract;
        proto.toArray = toArray;
        proto.toObject = toObject;
        proto.toDate = toDate;
        proto.toISOString = toISOString;
        proto.inspect = inspect;
        if (typeof Symbol !== 'undefined' && Symbol.for != null) {
            proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
                return 'Moment<' + this.format() + '>';
            };
        }
        proto.toJSON = toJSON;
        proto.toString = toString;
        proto.unix = unix;
        proto.valueOf = valueOf;
        proto.creationData = creationData;
        proto.eraName = getEraName;
        proto.eraNarrow = getEraNarrow;
        proto.eraAbbr = getEraAbbr;
        proto.eraYear = getEraYear;
        proto.year = getSetYear;
        proto.isLeapYear = getIsLeapYear;
        proto.weekYear = getSetWeekYear;
        proto.isoWeekYear = getSetISOWeekYear;
        proto.quarter = proto.quarters = getSetQuarter;
        proto.month = getSetMonth;
        proto.daysInMonth = getDaysInMonth;
        proto.week = proto.weeks = getSetWeek;
        proto.isoWeek = proto.isoWeeks = getSetISOWeek;
        proto.weeksInYear = getWeeksInYear;
        proto.weeksInWeekYear = getWeeksInWeekYear;
        proto.isoWeeksInYear = getISOWeeksInYear;
        proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
        proto.date = getSetDayOfMonth;
        proto.day = proto.days = getSetDayOfWeek;
        proto.weekday = getSetLocaleDayOfWeek;
        proto.isoWeekday = getSetISODayOfWeek;
        proto.dayOfYear = getSetDayOfYear;
        proto.hour = proto.hours = getSetHour;
        proto.minute = proto.minutes = getSetMinute;
        proto.second = proto.seconds = getSetSecond;
        proto.millisecond = proto.milliseconds = getSetMillisecond;
        proto.utcOffset = getSetOffset;
        proto.utc = setOffsetToUTC;
        proto.local = setOffsetToLocal;
        proto.parseZone = setOffsetToParsedOffset;
        proto.hasAlignedHourOffset = hasAlignedHourOffset;
        proto.isDST = isDaylightSavingTime;
        proto.isLocal = isLocal;
        proto.isUtcOffset = isUtcOffset;
        proto.isUtc = isUtc;
        proto.isUTC = isUtc;
        proto.zoneAbbr = getZoneAbbr;
        proto.zoneName = getZoneName;
        proto.dates = deprecate(
            'dates accessor is deprecated. Use date instead.',
            getSetDayOfMonth
        );
        proto.months = deprecate(
            'months accessor is deprecated. Use month instead',
            getSetMonth
        );
        proto.years = deprecate(
            'years accessor is deprecated. Use year instead',
            getSetYear
        );
        proto.zone = deprecate(
            'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
            getSetZone
        );
        proto.isDSTShifted = deprecate(
            'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
            isDaylightSavingTimeShifted
        );

        function createUnix(input) {
            return createLocal(input * 1000);
        }

        function createInZone() {
            return createLocal.apply(null, arguments).parseZone();
        }

        function preParsePostFormat(string) {
            return string;
        }

        var proto$1 = Locale.prototype;

        proto$1.calendar = calendar;
        proto$1.longDateFormat = longDateFormat;
        proto$1.invalidDate = invalidDate;
        proto$1.ordinal = ordinal;
        proto$1.preparse = preParsePostFormat;
        proto$1.postformat = preParsePostFormat;
        proto$1.relativeTime = relativeTime;
        proto$1.pastFuture = pastFuture;
        proto$1.set = set;
        proto$1.eras = localeEras;
        proto$1.erasParse = localeErasParse;
        proto$1.erasConvertYear = localeErasConvertYear;
        proto$1.erasAbbrRegex = erasAbbrRegex;
        proto$1.erasNameRegex = erasNameRegex;
        proto$1.erasNarrowRegex = erasNarrowRegex;

        proto$1.months = localeMonths;
        proto$1.monthsShort = localeMonthsShort;
        proto$1.monthsParse = localeMonthsParse;
        proto$1.monthsRegex = monthsRegex;
        proto$1.monthsShortRegex = monthsShortRegex;
        proto$1.week = localeWeek;
        proto$1.firstDayOfYear = localeFirstDayOfYear;
        proto$1.firstDayOfWeek = localeFirstDayOfWeek;

        proto$1.weekdays = localeWeekdays;
        proto$1.weekdaysMin = localeWeekdaysMin;
        proto$1.weekdaysShort = localeWeekdaysShort;
        proto$1.weekdaysParse = localeWeekdaysParse;

        proto$1.weekdaysRegex = weekdaysRegex;
        proto$1.weekdaysShortRegex = weekdaysShortRegex;
        proto$1.weekdaysMinRegex = weekdaysMinRegex;

        proto$1.isPM = localeIsPM;
        proto$1.meridiem = localeMeridiem;

        function get$1(format, index, field, setter) {
            var locale = getLocale(),
                utc = createUTC().set(setter, index);
            return locale[field](utc, format);
        }

        function listMonthsImpl(format, index, field) {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';

            if (index != null) {
                return get$1(format, index, field, 'month');
            }

            var i,
                out = [];
            for (i = 0; i < 12; i++) {
                out[i] = get$1(format, i, field, 'month');
            }
            return out;
        }

        // ()
        // (5)
        // (fmt, 5)
        // (fmt)
        // (true)
        // (true, 5)
        // (true, fmt, 5)
        // (true, fmt)
        function listWeekdaysImpl(localeSorted, format, index, field) {
            if (typeof localeSorted === 'boolean') {
                if (isNumber(format)) {
                    index = format;
                    format = undefined;
                }

                format = format || '';
            } else {
                format = localeSorted;
                index = format;
                localeSorted = false;

                if (isNumber(format)) {
                    index = format;
                    format = undefined;
                }

                format = format || '';
            }

            var locale = getLocale(),
                shift = localeSorted ? locale._week.dow : 0,
                i,
                out = [];

            if (index != null) {
                return get$1(format, (index + shift) % 7, field, 'day');
            }

            for (i = 0; i < 7; i++) {
                out[i] = get$1(format, (i + shift) % 7, field, 'day');
            }
            return out;
        }

        function listMonths(format, index) {
            return listMonthsImpl(format, index, 'months');
        }

        function listMonthsShort(format, index) {
            return listMonthsImpl(format, index, 'monthsShort');
        }

        function listWeekdays(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
        }

        function listWeekdaysShort(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
        }

        function listWeekdaysMin(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
        }

        getSetGlobalLocale('en', {
            eras: [
                {
                    since: '0001-01-01',
                    until: +Infinity,
                    offset: 1,
                    name: 'Anno Domini',
                    narrow: 'AD',
                    abbr: 'AD',
                },
                {
                    since: '0000-12-31',
                    until: -Infinity,
                    offset: 1,
                    name: 'Before Christ',
                    narrow: 'BC',
                    abbr: 'BC',
                },
            ],
            dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
            ordinal: function (number) {
                var b = number % 10,
                    output =
                        toInt((number % 100) / 10) === 1
                            ? 'th'
                            : b === 1
                            ? 'st'
                            : b === 2
                            ? 'nd'
                            : b === 3
                            ? 'rd'
                            : 'th';
                return number + output;
            },
        });

        // Side effect imports

        hooks.lang = deprecate(
            'moment.lang is deprecated. Use moment.locale instead.',
            getSetGlobalLocale
        );
        hooks.langData = deprecate(
            'moment.langData is deprecated. Use moment.localeData instead.',
            getLocale
        );

        var mathAbs = Math.abs;

        function abs() {
            var data = this._data;

            this._milliseconds = mathAbs(this._milliseconds);
            this._days = mathAbs(this._days);
            this._months = mathAbs(this._months);

            data.milliseconds = mathAbs(data.milliseconds);
            data.seconds = mathAbs(data.seconds);
            data.minutes = mathAbs(data.minutes);
            data.hours = mathAbs(data.hours);
            data.months = mathAbs(data.months);
            data.years = mathAbs(data.years);

            return this;
        }

        function addSubtract$1(duration, input, value, direction) {
            var other = createDuration(input, value);

            duration._milliseconds += direction * other._milliseconds;
            duration._days += direction * other._days;
            duration._months += direction * other._months;

            return duration._bubble();
        }

        // supports only 2.0-style add(1, 's') or add(duration)
        function add$1(input, value) {
            return addSubtract$1(this, input, value, 1);
        }

        // supports only 2.0-style subtract(1, 's') or subtract(duration)
        function subtract$1(input, value) {
            return addSubtract$1(this, input, value, -1);
        }

        function absCeil(number) {
            if (number < 0) {
                return Math.floor(number);
            } else {
                return Math.ceil(number);
            }
        }

        function bubble() {
            var milliseconds = this._milliseconds,
                days = this._days,
                months = this._months,
                data = this._data,
                seconds,
                minutes,
                hours,
                years,
                monthsFromDays;

            // if we have a mix of positive and negative values, bubble down first
            // check: https://github.com/moment/moment/issues/2166
            if (
                !(
                    (milliseconds >= 0 && days >= 0 && months >= 0) ||
                    (milliseconds <= 0 && days <= 0 && months <= 0)
                )
            ) {
                milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
                days = 0;
                months = 0;
            }

            // The following code bubbles up values, see the tests for
            // examples of what that means.
            data.milliseconds = milliseconds % 1000;

            seconds = absFloor(milliseconds / 1000);
            data.seconds = seconds % 60;

            minutes = absFloor(seconds / 60);
            data.minutes = minutes % 60;

            hours = absFloor(minutes / 60);
            data.hours = hours % 24;

            days += absFloor(hours / 24);

            // convert days to months
            monthsFromDays = absFloor(daysToMonths(days));
            months += monthsFromDays;
            days -= absCeil(monthsToDays(monthsFromDays));

            // 12 months -> 1 year
            years = absFloor(months / 12);
            months %= 12;

            data.days = days;
            data.months = months;
            data.years = years;

            return this;
        }

        function daysToMonths(days) {
            // 400 years have 146097 days (taking into account leap year rules)
            // 400 years have 12 months === 4800
            return (days * 4800) / 146097;
        }

        function monthsToDays(months) {
            // the reverse of daysToMonths
            return (months * 146097) / 4800;
        }

        function as(units) {
            if (!this.isValid()) {
                return NaN;
            }
            var days,
                months,
                milliseconds = this._milliseconds;

            units = normalizeUnits(units);

            if (units === 'month' || units === 'quarter' || units === 'year') {
                days = this._days + milliseconds / 864e5;
                months = this._months + daysToMonths(days);
                switch (units) {
                    case 'month':
                        return months;
                    case 'quarter':
                        return months / 3;
                    case 'year':
                        return months / 12;
                }
            } else {
                // handle milliseconds separately because of floating point math errors (issue #1867)
                days = this._days + Math.round(monthsToDays(this._months));
                switch (units) {
                    case 'week':
                        return days / 7 + milliseconds / 6048e5;
                    case 'day':
                        return days + milliseconds / 864e5;
                    case 'hour':
                        return days * 24 + milliseconds / 36e5;
                    case 'minute':
                        return days * 1440 + milliseconds / 6e4;
                    case 'second':
                        return days * 86400 + milliseconds / 1000;
                    // Math.floor prevents floating point math errors here
                    case 'millisecond':
                        return Math.floor(days * 864e5) + milliseconds;
                    default:
                        throw new Error('Unknown unit ' + units);
                }
            }
        }

        // TODO: Use this.as('ms')?
        function valueOf$1() {
            if (!this.isValid()) {
                return NaN;
            }
            return (
                this._milliseconds +
                this._days * 864e5 +
                (this._months % 12) * 2592e6 +
                toInt(this._months / 12) * 31536e6
            );
        }

        function makeAs(alias) {
            return function () {
                return this.as(alias);
            };
        }

        var asMilliseconds = makeAs('ms'),
            asSeconds = makeAs('s'),
            asMinutes = makeAs('m'),
            asHours = makeAs('h'),
            asDays = makeAs('d'),
            asWeeks = makeAs('w'),
            asMonths = makeAs('M'),
            asQuarters = makeAs('Q'),
            asYears = makeAs('y');

        function clone$1() {
            return createDuration(this);
        }

        function get$2(units) {
            units = normalizeUnits(units);
            return this.isValid() ? this[units + 's']() : NaN;
        }

        function makeGetter(name) {
            return function () {
                return this.isValid() ? this._data[name] : NaN;
            };
        }

        var milliseconds = makeGetter('milliseconds'),
            seconds = makeGetter('seconds'),
            minutes = makeGetter('minutes'),
            hours = makeGetter('hours'),
            days = makeGetter('days'),
            months = makeGetter('months'),
            years = makeGetter('years');

        function weeks() {
            return absFloor(this.days() / 7);
        }

        var round = Math.round,
            thresholds = {
                ss: 44, // a few seconds to seconds
                s: 45, // seconds to minute
                m: 45, // minutes to hour
                h: 22, // hours to day
                d: 26, // days to month/week
                w: null, // weeks to month
                M: 11, // months to year
            };

        // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
        function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
            return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
        }

        function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
            var duration = createDuration(posNegDuration).abs(),
                seconds = round(duration.as('s')),
                minutes = round(duration.as('m')),
                hours = round(duration.as('h')),
                days = round(duration.as('d')),
                months = round(duration.as('M')),
                weeks = round(duration.as('w')),
                years = round(duration.as('y')),
                a =
                    (seconds <= thresholds.ss && ['s', seconds]) ||
                    (seconds < thresholds.s && ['ss', seconds]) ||
                    (minutes <= 1 && ['m']) ||
                    (minutes < thresholds.m && ['mm', minutes]) ||
                    (hours <= 1 && ['h']) ||
                    (hours < thresholds.h && ['hh', hours]) ||
                    (days <= 1 && ['d']) ||
                    (days < thresholds.d && ['dd', days]);

            if (thresholds.w != null) {
                a =
                    a ||
                    (weeks <= 1 && ['w']) ||
                    (weeks < thresholds.w && ['ww', weeks]);
            }
            a = a ||
                (months <= 1 && ['M']) ||
                (months < thresholds.M && ['MM', months]) ||
                (years <= 1 && ['y']) || ['yy', years];

            a[2] = withoutSuffix;
            a[3] = +posNegDuration > 0;
            a[4] = locale;
            return substituteTimeAgo.apply(null, a);
        }

        // This function allows you to set the rounding function for relative time strings
        function getSetRelativeTimeRounding(roundingFunction) {
            if (roundingFunction === undefined) {
                return round;
            }
            if (typeof roundingFunction === 'function') {
                round = roundingFunction;
                return true;
            }
            return false;
        }

        // This function allows you to set a threshold for relative time strings
        function getSetRelativeTimeThreshold(threshold, limit) {
            if (thresholds[threshold] === undefined) {
                return false;
            }
            if (limit === undefined) {
                return thresholds[threshold];
            }
            thresholds[threshold] = limit;
            if (threshold === 's') {
                thresholds.ss = limit - 1;
            }
            return true;
        }

        function humanize(argWithSuffix, argThresholds) {
            if (!this.isValid()) {
                return this.localeData().invalidDate();
            }

            var withSuffix = false,
                th = thresholds,
                locale,
                output;

            if (typeof argWithSuffix === 'object') {
                argThresholds = argWithSuffix;
                argWithSuffix = false;
            }
            if (typeof argWithSuffix === 'boolean') {
                withSuffix = argWithSuffix;
            }
            if (typeof argThresholds === 'object') {
                th = Object.assign({}, thresholds, argThresholds);
                if (argThresholds.s != null && argThresholds.ss == null) {
                    th.ss = argThresholds.s - 1;
                }
            }

            locale = this.localeData();
            output = relativeTime$1(this, !withSuffix, th, locale);

            if (withSuffix) {
                output = locale.pastFuture(+this, output);
            }

            return locale.postformat(output);
        }

        var abs$1 = Math.abs;

        function sign(x) {
            return (x > 0) - (x < 0) || +x;
        }

        function toISOString$1() {
            // for ISO strings we do not use the normal bubbling rules:
            //  * milliseconds bubble up until they become hours
            //  * days do not bubble at all
            //  * months bubble up until they become years
            // This is because there is no context-free conversion between hours and days
            // (think of clock changes)
            // and also not between days and months (28-31 days per month)
            if (!this.isValid()) {
                return this.localeData().invalidDate();
            }

            var seconds = abs$1(this._milliseconds) / 1000,
                days = abs$1(this._days),
                months = abs$1(this._months),
                minutes,
                hours,
                years,
                s,
                total = this.asSeconds(),
                totalSign,
                ymSign,
                daysSign,
                hmsSign;

            if (!total) {
                // this is the same as C#'s (Noda) and python (isodate)...
                // but not other JS (goog.date)
                return 'P0D';
            }

            // 3600 seconds -> 60 minutes -> 1 hour
            minutes = absFloor(seconds / 60);
            hours = absFloor(minutes / 60);
            seconds %= 60;
            minutes %= 60;

            // 12 months -> 1 year
            years = absFloor(months / 12);
            months %= 12;

            // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
            s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';

            totalSign = total < 0 ? '-' : '';
            ymSign = sign(this._months) !== sign(total) ? '-' : '';
            daysSign = sign(this._days) !== sign(total) ? '-' : '';
            hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

            return (
                totalSign +
                'P' +
                (years ? ymSign + years + 'Y' : '') +
                (months ? ymSign + months + 'M' : '') +
                (days ? daysSign + days + 'D' : '') +
                (hours || minutes || seconds ? 'T' : '') +
                (hours ? hmsSign + hours + 'H' : '') +
                (minutes ? hmsSign + minutes + 'M' : '') +
                (seconds ? hmsSign + s + 'S' : '')
            );
        }

        var proto$2 = Duration.prototype;

        proto$2.isValid = isValid$1;
        proto$2.abs = abs;
        proto$2.add = add$1;
        proto$2.subtract = subtract$1;
        proto$2.as = as;
        proto$2.asMilliseconds = asMilliseconds;
        proto$2.asSeconds = asSeconds;
        proto$2.asMinutes = asMinutes;
        proto$2.asHours = asHours;
        proto$2.asDays = asDays;
        proto$2.asWeeks = asWeeks;
        proto$2.asMonths = asMonths;
        proto$2.asQuarters = asQuarters;
        proto$2.asYears = asYears;
        proto$2.valueOf = valueOf$1;
        proto$2._bubble = bubble;
        proto$2.clone = clone$1;
        proto$2.get = get$2;
        proto$2.milliseconds = milliseconds;
        proto$2.seconds = seconds;
        proto$2.minutes = minutes;
        proto$2.hours = hours;
        proto$2.days = days;
        proto$2.weeks = weeks;
        proto$2.months = months;
        proto$2.years = years;
        proto$2.humanize = humanize;
        proto$2.toISOString = toISOString$1;
        proto$2.toString = toISOString$1;
        proto$2.toJSON = toISOString$1;
        proto$2.locale = locale;
        proto$2.localeData = localeData;

        proto$2.toIsoString = deprecate(
            'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
            toISOString$1
        );
        proto$2.lang = lang;

        // FORMATTING

        addFormatToken('X', 0, 0, 'unix');
        addFormatToken('x', 0, 0, 'valueOf');

        // PARSING

        addRegexToken('x', matchSigned);
        addRegexToken('X', matchTimestamp);
        addParseToken('X', function (input, array, config) {
            config._d = new Date(parseFloat(input) * 1000);
        });
        addParseToken('x', function (input, array, config) {
            config._d = new Date(toInt(input));
        });

        //! moment.js

        hooks.version = '2.29.3';

        setHookCallback(createLocal);

        hooks.fn = proto;
        hooks.min = min;
        hooks.max = max;
        hooks.now = now;
        hooks.utc = createUTC;
        hooks.unix = createUnix;
        hooks.months = listMonths;
        hooks.isDate = isDate;
        hooks.locale = getSetGlobalLocale;
        hooks.invalid = createInvalid;
        hooks.duration = createDuration;
        hooks.isMoment = isMoment;
        hooks.weekdays = listWeekdays;
        hooks.parseZone = createInZone;
        hooks.localeData = getLocale;
        hooks.isDuration = isDuration;
        hooks.monthsShort = listMonthsShort;
        hooks.weekdaysMin = listWeekdaysMin;
        hooks.defineLocale = defineLocale;
        hooks.updateLocale = updateLocale;
        hooks.locales = listLocales;
        hooks.weekdaysShort = listWeekdaysShort;
        hooks.normalizeUnits = normalizeUnits;
        hooks.relativeTimeRounding = getSetRelativeTimeRounding;
        hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
        hooks.calendarFormat = getCalendarFormat;
        hooks.prototype = proto;

        // currently HTML5 input type only supports 24-hour formats
        hooks.HTML5_FMT = {
            DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
            DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
            DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
            DATE: 'YYYY-MM-DD', // <input type="date" />
            TIME: 'HH:mm', // <input type="time" />
            TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
            TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
            WEEK: 'GGGG-[W]WW', // <input type="week" />
            MONTH: 'YYYY-MM', // <input type="month" />
        };

        return hooks;

    })));
    });

    const Config = {
    	newspaperTitle: 'Los Santos Newspaper',
    	tabs: {
    		showPrisonSentences: true,
    		showCityNews: false,
    	},
    	articles: {
    		showImage: true,
    		showTitle: true,
    		showDate: true,
    		showPublisher: true,
    		titleMaxLength: 60,
    	},

    	publishArticleControls: [
    		['bold', 'italic', 'underline', 'strike'],
    		['blockquote', 'image'],
    		[{ list: 'ordered' }, { list: 'bullet' }],
    	],
    	// Remember to align this with QBShared.Jobs
    	reporter: [
    		{
    			grade: 0,
    			canPublish: true,
    			canEdit: true,
    			canDelete: true,
    		},
    		{
    			grade: 1,
    			canPublish: true,
    			canEdit: true,
    			canDelete: true,
    		},
    		{
    			grade: 2,
    			canPublish: true,
    			canEdit: true,
    			canDelete: false,
    		},
    		{
    			grade: 3,
    			canPublish: true,
    			canEdit: true,
    			canDelete: true,
    		},
    	],
    	prisonSentences: {
    		imageUrl:
    			'https://cdn.realsport101.com/images/ncavvykf/gfinityesports/94d9c2c9e240b6b4e792a705ead0a0d188c1af47-808x455.png?w=686&h=386&auto=format',
    		imageCaption: 'Bolingbroke Penitentiary',
    	},
    	text: {
    		tabs: {
    			newspaper: 'Newspaper',
    			prisonSentences: 'Prison sentences',
    			reporterActions: 'Reporter actions',
    		},
    		prisonSentences: {
    			title: 'Prison sentences',
    			noSentencesAvailable: 'No sentences available',
    		},
    		reporterActions: {
    			title: 'Reporter actions',
    			noPermissions: 'You have no reporter permissions.',
    			publishNewStory: 'Publish a new story',
    			updateStories: 'Update stories',
    			deleteStories: 'Delete stories',
    			publishStory: {
    				textareaPlaceholder: 'Article content..',
    				imagePlaceholder: 'Image URL (Optional)',
    				titlePlaceholder: 'Title (Required)',
    				publish: 'Publish',
    				update: 'Update',
    				discardChanges: 'Discard changes',
    				preview: 'Preview',
    				wrongImageFormat:
    					'Wrong image format. Either .jpg, .jpeg, .png. .webp, .avif, .gif, or .svg expected',
    				required: 'Required',
    				cancel: 'Cancel',
    			},
    		},
    		articles: {
    			writtenBy: 'Written by',
    			on: 'on',
    			latestStories: 'Latest stories',
    		},
    	},
    };

    /* src\pages\News.svelte generated by Svelte v3.48.0 */
    const file$7 = "src\\pages\\News.svelte";

    // (53:1) {#if stories.length > 0}
    function create_if_block$3(ctx) {
    	let div1;
    	let t0;
    	let t1;
    	let t2;
    	let hr;
    	let t3;
    	let div0;
    	let t4;
    	let div3;
    	let h4;
    	let t6;
    	let div2;
    	let if_block0 = Config.articles.showImage && create_if_block_6$1(ctx);
    	let if_block1 = Config.articles.showTitle && create_if_block_5$1(ctx);
    	let if_block2 = (Config.articles.showPublisher || Config.articles.showDate) && create_if_block_1$3(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			t2 = space();
    			hr = element("hr");
    			t3 = space();
    			div0 = element("div");
    			t4 = space();
    			div3 = element("div");
    			h4 = element("h4");
    			h4.textContent = `${Config.text.articles.latestStories}`;
    			t6 = space();
    			div2 = element("div");
    			attr_dev(hr, "class", "seperator svelte-yknc01");
    			add_location(hr, file$7, 81, 3, 2997);
    			attr_dev(div0, "class", "body-content");
    			add_location(div0, file$7, 83, 3, 3028);
    			attr_dev(div1, "class", "latest pa-4 svelte-yknc01");
    			add_location(div1, file$7, 53, 2, 2230);
    			attr_dev(h4, "class", "ma-4");
    			add_location(h4, file$7, 86, 3, 3097);
    			attr_dev(div2, "class", "all-stories");
    			add_location(div2, file$7, 87, 3, 3160);
    			attr_dev(div3, "class", "previous svelte-yknc01");
    			add_location(div3, file$7, 85, 2, 3070);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			if (if_block0) if_block0.m(div1, null);
    			append_dev(div1, t0);
    			if (if_block1) if_block1.m(div1, null);
    			append_dev(div1, t1);
    			if (if_block2) if_block2.m(div1, null);
    			append_dev(div1, t2);
    			append_dev(div1, hr);
    			append_dev(div1, t3);
    			append_dev(div1, div0);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div3, anchor);
    			append_dev(div3, h4);
    			append_dev(div3, t6);
    			append_dev(div3, div2);
    		},
    		p: function update(ctx, dirty) {
    			if (Config.articles.showImage) if_block0.p(ctx, dirty);
    			if (Config.articles.showTitle) if_block1.p(ctx, dirty);
    			if (Config.articles.showPublisher || Config.articles.showDate) if_block2.p(ctx, dirty);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(53:1) {#if stories.length > 0}",
    		ctx
    	});

    	return block;
    }

    // (55:3) {#if Config.articles.showImage}
    function create_if_block_6$1(ctx) {
    	let if_block_anchor;
    	let if_block = /*storyImage*/ ctx[2] && create_if_block_7$1(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (/*storyImage*/ ctx[2]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_7$1(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$1.name,
    		type: "if",
    		source: "(55:3) {#if Config.articles.showImage}",
    		ctx
    	});

    	return block;
    }

    // (56:4) {#if storyImage}
    function create_if_block_7$1(ctx) {
    	let div;
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			div = element("div");
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = /*storyImage*/ ctx[2])) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "Story image");
    			attr_dev(img, "class", "svelte-yknc01");
    			add_location(img, file$7, 57, 5, 2404);
    			attr_dev(div, "class", "main_article_image svelte-yknc01");
    			add_location(div, file$7, 55, 20, 2313);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, img);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*storyImage*/ 4 && !src_url_equal(img.src, img_src_value = /*storyImage*/ ctx[2])) {
    				attr_dev(img, "src", img_src_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$1.name,
    		type: "if",
    		source: "(56:4) {#if storyImage}",
    		ctx
    	});

    	return block;
    }

    // (63:3) {#if Config.articles.showTitle}
    function create_if_block_5$1(ctx) {
    	let h4;
    	let t;

    	const block = {
    		c: function create() {
    			h4 = element("h4");
    			t = text(/*storyTitle*/ ctx[1]);
    			attr_dev(h4, "class", "mt-2");
    			add_location(h4, file$7, 63, 4, 2523);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h4, anchor);
    			append_dev(h4, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*storyTitle*/ 2) set_data_dev(t, /*storyTitle*/ ctx[1]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$1.name,
    		type: "if",
    		source: "(63:3) {#if Config.articles.showTitle}",
    		ctx
    	});

    	return block;
    }

    // (69:3) {#if Config.articles.showPublisher || Config.articles.showDate}
    function create_if_block_1$3(ctx) {
    	let p;
    	let small;
    	let if_block0_anchor;
    	let if_block0 = Config.articles.showPublisher && create_if_block_3$3(ctx);
    	let if_block1 = Config.articles.showDate && create_if_block_2$3(ctx);

    	const block = {
    		c: function create() {
    			p = element("p");
    			small = element("small");
    			if (if_block0) if_block0.c();
    			if_block0_anchor = empty();
    			if (if_block1) if_block1.c();
    			add_location(small, file$7, 70, 5, 2666);
    			add_location(p, file$7, 69, 4, 2656);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, small);
    			if (if_block0) if_block0.m(small, null);
    			append_dev(small, if_block0_anchor);
    			if (if_block1) if_block1.m(small, null);
    		},
    		p: function update(ctx, dirty) {
    			if (Config.articles.showPublisher) if_block0.p(ctx, dirty);
    			if (Config.articles.showDate) if_block1.p(ctx, dirty);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$3.name,
    		type: "if",
    		source: "(69:3) {#if Config.articles.showPublisher || Config.articles.showDate}",
    		ctx
    	});

    	return block;
    }

    // (72:7) {#if Config.articles.showPublisher}
    function create_if_block_3$3(ctx) {
    	let t0_value = Config.text.articles.writtenBy + "";
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let if_block = Config.articles.showPublisher && Config.articles.showDate && create_if_block_4$2(ctx);

    	const block = {
    		c: function create() {
    			t0 = text(t0_value);
    			t1 = space();
    			t2 = text(/*storyPublisher*/ ctx[3]);
    			t3 = space();
    			if (if_block) if_block.c();
    			t4 = space();
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, t3, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, t4, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*storyPublisher*/ 8) set_data_dev(t2, /*storyPublisher*/ ctx[3]);
    			if (Config.articles.showPublisher && Config.articles.showDate) if_block.p(ctx, dirty);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(t3);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(t4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$3.name,
    		type: "if",
    		source: "(72:7) {#if Config.articles.showPublisher}",
    		ctx
    	});

    	return block;
    }

    // (75:7) {#if Config.articles.showPublisher && Config.articles.showDate}
    function create_if_block_4$2(ctx) {
    	let t_value = Config.text.articles.on + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$2.name,
    		type: "if",
    		source: "(75:7) {#if Config.articles.showPublisher && Config.articles.showDate}",
    		ctx
    	});

    	return block;
    }

    // (77:11) {#if Config.articles.showDate}
    function create_if_block_2$3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text(/*storyDate*/ ctx[4]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*storyDate*/ 16) set_data_dev(t, /*storyDate*/ ctx[4]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$3.name,
    		type: "if",
    		source: "(77:11) {#if Config.articles.showDate}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$7(ctx) {
    	let div;
    	let if_block = /*stories*/ ctx[0].length > 0 && create_if_block$3(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			attr_dev(div, "class", "container svelte-yknc01");
    			add_location(div, file$7, 51, 0, 2176);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*stories*/ ctx[0].length > 0) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$3(ctx);
    					if_block.c();
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const imagePlaceholder = 'https://reviverestore.org/wp-content/uploads/2017/05/placeholder-image-cropped.jpg';

    function instance$7($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('News', slots, []);
    	let { stories } = $$props;
    	let body;
    	let selectedStory = 0;
    	let storyTitle;
    	let storyImage;
    	let storyPublisher;
    	let storyDate;

    	function updateMainStory(id) {
    		selectedStory = id;
    		$$invalidate(2, storyImage = stories[selectedStory].image);
    		$$invalidate(1, storyTitle = stories[selectedStory].title);
    		$$invalidate(3, storyPublisher = stories[selectedStory].publisher);
    		$$invalidate(4, storyDate = stories[selectedStory].date);

    		// We need to do insert the text into the DOM this way due to how we get everything from the backend
    		if (body) {
    			body.innerHTML = stories[selectedStory].body;
    		}
    	}

    	onMount(() => {
    		body = document.querySelector('.body-content');
    		updateMainStory(0);
    		updateOtherStories();
    	});

    	function updateOtherStories() {
    		stories.forEach((story, index) => {
    			const container = document.querySelector('.all-stories');
    			const storyContainer = document.createElement('div');
    			storyContainer.classList.add('story', 'ellipsis', 'pt-3', 'pb-2', 'pl-4', 'pr-4');
    			const title = document.createElement('h6');
    			const body = document.createElement('div');
    			const date = document.createElement('small');
    			title.innerHTML = story.title;
    			body.innerHTML = story.body;
    			date.innerHTML = story.date;

    			storyContainer === null || storyContainer === void 0
    			? void 0
    			: storyContainer.appendChild(title);

    			storyContainer === null || storyContainer === void 0
    			? void 0
    			: storyContainer.appendChild(date);

    			storyContainer === null || storyContainer === void 0
    			? void 0
    			: storyContainer.appendChild(body);

    			storyContainer.setAttribute('data-id', index.toString());

    			storyContainer.addEventListener('click', () => {
    				updateMainStory(index);
    			});

    			container === null || container === void 0
    			? void 0
    			: container.appendChild(storyContainer);
    		});
    	}

    	const writable_props = ['stories'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<News> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('stories' in $$props) $$invalidate(0, stories = $$props.stories);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		Config,
    		imagePlaceholder,
    		stories,
    		body,
    		selectedStory,
    		storyTitle,
    		storyImage,
    		storyPublisher,
    		storyDate,
    		updateMainStory,
    		updateOtherStories
    	});

    	$$self.$inject_state = $$props => {
    		if ('stories' in $$props) $$invalidate(0, stories = $$props.stories);
    		if ('body' in $$props) body = $$props.body;
    		if ('selectedStory' in $$props) selectedStory = $$props.selectedStory;
    		if ('storyTitle' in $$props) $$invalidate(1, storyTitle = $$props.storyTitle);
    		if ('storyImage' in $$props) $$invalidate(2, storyImage = $$props.storyImage);
    		if ('storyPublisher' in $$props) $$invalidate(3, storyPublisher = $$props.storyPublisher);
    		if ('storyDate' in $$props) $$invalidate(4, storyDate = $$props.storyDate);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [stories, storyTitle, storyImage, storyPublisher, storyDate];
    }

    class News extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$7, create_fragment$7, safe_not_equal, { stories: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "News",
    			options,
    			id: create_fragment$7.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*stories*/ ctx[0] === undefined && !('stories' in props)) {
    			console.warn("<News> was created without expected prop 'stories'");
    		}
    	}

    	get stories() {
    		throw new Error("<News>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set stories(value) {
    		throw new Error("<News>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /*! @license DOMPurify 2.3.9 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/2.3.9/LICENSE */

    var purify = createCommonjsModule(function (module, exports) {
    (function (global, factory) {
      module.exports = factory() ;
    })(commonjsGlobal, (function () {
      function _typeof(obj) {
        "@babel/helpers - typeof";

        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
          return typeof obj;
        } : function (obj) {
          return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        }, _typeof(obj);
      }

      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };

        return _setPrototypeOf(o, p);
      }

      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;

        try {
          Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
          return true;
        } catch (e) {
          return false;
        }
      }

      function _construct(Parent, args, Class) {
        if (_isNativeReflectConstruct()) {
          _construct = Reflect.construct;
        } else {
          _construct = function _construct(Parent, args, Class) {
            var a = [null];
            a.push.apply(a, args);
            var Constructor = Function.bind.apply(Parent, a);
            var instance = new Constructor();
            if (Class) _setPrototypeOf(instance, Class.prototype);
            return instance;
          };
        }

        return _construct.apply(null, arguments);
      }

      function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
      }

      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr)) return _arrayLikeToArray(arr);
      }

      function _iterableToArray(iter) {
        if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
      }

      function _unsupportedIterableToArray(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
      }

      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;

        for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

        return arr2;
      }

      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      var hasOwnProperty = Object.hasOwnProperty,
          setPrototypeOf = Object.setPrototypeOf,
          isFrozen = Object.isFrozen,
          getPrototypeOf = Object.getPrototypeOf,
          getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var freeze = Object.freeze,
          seal = Object.seal,
          create = Object.create; // eslint-disable-line import/no-mutable-exports

      var _ref = typeof Reflect !== 'undefined' && Reflect,
          apply = _ref.apply,
          construct = _ref.construct;

      if (!apply) {
        apply = function apply(fun, thisValue, args) {
          return fun.apply(thisValue, args);
        };
      }

      if (!freeze) {
        freeze = function freeze(x) {
          return x;
        };
      }

      if (!seal) {
        seal = function seal(x) {
          return x;
        };
      }

      if (!construct) {
        construct = function construct(Func, args) {
          return _construct(Func, _toConsumableArray(args));
        };
      }

      var arrayForEach = unapply(Array.prototype.forEach);
      var arrayPop = unapply(Array.prototype.pop);
      var arrayPush = unapply(Array.prototype.push);
      var stringToLowerCase = unapply(String.prototype.toLowerCase);
      var stringMatch = unapply(String.prototype.match);
      var stringReplace = unapply(String.prototype.replace);
      var stringIndexOf = unapply(String.prototype.indexOf);
      var stringTrim = unapply(String.prototype.trim);
      var regExpTest = unapply(RegExp.prototype.test);
      var typeErrorCreate = unconstruct(TypeError);
      function unapply(func) {
        return function (thisArg) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          return apply(func, thisArg, args);
        };
      }
      function unconstruct(func) {
        return function () {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          return construct(func, args);
        };
      }
      /* Add properties to a lookup table */

      function addToSet(set, array, transformCaseFunc) {
        transformCaseFunc = transformCaseFunc ? transformCaseFunc : stringToLowerCase;

        if (setPrototypeOf) {
          // Make 'in' and truthy checks like Boolean(set.constructor)
          // independent of any properties defined on Object.prototype.
          // Prevent prototype setters from intercepting set as a this value.
          setPrototypeOf(set, null);
        }

        var l = array.length;

        while (l--) {
          var element = array[l];

          if (typeof element === 'string') {
            var lcElement = transformCaseFunc(element);

            if (lcElement !== element) {
              // Config presets (e.g. tags.js, attrs.js) are immutable.
              if (!isFrozen(array)) {
                array[l] = lcElement;
              }

              element = lcElement;
            }
          }

          set[element] = true;
        }

        return set;
      }
      /* Shallow clone an object */

      function clone(object) {
        var newObject = create(null);
        var property;

        for (property in object) {
          if (apply(hasOwnProperty, object, [property])) {
            newObject[property] = object[property];
          }
        }

        return newObject;
      }
      /* IE10 doesn't support __lookupGetter__ so lets'
       * simulate it. It also automatically checks
       * if the prop is function or getter and behaves
       * accordingly. */

      function lookupGetter(object, prop) {
        while (object !== null) {
          var desc = getOwnPropertyDescriptor(object, prop);

          if (desc) {
            if (desc.get) {
              return unapply(desc.get);
            }

            if (typeof desc.value === 'function') {
              return unapply(desc.value);
            }
          }

          object = getPrototypeOf(object);
        }

        function fallbackValue(element) {
          console.warn('fallback value for', element);
          return null;
        }

        return fallbackValue;
      }

      var html$1 = freeze(['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']); // SVG

      var svg$1 = freeze(['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'style', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'view', 'vkern']);
      var svgFilters = freeze(['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence']); // List of SVG elements that are disallowed by default.
      // We still need to know them so that we can do namespace
      // checks properly in case one wants to add them to
      // allow-list.

      var svgDisallowed = freeze(['animate', 'color-profile', 'cursor', 'discard', 'fedropshadow', 'font-face', 'font-face-format', 'font-face-name', 'font-face-src', 'font-face-uri', 'foreignobject', 'hatch', 'hatchpath', 'mesh', 'meshgradient', 'meshpatch', 'meshrow', 'missing-glyph', 'script', 'set', 'solidcolor', 'unknown', 'use']);
      var mathMl$1 = freeze(['math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover']); // Similarly to SVG, we want to know all MathML elements,
      // even those that we disallow by default.

      var mathMlDisallowed = freeze(['maction', 'maligngroup', 'malignmark', 'mlongdiv', 'mscarries', 'mscarry', 'msgroup', 'mstack', 'msline', 'msrow', 'semantics', 'annotation', 'annotation-xml', 'mprescripts', 'none']);
      var text = freeze(['#text']);

      var html = freeze(['accept', 'action', 'align', 'alt', 'autocapitalize', 'autocomplete', 'autopictureinpicture', 'autoplay', 'background', 'bgcolor', 'border', 'capture', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'controls', 'controlslist', 'coords', 'crossorigin', 'datetime', 'decoding', 'default', 'dir', 'disabled', 'disablepictureinpicture', 'disableremoteplayback', 'download', 'draggable', 'enctype', 'enterkeyhint', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'inputmode', 'integrity', 'ismap', 'kind', 'label', 'lang', 'list', 'loading', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'minlength', 'multiple', 'muted', 'name', 'nonce', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'playsinline', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'sizes', 'span', 'srclang', 'start', 'src', 'srcset', 'step', 'style', 'summary', 'tabindex', 'title', 'translate', 'type', 'usemap', 'valign', 'value', 'width', 'xmlns', 'slot']);
      var svg = freeze(['accent-height', 'accumulate', 'additive', 'alignment-baseline', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'class', 'clip', 'clippathunits', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'filterunits', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'height', 'href', 'id', 'image-rendering', 'in', 'in2', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lang', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'media', 'method', 'mode', 'min', 'name', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'preserveaspectratio', 'primitiveunits', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'specularconstant', 'specularexponent', 'spreadmethod', 'startoffset', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'style', 'surfacescale', 'systemlanguage', 'tabindex', 'targetx', 'targety', 'transform', 'transform-origin', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'type', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'version', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'width', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan']);
      var mathMl = freeze(['accent', 'accentunder', 'align', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'dir', 'display', 'displaystyle', 'encoding', 'fence', 'frame', 'height', 'href', 'id', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', 'width', 'xmlns']);
      var xml = freeze(['xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink']);

      var MUSTACHE_EXPR = seal(/\{\{[\w\W]*|[\w\W]*\}\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode

      var ERB_EXPR = seal(/<%[\w\W]*|[\w\W]*%>/gm);
      var DATA_ATTR = seal(/^data-[\-\w.\u00B7-\uFFFF]/); // eslint-disable-line no-useless-escape

      var ARIA_ATTR = seal(/^aria-[\-\w]+$/); // eslint-disable-line no-useless-escape

      var IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i // eslint-disable-line no-useless-escape
      );
      var IS_SCRIPT_OR_DATA = seal(/^(?:\w+script|data):/i);
      var ATTR_WHITESPACE = seal(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g // eslint-disable-line no-control-regex
      );
      var DOCTYPE_NAME = seal(/^html$/i);

      var getGlobal = function getGlobal() {
        return typeof window === 'undefined' ? null : window;
      };
      /**
       * Creates a no-op policy for internal use only.
       * Don't export this function outside this module!
       * @param {?TrustedTypePolicyFactory} trustedTypes The policy factory.
       * @param {Document} document The document object (to determine policy name suffix)
       * @return {?TrustedTypePolicy} The policy created (or null, if Trusted Types
       * are not supported).
       */


      var _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, document) {
        if (_typeof(trustedTypes) !== 'object' || typeof trustedTypes.createPolicy !== 'function') {
          return null;
        } // Allow the callers to control the unique policy name
        // by adding a data-tt-policy-suffix to the script element with the DOMPurify.
        // Policy creation with duplicate names throws in Trusted Types.


        var suffix = null;
        var ATTR_NAME = 'data-tt-policy-suffix';

        if (document.currentScript && document.currentScript.hasAttribute(ATTR_NAME)) {
          suffix = document.currentScript.getAttribute(ATTR_NAME);
        }

        var policyName = 'dompurify' + (suffix ? '#' + suffix : '');

        try {
          return trustedTypes.createPolicy(policyName, {
            createHTML: function createHTML(html) {
              return html;
            }
          });
        } catch (_) {
          // Policy creation failed (most likely another DOMPurify script has
          // already run). Skip creating the policy, as this will only cause errors
          // if TT are enforced.
          console.warn('TrustedTypes policy ' + policyName + ' could not be created.');
          return null;
        }
      };

      function createDOMPurify() {
        var window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();

        var DOMPurify = function DOMPurify(root) {
          return createDOMPurify(root);
        };
        /**
         * Version label, exposed for easier checks
         * if DOMPurify is up to date or not
         */


        DOMPurify.version = '2.3.9';
        /**
         * Array of elements that DOMPurify removed during sanitation.
         * Empty if nothing was removed.
         */

        DOMPurify.removed = [];

        if (!window || !window.document || window.document.nodeType !== 9) {
          // Not running in a browser, provide a factory function
          // so that you can pass your own Window
          DOMPurify.isSupported = false;
          return DOMPurify;
        }

        var originalDocument = window.document;
        var document = window.document;
        var DocumentFragment = window.DocumentFragment,
            HTMLTemplateElement = window.HTMLTemplateElement,
            Node = window.Node,
            Element = window.Element,
            NodeFilter = window.NodeFilter,
            _window$NamedNodeMap = window.NamedNodeMap,
            NamedNodeMap = _window$NamedNodeMap === void 0 ? window.NamedNodeMap || window.MozNamedAttrMap : _window$NamedNodeMap,
            HTMLFormElement = window.HTMLFormElement,
            DOMParser = window.DOMParser,
            trustedTypes = window.trustedTypes;
        var ElementPrototype = Element.prototype;
        var cloneNode = lookupGetter(ElementPrototype, 'cloneNode');
        var getNextSibling = lookupGetter(ElementPrototype, 'nextSibling');
        var getChildNodes = lookupGetter(ElementPrototype, 'childNodes');
        var getParentNode = lookupGetter(ElementPrototype, 'parentNode'); // As per issue #47, the web-components registry is inherited by a
        // new document created via createHTMLDocument. As per the spec
        // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)
        // a new empty registry is used when creating a template contents owner
        // document, so we use that as our parent document to ensure nothing
        // is inherited.

        if (typeof HTMLTemplateElement === 'function') {
          var template = document.createElement('template');

          if (template.content && template.content.ownerDocument) {
            document = template.content.ownerDocument;
          }
        }

        var trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, originalDocument);

        var emptyHTML = trustedTypesPolicy ? trustedTypesPolicy.createHTML('') : '';
        var _document = document,
            implementation = _document.implementation,
            createNodeIterator = _document.createNodeIterator,
            createDocumentFragment = _document.createDocumentFragment,
            getElementsByTagName = _document.getElementsByTagName;
        var importNode = originalDocument.importNode;
        var documentMode = {};

        try {
          documentMode = clone(document).documentMode ? document.documentMode : {};
        } catch (_) {}

        var hooks = {};
        /**
         * Expose whether this browser supports running the full DOMPurify.
         */

        DOMPurify.isSupported = typeof getParentNode === 'function' && implementation && typeof implementation.createHTMLDocument !== 'undefined' && documentMode !== 9;
        var MUSTACHE_EXPR$1 = MUSTACHE_EXPR,
            ERB_EXPR$1 = ERB_EXPR,
            DATA_ATTR$1 = DATA_ATTR,
            ARIA_ATTR$1 = ARIA_ATTR,
            IS_SCRIPT_OR_DATA$1 = IS_SCRIPT_OR_DATA,
            ATTR_WHITESPACE$1 = ATTR_WHITESPACE;
        var IS_ALLOWED_URI$1 = IS_ALLOWED_URI;
        /**
         * We consider the elements and attributes below to be safe. Ideally
         * don't add any new ones but feel free to remove unwanted ones.
         */

        /* allowed element names */

        var ALLOWED_TAGS = null;
        var DEFAULT_ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray(html$1), _toConsumableArray(svg$1), _toConsumableArray(svgFilters), _toConsumableArray(mathMl$1), _toConsumableArray(text)));
        /* Allowed attribute names */

        var ALLOWED_ATTR = null;
        var DEFAULT_ALLOWED_ATTR = addToSet({}, [].concat(_toConsumableArray(html), _toConsumableArray(svg), _toConsumableArray(mathMl), _toConsumableArray(xml)));
        /*
         * Configure how DOMPUrify should handle custom elements and their attributes as well as customized built-in elements.
         * @property {RegExp|Function|null} tagNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any custom elements)
         * @property {RegExp|Function|null} attributeNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any attributes not on the allow list)
         * @property {boolean} allowCustomizedBuiltInElements allow custom elements derived from built-ins if they pass CUSTOM_ELEMENT_HANDLING.tagNameCheck. Default: `false`.
         */

        var CUSTOM_ELEMENT_HANDLING = Object.seal(Object.create(null, {
          tagNameCheck: {
            writable: true,
            configurable: false,
            enumerable: true,
            value: null
          },
          attributeNameCheck: {
            writable: true,
            configurable: false,
            enumerable: true,
            value: null
          },
          allowCustomizedBuiltInElements: {
            writable: true,
            configurable: false,
            enumerable: true,
            value: false
          }
        }));
        /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */

        var FORBID_TAGS = null;
        /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */

        var FORBID_ATTR = null;
        /* Decide if ARIA attributes are okay */

        var ALLOW_ARIA_ATTR = true;
        /* Decide if custom data attributes are okay */

        var ALLOW_DATA_ATTR = true;
        /* Decide if unknown protocols are okay */

        var ALLOW_UNKNOWN_PROTOCOLS = false;
        /* Output should be safe for common template engines.
         * This means, DOMPurify removes data attributes, mustaches and ERB
         */

        var SAFE_FOR_TEMPLATES = false;
        /* Decide if document with <html>... should be returned */

        var WHOLE_DOCUMENT = false;
        /* Track whether config is already set on this instance of DOMPurify. */

        var SET_CONFIG = false;
        /* Decide if all elements (e.g. style, script) must be children of
         * document.body. By default, browsers might move them to document.head */

        var FORCE_BODY = false;
        /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html
         * string (or a TrustedHTML object if Trusted Types are supported).
         * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead
         */

        var RETURN_DOM = false;
        /* Decide if a DOM `DocumentFragment` should be returned, instead of a html
         * string  (or a TrustedHTML object if Trusted Types are supported) */

        var RETURN_DOM_FRAGMENT = false;
        /* Try to return a Trusted Type object instead of a string, return a string in
         * case Trusted Types are not supported  */

        var RETURN_TRUSTED_TYPE = false;
        /* Output should be free from DOM clobbering attacks? */

        var SANITIZE_DOM = true;
        /* Keep element content when removing element? */

        var KEEP_CONTENT = true;
        /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead
         * of importing it into a new Document and returning a sanitized copy */

        var IN_PLACE = false;
        /* Allow usage of profiles like html, svg and mathMl */

        var USE_PROFILES = {};
        /* Tags to ignore content of when KEEP_CONTENT is true */

        var FORBID_CONTENTS = null;
        var DEFAULT_FORBID_CONTENTS = addToSet({}, ['annotation-xml', 'audio', 'colgroup', 'desc', 'foreignobject', 'head', 'iframe', 'math', 'mi', 'mn', 'mo', 'ms', 'mtext', 'noembed', 'noframes', 'noscript', 'plaintext', 'script', 'style', 'svg', 'template', 'thead', 'title', 'video', 'xmp']);
        /* Tags that are safe for data: URIs */

        var DATA_URI_TAGS = null;
        var DEFAULT_DATA_URI_TAGS = addToSet({}, ['audio', 'video', 'img', 'source', 'image', 'track']);
        /* Attributes safe for values like "javascript:" */

        var URI_SAFE_ATTRIBUTES = null;
        var DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ['alt', 'class', 'for', 'id', 'label', 'name', 'pattern', 'placeholder', 'role', 'summary', 'title', 'value', 'style', 'xmlns']);
        var MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
        var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
        var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
        /* Document namespace */

        var NAMESPACE = HTML_NAMESPACE;
        var IS_EMPTY_INPUT = false;
        /* Parsing of strict XHTML documents */

        var PARSER_MEDIA_TYPE;
        var SUPPORTED_PARSER_MEDIA_TYPES = ['application/xhtml+xml', 'text/html'];
        var DEFAULT_PARSER_MEDIA_TYPE = 'text/html';
        var transformCaseFunc;
        /* Keep a reference to config to pass to hooks */

        var CONFIG = null;
        /* Ideally, do not touch anything below this line */

        /* ______________________________________________ */

        var formElement = document.createElement('form');

        var isRegexOrFunction = function isRegexOrFunction(testValue) {
          return testValue instanceof RegExp || testValue instanceof Function;
        };
        /**
         * _parseConfig
         *
         * @param  {Object} cfg optional config literal
         */
        // eslint-disable-next-line complexity


        var _parseConfig = function _parseConfig(cfg) {
          if (CONFIG && CONFIG === cfg) {
            return;
          }
          /* Shield configuration object from tampering */


          if (!cfg || _typeof(cfg) !== 'object') {
            cfg = {};
          }
          /* Shield configuration object from prototype pollution */


          cfg = clone(cfg);
          PARSER_MEDIA_TYPE = // eslint-disable-next-line unicorn/prefer-includes
          SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1 ? PARSER_MEDIA_TYPE = DEFAULT_PARSER_MEDIA_TYPE : PARSER_MEDIA_TYPE = cfg.PARSER_MEDIA_TYPE; // HTML tags and attributes are not case-sensitive, converting to lowercase. Keeping XHTML as is.

          transformCaseFunc = PARSER_MEDIA_TYPE === 'application/xhtml+xml' ? function (x) {
            return x;
          } : stringToLowerCase;
          /* Set configuration parameters */

          ALLOWED_TAGS = 'ALLOWED_TAGS' in cfg ? addToSet({}, cfg.ALLOWED_TAGS, transformCaseFunc) : DEFAULT_ALLOWED_TAGS;
          ALLOWED_ATTR = 'ALLOWED_ATTR' in cfg ? addToSet({}, cfg.ALLOWED_ATTR, transformCaseFunc) : DEFAULT_ALLOWED_ATTR;
          URI_SAFE_ATTRIBUTES = 'ADD_URI_SAFE_ATTR' in cfg ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), // eslint-disable-line indent
          cfg.ADD_URI_SAFE_ATTR, // eslint-disable-line indent
          transformCaseFunc // eslint-disable-line indent
          ) // eslint-disable-line indent
          : DEFAULT_URI_SAFE_ATTRIBUTES;
          DATA_URI_TAGS = 'ADD_DATA_URI_TAGS' in cfg ? addToSet(clone(DEFAULT_DATA_URI_TAGS), // eslint-disable-line indent
          cfg.ADD_DATA_URI_TAGS, // eslint-disable-line indent
          transformCaseFunc // eslint-disable-line indent
          ) // eslint-disable-line indent
          : DEFAULT_DATA_URI_TAGS;
          FORBID_CONTENTS = 'FORBID_CONTENTS' in cfg ? addToSet({}, cfg.FORBID_CONTENTS, transformCaseFunc) : DEFAULT_FORBID_CONTENTS;
          FORBID_TAGS = 'FORBID_TAGS' in cfg ? addToSet({}, cfg.FORBID_TAGS, transformCaseFunc) : {};
          FORBID_ATTR = 'FORBID_ATTR' in cfg ? addToSet({}, cfg.FORBID_ATTR, transformCaseFunc) : {};
          USE_PROFILES = 'USE_PROFILES' in cfg ? cfg.USE_PROFILES : false;
          ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true

          ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true

          ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false

          SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false

          WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false

          RETURN_DOM = cfg.RETURN_DOM || false; // Default false

          RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false

          RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false

          FORCE_BODY = cfg.FORCE_BODY || false; // Default false

          SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true

          KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true

          IN_PLACE = cfg.IN_PLACE || false; // Default false

          IS_ALLOWED_URI$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI$1;
          NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;

          if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)) {
            CUSTOM_ELEMENT_HANDLING.tagNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;
          }

          if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)) {
            CUSTOM_ELEMENT_HANDLING.attributeNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;
          }

          if (cfg.CUSTOM_ELEMENT_HANDLING && typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements === 'boolean') {
            CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements = cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;
          }

          if (SAFE_FOR_TEMPLATES) {
            ALLOW_DATA_ATTR = false;
          }

          if (RETURN_DOM_FRAGMENT) {
            RETURN_DOM = true;
          }
          /* Parse profile info */


          if (USE_PROFILES) {
            ALLOWED_TAGS = addToSet({}, _toConsumableArray(text));
            ALLOWED_ATTR = [];

            if (USE_PROFILES.html === true) {
              addToSet(ALLOWED_TAGS, html$1);
              addToSet(ALLOWED_ATTR, html);
            }

            if (USE_PROFILES.svg === true) {
              addToSet(ALLOWED_TAGS, svg$1);
              addToSet(ALLOWED_ATTR, svg);
              addToSet(ALLOWED_ATTR, xml);
            }

            if (USE_PROFILES.svgFilters === true) {
              addToSet(ALLOWED_TAGS, svgFilters);
              addToSet(ALLOWED_ATTR, svg);
              addToSet(ALLOWED_ATTR, xml);
            }

            if (USE_PROFILES.mathMl === true) {
              addToSet(ALLOWED_TAGS, mathMl$1);
              addToSet(ALLOWED_ATTR, mathMl);
              addToSet(ALLOWED_ATTR, xml);
            }
          }
          /* Merge configuration parameters */


          if (cfg.ADD_TAGS) {
            if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {
              ALLOWED_TAGS = clone(ALLOWED_TAGS);
            }

            addToSet(ALLOWED_TAGS, cfg.ADD_TAGS, transformCaseFunc);
          }

          if (cfg.ADD_ATTR) {
            if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {
              ALLOWED_ATTR = clone(ALLOWED_ATTR);
            }

            addToSet(ALLOWED_ATTR, cfg.ADD_ATTR, transformCaseFunc);
          }

          if (cfg.ADD_URI_SAFE_ATTR) {
            addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR, transformCaseFunc);
          }

          if (cfg.FORBID_CONTENTS) {
            if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {
              FORBID_CONTENTS = clone(FORBID_CONTENTS);
            }

            addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS, transformCaseFunc);
          }
          /* Add #text in case KEEP_CONTENT is set to true */


          if (KEEP_CONTENT) {
            ALLOWED_TAGS['#text'] = true;
          }
          /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */


          if (WHOLE_DOCUMENT) {
            addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);
          }
          /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */


          if (ALLOWED_TAGS.table) {
            addToSet(ALLOWED_TAGS, ['tbody']);
            delete FORBID_TAGS.tbody;
          } // Prevent further manipulation of configuration.
          // Not available in IE8, Safari 5, etc.


          if (freeze) {
            freeze(cfg);
          }

          CONFIG = cfg;
        };

        var MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ['mi', 'mo', 'mn', 'ms', 'mtext']);
        var HTML_INTEGRATION_POINTS = addToSet({}, ['foreignobject', 'desc', 'title', 'annotation-xml']); // Certain elements are allowed in both SVG and HTML
        // namespace. We need to specify them explicitly
        // so that they don't get erroneously deleted from
        // HTML namespace.

        var COMMON_SVG_AND_HTML_ELEMENTS = addToSet({}, ['title', 'style', 'font', 'a', 'script']);
        /* Keep track of all possible SVG and MathML tags
         * so that we can perform the namespace checks
         * correctly. */

        var ALL_SVG_TAGS = addToSet({}, svg$1);
        addToSet(ALL_SVG_TAGS, svgFilters);
        addToSet(ALL_SVG_TAGS, svgDisallowed);
        var ALL_MATHML_TAGS = addToSet({}, mathMl$1);
        addToSet(ALL_MATHML_TAGS, mathMlDisallowed);
        /**
         *
         *
         * @param  {Element} element a DOM element whose namespace is being checked
         * @returns {boolean} Return false if the element has a
         *  namespace that a spec-compliant parser would never
         *  return. Return true otherwise.
         */

        var _checkValidNamespace = function _checkValidNamespace(element) {
          var parent = getParentNode(element); // In JSDOM, if we're inside shadow DOM, then parentNode
          // can be null. We just simulate parent in this case.

          if (!parent || !parent.tagName) {
            parent = {
              namespaceURI: HTML_NAMESPACE,
              tagName: 'template'
            };
          }

          var tagName = stringToLowerCase(element.tagName);
          var parentTagName = stringToLowerCase(parent.tagName);

          if (element.namespaceURI === SVG_NAMESPACE) {
            // The only way to switch from HTML namespace to SVG
            // is via <svg>. If it happens via any other tag, then
            // it should be killed.
            if (parent.namespaceURI === HTML_NAMESPACE) {
              return tagName === 'svg';
            } // The only way to switch from MathML to SVG is via
            // svg if parent is either <annotation-xml> or MathML
            // text integration points.


            if (parent.namespaceURI === MATHML_NAMESPACE) {
              return tagName === 'svg' && (parentTagName === 'annotation-xml' || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);
            } // We only allow elements that are defined in SVG
            // spec. All others are disallowed in SVG namespace.


            return Boolean(ALL_SVG_TAGS[tagName]);
          }

          if (element.namespaceURI === MATHML_NAMESPACE) {
            // The only way to switch from HTML namespace to MathML
            // is via <math>. If it happens via any other tag, then
            // it should be killed.
            if (parent.namespaceURI === HTML_NAMESPACE) {
              return tagName === 'math';
            } // The only way to switch from SVG to MathML is via
            // <math> and HTML integration points


            if (parent.namespaceURI === SVG_NAMESPACE) {
              return tagName === 'math' && HTML_INTEGRATION_POINTS[parentTagName];
            } // We only allow elements that are defined in MathML
            // spec. All others are disallowed in MathML namespace.


            return Boolean(ALL_MATHML_TAGS[tagName]);
          }

          if (element.namespaceURI === HTML_NAMESPACE) {
            // The only way to switch from SVG to HTML is via
            // HTML integration points, and from MathML to HTML
            // is via MathML text integration points
            if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {
              return false;
            }

            if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {
              return false;
            } // We disallow tags that are specific for MathML
            // or SVG and should never appear in HTML namespace


            return !ALL_MATHML_TAGS[tagName] && (COMMON_SVG_AND_HTML_ELEMENTS[tagName] || !ALL_SVG_TAGS[tagName]);
          } // The code should never reach this place (this means
          // that the element somehow got namespace that is not
          // HTML, SVG or MathML). Return false just in case.


          return false;
        };
        /**
         * _forceRemove
         *
         * @param  {Node} node a DOM node
         */


        var _forceRemove = function _forceRemove(node) {
          arrayPush(DOMPurify.removed, {
            element: node
          });

          try {
            // eslint-disable-next-line unicorn/prefer-dom-node-remove
            node.parentNode.removeChild(node);
          } catch (_) {
            try {
              node.outerHTML = emptyHTML;
            } catch (_) {
              node.remove();
            }
          }
        };
        /**
         * _removeAttribute
         *
         * @param  {String} name an Attribute name
         * @param  {Node} node a DOM node
         */


        var _removeAttribute = function _removeAttribute(name, node) {
          try {
            arrayPush(DOMPurify.removed, {
              attribute: node.getAttributeNode(name),
              from: node
            });
          } catch (_) {
            arrayPush(DOMPurify.removed, {
              attribute: null,
              from: node
            });
          }

          node.removeAttribute(name); // We void attribute values for unremovable "is"" attributes

          if (name === 'is' && !ALLOWED_ATTR[name]) {
            if (RETURN_DOM || RETURN_DOM_FRAGMENT) {
              try {
                _forceRemove(node);
              } catch (_) {}
            } else {
              try {
                node.setAttribute(name, '');
              } catch (_) {}
            }
          }
        };
        /**
         * _initDocument
         *
         * @param  {String} dirty a string of dirty markup
         * @return {Document} a DOM, filled with the dirty markup
         */


        var _initDocument = function _initDocument(dirty) {
          /* Create a HTML document */
          var doc;
          var leadingWhitespace;

          if (FORCE_BODY) {
            dirty = '<remove></remove>' + dirty;
          } else {
            /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */
            var matches = stringMatch(dirty, /^[\r\n\t ]+/);
            leadingWhitespace = matches && matches[0];
          }

          if (PARSER_MEDIA_TYPE === 'application/xhtml+xml') {
            // Root of XHTML doc must contain xmlns declaration (see https://www.w3.org/TR/xhtml1/normative.html#strict)
            dirty = '<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>' + dirty + '</body></html>';
          }

          var dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;
          /*
           * Use the DOMParser API by default, fallback later if needs be
           * DOMParser not work for svg when has multiple root element.
           */

          if (NAMESPACE === HTML_NAMESPACE) {
            try {
              doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);
            } catch (_) {}
          }
          /* Use createHTMLDocument in case DOMParser is not available */


          if (!doc || !doc.documentElement) {
            doc = implementation.createDocument(NAMESPACE, 'template', null);

            try {
              doc.documentElement.innerHTML = IS_EMPTY_INPUT ? '' : dirtyPayload;
            } catch (_) {// Syntax error if dirtyPayload is invalid xml
            }
          }

          var body = doc.body || doc.documentElement;

          if (dirty && leadingWhitespace) {
            body.insertBefore(document.createTextNode(leadingWhitespace), body.childNodes[0] || null);
          }
          /* Work on whole document or just its body */


          if (NAMESPACE === HTML_NAMESPACE) {
            return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];
          }

          return WHOLE_DOCUMENT ? doc.documentElement : body;
        };
        /**
         * _createIterator
         *
         * @param  {Document} root document/fragment to create iterator for
         * @return {Iterator} iterator instance
         */


        var _createIterator = function _createIterator(root) {
          return createNodeIterator.call(root.ownerDocument || root, root, // eslint-disable-next-line no-bitwise
          NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT, null, false);
        };
        /**
         * _isClobbered
         *
         * @param  {Node} elm element to check for clobbering attacks
         * @return {Boolean} true if clobbered, false if safe
         */


        var _isClobbered = function _isClobbered(elm) {
          return elm instanceof HTMLFormElement && (typeof elm.nodeName !== 'string' || typeof elm.textContent !== 'string' || typeof elm.removeChild !== 'function' || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== 'function' || typeof elm.setAttribute !== 'function' || typeof elm.namespaceURI !== 'string' || typeof elm.insertBefore !== 'function');
        };
        /**
         * _isNode
         *
         * @param  {Node} obj object to check whether it's a DOM node
         * @return {Boolean} true is object is a DOM node
         */


        var _isNode = function _isNode(object) {
          return _typeof(Node) === 'object' ? object instanceof Node : object && _typeof(object) === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string';
        };
        /**
         * _executeHook
         * Execute user configurable hooks
         *
         * @param  {String} entryPoint  Name of the hook's entry point
         * @param  {Node} currentNode node to work on with the hook
         * @param  {Object} data additional hook parameters
         */


        var _executeHook = function _executeHook(entryPoint, currentNode, data) {
          if (!hooks[entryPoint]) {
            return;
          }

          arrayForEach(hooks[entryPoint], function (hook) {
            hook.call(DOMPurify, currentNode, data, CONFIG);
          });
        };
        /**
         * _sanitizeElements
         *
         * @protect nodeName
         * @protect textContent
         * @protect removeChild
         *
         * @param   {Node} currentNode to check for permission to exist
         * @return  {Boolean} true if node was killed, false if left alive
         */


        var _sanitizeElements = function _sanitizeElements(currentNode) {
          var content;
          /* Execute a hook if present */

          _executeHook('beforeSanitizeElements', currentNode, null);
          /* Check if element is clobbered or can clobber */


          if (_isClobbered(currentNode)) {
            _forceRemove(currentNode);

            return true;
          }
          /* Check if tagname contains Unicode */


          if (regExpTest(/[\u0080-\uFFFF]/, currentNode.nodeName)) {
            _forceRemove(currentNode);

            return true;
          }
          /* Now let's check the element's type and name */


          var tagName = transformCaseFunc(currentNode.nodeName);
          /* Execute a hook if present */

          _executeHook('uponSanitizeElement', currentNode, {
            tagName: tagName,
            allowedTags: ALLOWED_TAGS
          });
          /* Detect mXSS attempts abusing namespace confusion */


          if (currentNode.hasChildNodes() && !_isNode(currentNode.firstElementChild) && (!_isNode(currentNode.content) || !_isNode(currentNode.content.firstElementChild)) && regExpTest(/<[/\w]/g, currentNode.innerHTML) && regExpTest(/<[/\w]/g, currentNode.textContent)) {
            _forceRemove(currentNode);

            return true;
          }
          /* Mitigate a problem with templates inside select */


          if (tagName === 'select' && regExpTest(/<template/i, currentNode.innerHTML)) {
            _forceRemove(currentNode);

            return true;
          }
          /* Remove element if anything forbids its presence */


          if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
            /* Check if we have a custom element to handle */
            if (!FORBID_TAGS[tagName] && _basicCustomElementTest(tagName)) {
              if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)) return false;
              if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)) return false;
            }
            /* Keep content except for bad-listed elements */


            if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {
              var parentNode = getParentNode(currentNode) || currentNode.parentNode;
              var childNodes = getChildNodes(currentNode) || currentNode.childNodes;

              if (childNodes && parentNode) {
                var childCount = childNodes.length;

                for (var i = childCount - 1; i >= 0; --i) {
                  parentNode.insertBefore(cloneNode(childNodes[i], true), getNextSibling(currentNode));
                }
              }
            }

            _forceRemove(currentNode);

            return true;
          }
          /* Check whether element has a valid namespace */


          if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {
            _forceRemove(currentNode);

            return true;
          }

          if ((tagName === 'noscript' || tagName === 'noembed') && regExpTest(/<\/no(script|embed)/i, currentNode.innerHTML)) {
            _forceRemove(currentNode);

            return true;
          }
          /* Sanitize element content to be template-safe */


          if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {
            /* Get the element's text content */
            content = currentNode.textContent;
            content = stringReplace(content, MUSTACHE_EXPR$1, ' ');
            content = stringReplace(content, ERB_EXPR$1, ' ');

            if (currentNode.textContent !== content) {
              arrayPush(DOMPurify.removed, {
                element: currentNode.cloneNode()
              });
              currentNode.textContent = content;
            }
          }
          /* Execute a hook if present */


          _executeHook('afterSanitizeElements', currentNode, null);

          return false;
        };
        /**
         * _isValidAttribute
         *
         * @param  {string} lcTag Lowercase tag name of containing element.
         * @param  {string} lcName Lowercase attribute name.
         * @param  {string} value Attribute value.
         * @return {Boolean} Returns true if `value` is valid, otherwise false.
         */
        // eslint-disable-next-line complexity


        var _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {
          /* Make sure attribute cannot clobber */
          if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) {
            return false;
          }
          /* Allow valid data-* attributes: At least one character after "-"
              (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)
              XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)
              We don't need to check the value; it's always URI safe. */


          if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR$1, lcName)) ; else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR$1, lcName)) ; else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {
            if ( // First condition does a very basic check if a) it's basically a valid custom element tagname AND
            // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
            // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck
            _basicCustomElementTest(lcTag) && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag)) && (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName) || CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)) || // Alternative, second condition checks if it's an `is`-attribute, AND
            // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
            lcName === 'is' && CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))) ; else {
              return false;
            }
            /* Check value is safe. First, is attr inert? If so, is safe */

          } else if (URI_SAFE_ATTRIBUTES[lcName]) ; else if (regExpTest(IS_ALLOWED_URI$1, stringReplace(value, ATTR_WHITESPACE$1, ''))) ; else if ((lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') && lcTag !== 'script' && stringIndexOf(value, 'data:') === 0 && DATA_URI_TAGS[lcTag]) ; else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA$1, stringReplace(value, ATTR_WHITESPACE$1, ''))) ; else if (!value) ; else {
            return false;
          }

          return true;
        };
        /**
         * _basicCustomElementCheck
         * checks if at least one dash is included in tagName, and it's not the first char
         * for more sophisticated checking see https://github.com/sindresorhus/validate-element-name
         * @param {string} tagName name of the tag of the node to sanitize
         */


        var _basicCustomElementTest = function _basicCustomElementTest(tagName) {
          return tagName.indexOf('-') > 0;
        };
        /**
         * _sanitizeAttributes
         *
         * @protect attributes
         * @protect nodeName
         * @protect removeAttribute
         * @protect setAttribute
         *
         * @param  {Node} currentNode to sanitize
         */


        var _sanitizeAttributes = function _sanitizeAttributes(currentNode) {
          var attr;
          var value;
          var lcName;
          var l;
          /* Execute a hook if present */

          _executeHook('beforeSanitizeAttributes', currentNode, null);

          var attributes = currentNode.attributes;
          /* Check if we have attributes; if not we might have a text node */

          if (!attributes) {
            return;
          }

          var hookEvent = {
            attrName: '',
            attrValue: '',
            keepAttr: true,
            allowedAttributes: ALLOWED_ATTR
          };
          l = attributes.length;
          /* Go backwards over all attributes; safely remove bad ones */

          while (l--) {
            attr = attributes[l];
            var _attr = attr,
                name = _attr.name,
                namespaceURI = _attr.namespaceURI;
            value = name === 'value' ? attr.value : stringTrim(attr.value);
            lcName = transformCaseFunc(name);
            /* Execute a hook if present */

            hookEvent.attrName = lcName;
            hookEvent.attrValue = value;
            hookEvent.keepAttr = true;
            hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set

            _executeHook('uponSanitizeAttribute', currentNode, hookEvent);

            value = hookEvent.attrValue;
            /* Did the hooks approve of the attribute? */

            if (hookEvent.forceKeepAttr) {
              continue;
            }
            /* Remove attribute */


            _removeAttribute(name, currentNode);
            /* Did the hooks approve of the attribute? */


            if (!hookEvent.keepAttr) {
              continue;
            }
            /* Work around a security issue in jQuery 3.0 */


            if (regExpTest(/\/>/i, value)) {
              _removeAttribute(name, currentNode);

              continue;
            }
            /* Sanitize attribute content to be template-safe */


            if (SAFE_FOR_TEMPLATES) {
              value = stringReplace(value, MUSTACHE_EXPR$1, ' ');
              value = stringReplace(value, ERB_EXPR$1, ' ');
            }
            /* Is `value` valid for this attribute? */


            var lcTag = transformCaseFunc(currentNode.nodeName);

            if (!_isValidAttribute(lcTag, lcName, value)) {
              continue;
            }
            /* Handle invalid data-* attribute set by try-catching it */


            try {
              if (namespaceURI) {
                currentNode.setAttributeNS(namespaceURI, name, value);
              } else {
                /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. "x-schema". */
                currentNode.setAttribute(name, value);
              }

              arrayPop(DOMPurify.removed);
            } catch (_) {}
          }
          /* Execute a hook if present */


          _executeHook('afterSanitizeAttributes', currentNode, null);
        };
        /**
         * _sanitizeShadowDOM
         *
         * @param  {DocumentFragment} fragment to iterate over recursively
         */


        var _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {
          var shadowNode;

          var shadowIterator = _createIterator(fragment);
          /* Execute a hook if present */


          _executeHook('beforeSanitizeShadowDOM', fragment, null);

          while (shadowNode = shadowIterator.nextNode()) {
            /* Execute a hook if present */
            _executeHook('uponSanitizeShadowNode', shadowNode, null);
            /* Sanitize tags and elements */


            if (_sanitizeElements(shadowNode)) {
              continue;
            }
            /* Deep shadow DOM detected */


            if (shadowNode.content instanceof DocumentFragment) {
              _sanitizeShadowDOM(shadowNode.content);
            }
            /* Check attributes, sanitize if necessary */


            _sanitizeAttributes(shadowNode);
          }
          /* Execute a hook if present */


          _executeHook('afterSanitizeShadowDOM', fragment, null);
        };
        /**
         * Sanitize
         * Public method providing core sanitation functionality
         *
         * @param {String|Node} dirty string or DOM node
         * @param {Object} configuration object
         */
        // eslint-disable-next-line complexity


        DOMPurify.sanitize = function (dirty, cfg) {
          var body;
          var importedNode;
          var currentNode;
          var oldNode;
          var returnNode;
          /* Make sure we have a string to sanitize.
            DO NOT return early, as this will return the wrong type if
            the user has requested a DOM object rather than a string */

          IS_EMPTY_INPUT = !dirty;

          if (IS_EMPTY_INPUT) {
            dirty = '<!-->';
          }
          /* Stringify, in case dirty is an object */


          if (typeof dirty !== 'string' && !_isNode(dirty)) {
            // eslint-disable-next-line no-negated-condition
            if (typeof dirty.toString !== 'function') {
              throw typeErrorCreate('toString is not a function');
            } else {
              dirty = dirty.toString();

              if (typeof dirty !== 'string') {
                throw typeErrorCreate('dirty is not a string, aborting');
              }
            }
          }
          /* Check we can run. Otherwise fall back or ignore */


          if (!DOMPurify.isSupported) {
            if (_typeof(window.toStaticHTML) === 'object' || typeof window.toStaticHTML === 'function') {
              if (typeof dirty === 'string') {
                return window.toStaticHTML(dirty);
              }

              if (_isNode(dirty)) {
                return window.toStaticHTML(dirty.outerHTML);
              }
            }

            return dirty;
          }
          /* Assign config vars */


          if (!SET_CONFIG) {
            _parseConfig(cfg);
          }
          /* Clean up removed elements */


          DOMPurify.removed = [];
          /* Check if dirty is correctly typed for IN_PLACE */

          if (typeof dirty === 'string') {
            IN_PLACE = false;
          }

          if (IN_PLACE) {
            /* Do some early pre-sanitization to avoid unsafe root nodes */
            if (dirty.nodeName) {
              var tagName = transformCaseFunc(dirty.nodeName);

              if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
                throw typeErrorCreate('root node is forbidden and cannot be sanitized in-place');
              }
            }
          } else if (dirty instanceof Node) {
            /* If dirty is a DOM element, append to an empty document to avoid
               elements being stripped by the parser */
            body = _initDocument('<!---->');
            importedNode = body.ownerDocument.importNode(dirty, true);

            if (importedNode.nodeType === 1 && importedNode.nodeName === 'BODY') {
              /* Node is already a body, use as is */
              body = importedNode;
            } else if (importedNode.nodeName === 'HTML') {
              body = importedNode;
            } else {
              // eslint-disable-next-line unicorn/prefer-dom-node-append
              body.appendChild(importedNode);
            }
          } else {
            /* Exit directly if we have nothing to do */
            if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT && // eslint-disable-next-line unicorn/prefer-includes
            dirty.indexOf('<') === -1) {
              return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;
            }
            /* Initialize the document to work on */


            body = _initDocument(dirty);
            /* Check we have a DOM node from the data */

            if (!body) {
              return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : '';
            }
          }
          /* Remove first element node (ours) if FORCE_BODY is set */


          if (body && FORCE_BODY) {
            _forceRemove(body.firstChild);
          }
          /* Get node iterator */


          var nodeIterator = _createIterator(IN_PLACE ? dirty : body);
          /* Now start iterating over the created document */


          while (currentNode = nodeIterator.nextNode()) {
            /* Fix IE's strange behavior with manipulated textNodes #89 */
            if (currentNode.nodeType === 3 && currentNode === oldNode) {
              continue;
            }
            /* Sanitize tags and elements */


            if (_sanitizeElements(currentNode)) {
              continue;
            }
            /* Shadow DOM detected, sanitize it */


            if (currentNode.content instanceof DocumentFragment) {
              _sanitizeShadowDOM(currentNode.content);
            }
            /* Check attributes, sanitize if necessary */


            _sanitizeAttributes(currentNode);

            oldNode = currentNode;
          }

          oldNode = null;
          /* If we sanitized `dirty` in-place, return it. */

          if (IN_PLACE) {
            return dirty;
          }
          /* Return sanitized string or DOM */


          if (RETURN_DOM) {
            if (RETURN_DOM_FRAGMENT) {
              returnNode = createDocumentFragment.call(body.ownerDocument);

              while (body.firstChild) {
                // eslint-disable-next-line unicorn/prefer-dom-node-append
                returnNode.appendChild(body.firstChild);
              }
            } else {
              returnNode = body;
            }

            if (ALLOWED_ATTR.shadowroot) {
              /*
                AdoptNode() is not used because internal state is not reset
                (e.g. the past names map of a HTMLFormElement), this is safe
                in theory but we would rather not risk another attack vector.
                The state that is cloned by importNode() is explicitly defined
                by the specs.
              */
              returnNode = importNode.call(originalDocument, returnNode, true);
            }

            return returnNode;
          }

          var serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;
          /* Serialize doctype if allowed */

          if (WHOLE_DOCUMENT && ALLOWED_TAGS['!doctype'] && body.ownerDocument && body.ownerDocument.doctype && body.ownerDocument.doctype.name && regExpTest(DOCTYPE_NAME, body.ownerDocument.doctype.name)) {
            serializedHTML = '<!DOCTYPE ' + body.ownerDocument.doctype.name + '>\n' + serializedHTML;
          }
          /* Sanitize final string template-safe */


          if (SAFE_FOR_TEMPLATES) {
            serializedHTML = stringReplace(serializedHTML, MUSTACHE_EXPR$1, ' ');
            serializedHTML = stringReplace(serializedHTML, ERB_EXPR$1, ' ');
          }

          return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;
        };
        /**
         * Public method to set the configuration once
         * setConfig
         *
         * @param {Object} cfg configuration object
         */


        DOMPurify.setConfig = function (cfg) {
          _parseConfig(cfg);

          SET_CONFIG = true;
        };
        /**
         * Public method to remove the configuration
         * clearConfig
         *
         */


        DOMPurify.clearConfig = function () {
          CONFIG = null;
          SET_CONFIG = false;
        };
        /**
         * Public method to check if an attribute value is valid.
         * Uses last set config, if any. Otherwise, uses config defaults.
         * isValidAttribute
         *
         * @param  {string} tag Tag name of containing element.
         * @param  {string} attr Attribute name.
         * @param  {string} value Attribute value.
         * @return {Boolean} Returns true if `value` is valid. Otherwise, returns false.
         */


        DOMPurify.isValidAttribute = function (tag, attr, value) {
          /* Initialize shared config vars if necessary. */
          if (!CONFIG) {
            _parseConfig({});
          }

          var lcTag = transformCaseFunc(tag);
          var lcName = transformCaseFunc(attr);
          return _isValidAttribute(lcTag, lcName, value);
        };
        /**
         * AddHook
         * Public method to add DOMPurify hooks
         *
         * @param {String} entryPoint entry point for the hook to add
         * @param {Function} hookFunction function to execute
         */


        DOMPurify.addHook = function (entryPoint, hookFunction) {
          if (typeof hookFunction !== 'function') {
            return;
          }

          hooks[entryPoint] = hooks[entryPoint] || [];
          arrayPush(hooks[entryPoint], hookFunction);
        };
        /**
         * RemoveHook
         * Public method to remove a DOMPurify hook at a given entryPoint
         * (pops it from the stack of hooks if more are present)
         *
         * @param {String} entryPoint entry point for the hook to remove
         * @return {Function} removed(popped) hook
         */


        DOMPurify.removeHook = function (entryPoint) {
          if (hooks[entryPoint]) {
            return arrayPop(hooks[entryPoint]);
          }
        };
        /**
         * RemoveHooks
         * Public method to remove all DOMPurify hooks at a given entryPoint
         *
         * @param  {String} entryPoint entry point for the hooks to remove
         */


        DOMPurify.removeHooks = function (entryPoint) {
          if (hooks[entryPoint]) {
            hooks[entryPoint] = [];
          }
        };
        /**
         * RemoveAllHooks
         * Public method to remove all DOMPurify hooks
         *
         */


        DOMPurify.removeAllHooks = function () {
          hooks = {};
        };

        return DOMPurify;
      }

      var purify = createDOMPurify();

      return purify;

    }));

    });

    var index_umd = createCommonjsModule(function (module, exports) {
    (function (global, factory) {
    	factory(exports) ;
    }(commonjsGlobal, (function (exports) {
    	var commonjsGlobal$1 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : typeof self !== 'undefined' ? self : {};

    	function unwrapExports (x) {
    		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    	}

    	function createCommonjsModule(fn, module) {
    		return module = { exports: {} }, fn(module, module.exports), module.exports;
    	}

    	var quill = createCommonjsModule(function (module, exports) {
    	/*!
    	 * Quill Editor v1.3.7
    	 * https://quilljs.com/
    	 * Copyright (c) 2014, Jason Chen
    	 * Copyright (c) 2013, salesforce.com
    	 */
    	(function webpackUniversalModuleDefinition(root, factory) {
    		module.exports = factory();
    	})(typeof self !== 'undefined' ? self : commonjsGlobal$1, function() {
    	return /******/ (function(modules) { // webpackBootstrap
    	/******/ 	// The module cache
    	/******/ 	var installedModules = {};
    	/******/
    	/******/ 	// The require function
    	/******/ 	function __webpack_require__(moduleId) {
    	/******/
    	/******/ 		// Check if module is in cache
    	/******/ 		if(installedModules[moduleId]) {
    	/******/ 			return installedModules[moduleId].exports;
    	/******/ 		}
    	/******/ 		// Create a new module (and put it into the cache)
    	/******/ 		var module = installedModules[moduleId] = {
    	/******/ 			i: moduleId,
    	/******/ 			l: false,
    	/******/ 			exports: {}
    	/******/ 		};
    	/******/
    	/******/ 		// Execute the module function
    	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    	/******/
    	/******/ 		// Flag the module as loaded
    	/******/ 		module.l = true;
    	/******/
    	/******/ 		// Return the exports of the module
    	/******/ 		return module.exports;
    	/******/ 	}
    	/******/
    	/******/
    	/******/ 	// expose the modules object (__webpack_modules__)
    	/******/ 	__webpack_require__.m = modules;
    	/******/
    	/******/ 	// expose the module cache
    	/******/ 	__webpack_require__.c = installedModules;
    	/******/
    	/******/ 	// define getter function for harmony exports
    	/******/ 	__webpack_require__.d = function(exports, name, getter) {
    	/******/ 		if(!__webpack_require__.o(exports, name)) {
    	/******/ 			Object.defineProperty(exports, name, {
    	/******/ 				configurable: false,
    	/******/ 				enumerable: true,
    	/******/ 				get: getter
    	/******/ 			});
    	/******/ 		}
    	/******/ 	};
    	/******/
    	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
    	/******/ 	__webpack_require__.n = function(module) {
    	/******/ 		var getter = module && module.__esModule ?
    	/******/ 			function getDefault() { return module['default']; } :
    	/******/ 			function getModuleExports() { return module; };
    	/******/ 		__webpack_require__.d(getter, 'a', getter);
    	/******/ 		return getter;
    	/******/ 	};
    	/******/
    	/******/ 	// Object.prototype.hasOwnProperty.call
    	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
    	/******/
    	/******/ 	// __webpack_public_path__
    	/******/ 	__webpack_require__.p = "";
    	/******/
    	/******/ 	// Load entry module and return exports
    	/******/ 	return __webpack_require__(__webpack_require__.s = 109);
    	/******/ })
    	/************************************************************************/
    	/******/ ([
    	/* 0 */
    	/***/ (function(module, exports, __webpack_require__) {

    	Object.defineProperty(exports, "__esModule", { value: true });
    	var container_1 = __webpack_require__(17);
    	var format_1 = __webpack_require__(18);
    	var leaf_1 = __webpack_require__(19);
    	var scroll_1 = __webpack_require__(45);
    	var inline_1 = __webpack_require__(46);
    	var block_1 = __webpack_require__(47);
    	var embed_1 = __webpack_require__(48);
    	var text_1 = __webpack_require__(49);
    	var attributor_1 = __webpack_require__(12);
    	var class_1 = __webpack_require__(32);
    	var style_1 = __webpack_require__(33);
    	var store_1 = __webpack_require__(31);
    	var Registry = __webpack_require__(1);
    	var Parchment = {
    	    Scope: Registry.Scope,
    	    create: Registry.create,
    	    find: Registry.find,
    	    query: Registry.query,
    	    register: Registry.register,
    	    Container: container_1.default,
    	    Format: format_1.default,
    	    Leaf: leaf_1.default,
    	    Embed: embed_1.default,
    	    Scroll: scroll_1.default,
    	    Block: block_1.default,
    	    Inline: inline_1.default,
    	    Text: text_1.default,
    	    Attributor: {
    	        Attribute: attributor_1.default,
    	        Class: class_1.default,
    	        Style: style_1.default,
    	        Store: store_1.default,
    	    },
    	};
    	exports.default = Parchment;


    	/***/ }),
    	/* 1 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var __extends = (this && this.__extends) || (function () {
    	    var extendStatics = Object.setPrototypeOf ||
    	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    	    return function (d, b) {
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(exports, "__esModule", { value: true });
    	var ParchmentError = /** @class */ (function (_super) {
    	    __extends(ParchmentError, _super);
    	    function ParchmentError(message) {
    	        var _this = this;
    	        message = '[Parchment] ' + message;
    	        _this = _super.call(this, message) || this;
    	        _this.message = message;
    	        _this.name = _this.constructor.name;
    	        return _this;
    	    }
    	    return ParchmentError;
    	}(Error));
    	exports.ParchmentError = ParchmentError;
    	var attributes = {};
    	var classes = {};
    	var tags = {};
    	var types = {};
    	exports.DATA_KEY = '__blot';
    	var Scope;
    	(function (Scope) {
    	    Scope[Scope["TYPE"] = 3] = "TYPE";
    	    Scope[Scope["LEVEL"] = 12] = "LEVEL";
    	    Scope[Scope["ATTRIBUTE"] = 13] = "ATTRIBUTE";
    	    Scope[Scope["BLOT"] = 14] = "BLOT";
    	    Scope[Scope["INLINE"] = 7] = "INLINE";
    	    Scope[Scope["BLOCK"] = 11] = "BLOCK";
    	    Scope[Scope["BLOCK_BLOT"] = 10] = "BLOCK_BLOT";
    	    Scope[Scope["INLINE_BLOT"] = 6] = "INLINE_BLOT";
    	    Scope[Scope["BLOCK_ATTRIBUTE"] = 9] = "BLOCK_ATTRIBUTE";
    	    Scope[Scope["INLINE_ATTRIBUTE"] = 5] = "INLINE_ATTRIBUTE";
    	    Scope[Scope["ANY"] = 15] = "ANY";
    	})(Scope = exports.Scope || (exports.Scope = {}));
    	function create(input, value) {
    	    var match = query(input);
    	    if (match == null) {
    	        throw new ParchmentError("Unable to create " + input + " blot");
    	    }
    	    var BlotClass = match;
    	    var node = 
    	    // @ts-ignore
    	    input instanceof Node || input['nodeType'] === Node.TEXT_NODE ? input : BlotClass.create(value);
    	    return new BlotClass(node, value);
    	}
    	exports.create = create;
    	function find(node, bubble) {
    	    if (bubble === void 0) { bubble = false; }
    	    if (node == null)
    	        return null;
    	    // @ts-ignore
    	    if (node[exports.DATA_KEY] != null)
    	        return node[exports.DATA_KEY].blot;
    	    if (bubble)
    	        return find(node.parentNode, bubble);
    	    return null;
    	}
    	exports.find = find;
    	function query(query, scope) {
    	    if (scope === void 0) { scope = Scope.ANY; }
    	    var match;
    	    if (typeof query === 'string') {
    	        match = types[query] || attributes[query];
    	        // @ts-ignore
    	    }
    	    else if (query instanceof Text || query['nodeType'] === Node.TEXT_NODE) {
    	        match = types['text'];
    	    }
    	    else if (typeof query === 'number') {
    	        if (query & Scope.LEVEL & Scope.BLOCK) {
    	            match = types['block'];
    	        }
    	        else if (query & Scope.LEVEL & Scope.INLINE) {
    	            match = types['inline'];
    	        }
    	    }
    	    else if (query instanceof HTMLElement) {
    	        var names = (query.getAttribute('class') || '').split(/\s+/);
    	        for (var i in names) {
    	            match = classes[names[i]];
    	            if (match)
    	                break;
    	        }
    	        match = match || tags[query.tagName];
    	    }
    	    if (match == null)
    	        return null;
    	    // @ts-ignore
    	    if (scope & Scope.LEVEL & match.scope && scope & Scope.TYPE & match.scope)
    	        return match;
    	    return null;
    	}
    	exports.query = query;
    	function register() {
    	    var Definitions = [];
    	    for (var _i = 0; _i < arguments.length; _i++) {
    	        Definitions[_i] = arguments[_i];
    	    }
    	    if (Definitions.length > 1) {
    	        return Definitions.map(function (d) {
    	            return register(d);
    	        });
    	    }
    	    var Definition = Definitions[0];
    	    if (typeof Definition.blotName !== 'string' && typeof Definition.attrName !== 'string') {
    	        throw new ParchmentError('Invalid definition');
    	    }
    	    else if (Definition.blotName === 'abstract') {
    	        throw new ParchmentError('Cannot register abstract class');
    	    }
    	    types[Definition.blotName || Definition.attrName] = Definition;
    	    if (typeof Definition.keyName === 'string') {
    	        attributes[Definition.keyName] = Definition;
    	    }
    	    else {
    	        if (Definition.className != null) {
    	            classes[Definition.className] = Definition;
    	        }
    	        if (Definition.tagName != null) {
    	            if (Array.isArray(Definition.tagName)) {
    	                Definition.tagName = Definition.tagName.map(function (tagName) {
    	                    return tagName.toUpperCase();
    	                });
    	            }
    	            else {
    	                Definition.tagName = Definition.tagName.toUpperCase();
    	            }
    	            var tagNames = Array.isArray(Definition.tagName) ? Definition.tagName : [Definition.tagName];
    	            tagNames.forEach(function (tag) {
    	                if (tags[tag] == null || Definition.className == null) {
    	                    tags[tag] = Definition;
    	                }
    	            });
    	        }
    	    }
    	    return Definition;
    	}
    	exports.register = register;


    	/***/ }),
    	/* 2 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var diff = __webpack_require__(51);
    	var equal = __webpack_require__(11);
    	var extend = __webpack_require__(3);
    	var op = __webpack_require__(20);


    	var NULL_CHARACTER = String.fromCharCode(0);  // Placeholder char for embed in diff()


    	var Delta = function (ops) {
    	  // Assume we are given a well formed ops
    	  if (Array.isArray(ops)) {
    	    this.ops = ops;
    	  } else if (ops != null && Array.isArray(ops.ops)) {
    	    this.ops = ops.ops;
    	  } else {
    	    this.ops = [];
    	  }
    	};


    	Delta.prototype.insert = function (text, attributes) {
    	  var newOp = {};
    	  if (text.length === 0) return this;
    	  newOp.insert = text;
    	  if (attributes != null && typeof attributes === 'object' && Object.keys(attributes).length > 0) {
    	    newOp.attributes = attributes;
    	  }
    	  return this.push(newOp);
    	};

    	Delta.prototype['delete'] = function (length) {
    	  if (length <= 0) return this;
    	  return this.push({ 'delete': length });
    	};

    	Delta.prototype.retain = function (length, attributes) {
    	  if (length <= 0) return this;
    	  var newOp = { retain: length };
    	  if (attributes != null && typeof attributes === 'object' && Object.keys(attributes).length > 0) {
    	    newOp.attributes = attributes;
    	  }
    	  return this.push(newOp);
    	};

    	Delta.prototype.push = function (newOp) {
    	  var index = this.ops.length;
    	  var lastOp = this.ops[index - 1];
    	  newOp = extend(true, {}, newOp);
    	  if (typeof lastOp === 'object') {
    	    if (typeof newOp['delete'] === 'number' && typeof lastOp['delete'] === 'number') {
    	      this.ops[index - 1] = { 'delete': lastOp['delete'] + newOp['delete'] };
    	      return this;
    	    }
    	    // Since it does not matter if we insert before or after deleting at the same index,
    	    // always prefer to insert first
    	    if (typeof lastOp['delete'] === 'number' && newOp.insert != null) {
    	      index -= 1;
    	      lastOp = this.ops[index - 1];
    	      if (typeof lastOp !== 'object') {
    	        this.ops.unshift(newOp);
    	        return this;
    	      }
    	    }
    	    if (equal(newOp.attributes, lastOp.attributes)) {
    	      if (typeof newOp.insert === 'string' && typeof lastOp.insert === 'string') {
    	        this.ops[index - 1] = { insert: lastOp.insert + newOp.insert };
    	        if (typeof newOp.attributes === 'object') this.ops[index - 1].attributes = newOp.attributes;
    	        return this;
    	      } else if (typeof newOp.retain === 'number' && typeof lastOp.retain === 'number') {
    	        this.ops[index - 1] = { retain: lastOp.retain + newOp.retain };
    	        if (typeof newOp.attributes === 'object') this.ops[index - 1].attributes = newOp.attributes;
    	        return this;
    	      }
    	    }
    	  }
    	  if (index === this.ops.length) {
    	    this.ops.push(newOp);
    	  } else {
    	    this.ops.splice(index, 0, newOp);
    	  }
    	  return this;
    	};

    	Delta.prototype.chop = function () {
    	  var lastOp = this.ops[this.ops.length - 1];
    	  if (lastOp && lastOp.retain && !lastOp.attributes) {
    	    this.ops.pop();
    	  }
    	  return this;
    	};

    	Delta.prototype.filter = function (predicate) {
    	  return this.ops.filter(predicate);
    	};

    	Delta.prototype.forEach = function (predicate) {
    	  this.ops.forEach(predicate);
    	};

    	Delta.prototype.map = function (predicate) {
    	  return this.ops.map(predicate);
    	};

    	Delta.prototype.partition = function (predicate) {
    	  var passed = [], failed = [];
    	  this.forEach(function(op) {
    	    var target = predicate(op) ? passed : failed;
    	    target.push(op);
    	  });
    	  return [passed, failed];
    	};

    	Delta.prototype.reduce = function (predicate, initial) {
    	  return this.ops.reduce(predicate, initial);
    	};

    	Delta.prototype.changeLength = function () {
    	  return this.reduce(function (length, elem) {
    	    if (elem.insert) {
    	      return length + op.length(elem);
    	    } else if (elem.delete) {
    	      return length - elem.delete;
    	    }
    	    return length;
    	  }, 0);
    	};

    	Delta.prototype.length = function () {
    	  return this.reduce(function (length, elem) {
    	    return length + op.length(elem);
    	  }, 0);
    	};

    	Delta.prototype.slice = function (start, end) {
    	  start = start || 0;
    	  if (typeof end !== 'number') end = Infinity;
    	  var ops = [];
    	  var iter = op.iterator(this.ops);
    	  var index = 0;
    	  while (index < end && iter.hasNext()) {
    	    var nextOp;
    	    if (index < start) {
    	      nextOp = iter.next(start - index);
    	    } else {
    	      nextOp = iter.next(end - index);
    	      ops.push(nextOp);
    	    }
    	    index += op.length(nextOp);
    	  }
    	  return new Delta(ops);
    	};


    	Delta.prototype.compose = function (other) {
    	  var thisIter = op.iterator(this.ops);
    	  var otherIter = op.iterator(other.ops);
    	  var ops = [];
    	  var firstOther = otherIter.peek();
    	  if (firstOther != null && typeof firstOther.retain === 'number' && firstOther.attributes == null) {
    	    var firstLeft = firstOther.retain;
    	    while (thisIter.peekType() === 'insert' && thisIter.peekLength() <= firstLeft) {
    	      firstLeft -= thisIter.peekLength();
    	      ops.push(thisIter.next());
    	    }
    	    if (firstOther.retain - firstLeft > 0) {
    	      otherIter.next(firstOther.retain - firstLeft);
    	    }
    	  }
    	  var delta = new Delta(ops);
    	  while (thisIter.hasNext() || otherIter.hasNext()) {
    	    if (otherIter.peekType() === 'insert') {
    	      delta.push(otherIter.next());
    	    } else if (thisIter.peekType() === 'delete') {
    	      delta.push(thisIter.next());
    	    } else {
    	      var length = Math.min(thisIter.peekLength(), otherIter.peekLength());
    	      var thisOp = thisIter.next(length);
    	      var otherOp = otherIter.next(length);
    	      if (typeof otherOp.retain === 'number') {
    	        var newOp = {};
    	        if (typeof thisOp.retain === 'number') {
    	          newOp.retain = length;
    	        } else {
    	          newOp.insert = thisOp.insert;
    	        }
    	        // Preserve null when composing with a retain, otherwise remove it for inserts
    	        var attributes = op.attributes.compose(thisOp.attributes, otherOp.attributes, typeof thisOp.retain === 'number');
    	        if (attributes) newOp.attributes = attributes;
    	        delta.push(newOp);

    	        // Optimization if rest of other is just retain
    	        if (!otherIter.hasNext() && equal(delta.ops[delta.ops.length - 1], newOp)) {
    	          var rest = new Delta(thisIter.rest());
    	          return delta.concat(rest).chop();
    	        }

    	      // Other op should be delete, we could be an insert or retain
    	      // Insert + delete cancels out
    	      } else if (typeof otherOp['delete'] === 'number' && typeof thisOp.retain === 'number') {
    	        delta.push(otherOp);
    	      }
    	    }
    	  }
    	  return delta.chop();
    	};

    	Delta.prototype.concat = function (other) {
    	  var delta = new Delta(this.ops.slice());
    	  if (other.ops.length > 0) {
    	    delta.push(other.ops[0]);
    	    delta.ops = delta.ops.concat(other.ops.slice(1));
    	  }
    	  return delta;
    	};

    	Delta.prototype.diff = function (other, index) {
    	  if (this.ops === other.ops) {
    	    return new Delta();
    	  }
    	  var strings = [this, other].map(function (delta) {
    	    return delta.map(function (op) {
    	      if (op.insert != null) {
    	        return typeof op.insert === 'string' ? op.insert : NULL_CHARACTER;
    	      }
    	      var prep = (delta === other) ? 'on' : 'with';
    	      throw new Error('diff() called ' + prep + ' non-document');
    	    }).join('');
    	  });
    	  var delta = new Delta();
    	  var diffResult = diff(strings[0], strings[1], index);
    	  var thisIter = op.iterator(this.ops);
    	  var otherIter = op.iterator(other.ops);
    	  diffResult.forEach(function (component) {
    	    var length = component[1].length;
    	    while (length > 0) {
    	      var opLength = 0;
    	      switch (component[0]) {
    	        case diff.INSERT:
    	          opLength = Math.min(otherIter.peekLength(), length);
    	          delta.push(otherIter.next(opLength));
    	          break;
    	        case diff.DELETE:
    	          opLength = Math.min(length, thisIter.peekLength());
    	          thisIter.next(opLength);
    	          delta['delete'](opLength);
    	          break;
    	        case diff.EQUAL:
    	          opLength = Math.min(thisIter.peekLength(), otherIter.peekLength(), length);
    	          var thisOp = thisIter.next(opLength);
    	          var otherOp = otherIter.next(opLength);
    	          if (equal(thisOp.insert, otherOp.insert)) {
    	            delta.retain(opLength, op.attributes.diff(thisOp.attributes, otherOp.attributes));
    	          } else {
    	            delta.push(otherOp)['delete'](opLength);
    	          }
    	          break;
    	      }
    	      length -= opLength;
    	    }
    	  });
    	  return delta.chop();
    	};

    	Delta.prototype.eachLine = function (predicate, newline) {
    	  newline = newline || '\n';
    	  var iter = op.iterator(this.ops);
    	  var line = new Delta();
    	  var i = 0;
    	  while (iter.hasNext()) {
    	    if (iter.peekType() !== 'insert') return;
    	    var thisOp = iter.peek();
    	    var start = op.length(thisOp) - iter.peekLength();
    	    var index = typeof thisOp.insert === 'string' ?
    	      thisOp.insert.indexOf(newline, start) - start : -1;
    	    if (index < 0) {
    	      line.push(iter.next());
    	    } else if (index > 0) {
    	      line.push(iter.next(index));
    	    } else {
    	      if (predicate(line, iter.next(1).attributes || {}, i) === false) {
    	        return;
    	      }
    	      i += 1;
    	      line = new Delta();
    	    }
    	  }
    	  if (line.length() > 0) {
    	    predicate(line, {}, i);
    	  }
    	};

    	Delta.prototype.transform = function (other, priority) {
    	  priority = !!priority;
    	  if (typeof other === 'number') {
    	    return this.transformPosition(other, priority);
    	  }
    	  var thisIter = op.iterator(this.ops);
    	  var otherIter = op.iterator(other.ops);
    	  var delta = new Delta();
    	  while (thisIter.hasNext() || otherIter.hasNext()) {
    	    if (thisIter.peekType() === 'insert' && (priority || otherIter.peekType() !== 'insert')) {
    	      delta.retain(op.length(thisIter.next()));
    	    } else if (otherIter.peekType() === 'insert') {
    	      delta.push(otherIter.next());
    	    } else {
    	      var length = Math.min(thisIter.peekLength(), otherIter.peekLength());
    	      var thisOp = thisIter.next(length);
    	      var otherOp = otherIter.next(length);
    	      if (thisOp['delete']) {
    	        // Our delete either makes their delete redundant or removes their retain
    	        continue;
    	      } else if (otherOp['delete']) {
    	        delta.push(otherOp);
    	      } else {
    	        // We retain either their retain or insert
    	        delta.retain(length, op.attributes.transform(thisOp.attributes, otherOp.attributes, priority));
    	      }
    	    }
    	  }
    	  return delta.chop();
    	};

    	Delta.prototype.transformPosition = function (index, priority) {
    	  priority = !!priority;
    	  var thisIter = op.iterator(this.ops);
    	  var offset = 0;
    	  while (thisIter.hasNext() && offset <= index) {
    	    var length = thisIter.peekLength();
    	    var nextType = thisIter.peekType();
    	    thisIter.next();
    	    if (nextType === 'delete') {
    	      index -= Math.min(length, index - offset);
    	      continue;
    	    } else if (nextType === 'insert' && (offset < index || !priority)) {
    	      index += length;
    	    }
    	    offset += length;
    	  }
    	  return index;
    	};


    	module.exports = Delta;


    	/***/ }),
    	/* 3 */
    	/***/ (function(module, exports) {

    	var hasOwn = Object.prototype.hasOwnProperty;
    	var toStr = Object.prototype.toString;
    	var defineProperty = Object.defineProperty;
    	var gOPD = Object.getOwnPropertyDescriptor;

    	var isArray = function isArray(arr) {
    		if (typeof Array.isArray === 'function') {
    			return Array.isArray(arr);
    		}

    		return toStr.call(arr) === '[object Array]';
    	};

    	var isPlainObject = function isPlainObject(obj) {
    		if (!obj || toStr.call(obj) !== '[object Object]') {
    			return false;
    		}

    		var hasOwnConstructor = hasOwn.call(obj, 'constructor');
    		var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
    		// Not own constructor property must be Object
    		if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
    			return false;
    		}

    		// Own properties are enumerated firstly, so to speed up,
    		// if last one is own, then all properties are own.
    		var key;
    		for (key in obj) { /**/ }

    		return typeof key === 'undefined' || hasOwn.call(obj, key);
    	};

    	// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target
    	var setProperty = function setProperty(target, options) {
    		if (defineProperty && options.name === '__proto__') {
    			defineProperty(target, options.name, {
    				enumerable: true,
    				configurable: true,
    				value: options.newValue,
    				writable: true
    			});
    		} else {
    			target[options.name] = options.newValue;
    		}
    	};

    	// Return undefined instead of __proto__ if '__proto__' is not an own property
    	var getProperty = function getProperty(obj, name) {
    		if (name === '__proto__') {
    			if (!hasOwn.call(obj, name)) {
    				return void 0;
    			} else if (gOPD) {
    				// In early versions of node, obj['__proto__'] is buggy when obj has
    				// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.
    				return gOPD(obj, name).value;
    			}
    		}

    		return obj[name];
    	};

    	module.exports = function extend() {
    		var options, name, src, copy, copyIsArray, clone;
    		var target = arguments[0];
    		var i = 1;
    		var length = arguments.length;
    		var deep = false;

    		// Handle a deep copy situation
    		if (typeof target === 'boolean') {
    			deep = target;
    			target = arguments[1] || {};
    			// skip the boolean and the target
    			i = 2;
    		}
    		if (target == null || (typeof target !== 'object' && typeof target !== 'function')) {
    			target = {};
    		}

    		for (; i < length; ++i) {
    			options = arguments[i];
    			// Only deal with non-null/undefined values
    			if (options != null) {
    				// Extend the base object
    				for (name in options) {
    					src = getProperty(target, name);
    					copy = getProperty(options, name);

    					// Prevent never-ending loop
    					if (target !== copy) {
    						// Recurse if we're merging plain objects or arrays
    						if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
    							if (copyIsArray) {
    								copyIsArray = false;
    								clone = src && isArray(src) ? src : [];
    							} else {
    								clone = src && isPlainObject(src) ? src : {};
    							}

    							// Never move original objects, clone them
    							setProperty(target, { name: name, newValue: extend(deep, clone, copy) });

    						// Don't bring in undefined values
    						} else if (typeof copy !== 'undefined') {
    							setProperty(target, { name: name, newValue: copy });
    						}
    					}
    				}
    			}
    		}

    		// Return the modified object
    		return target;
    	};


    	/***/ }),
    	/* 4 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.default = exports.BlockEmbed = exports.bubbleFormats = undefined;

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _extend = __webpack_require__(3);

    	var _extend2 = _interopRequireDefault(_extend);

    	var _quillDelta = __webpack_require__(2);

    	var _quillDelta2 = _interopRequireDefault(_quillDelta);

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _break = __webpack_require__(16);

    	var _break2 = _interopRequireDefault(_break);

    	var _inline = __webpack_require__(6);

    	var _inline2 = _interopRequireDefault(_inline);

    	var _text = __webpack_require__(7);

    	var _text2 = _interopRequireDefault(_text);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var NEWLINE_LENGTH = 1;

    	var BlockEmbed = function (_Parchment$Embed) {
    	  _inherits(BlockEmbed, _Parchment$Embed);

    	  function BlockEmbed() {
    	    _classCallCheck(this, BlockEmbed);

    	    return _possibleConstructorReturn(this, (BlockEmbed.__proto__ || Object.getPrototypeOf(BlockEmbed)).apply(this, arguments));
    	  }

    	  _createClass(BlockEmbed, [{
    	    key: 'attach',
    	    value: function attach() {
    	      _get(BlockEmbed.prototype.__proto__ || Object.getPrototypeOf(BlockEmbed.prototype), 'attach', this).call(this);
    	      this.attributes = new _parchment2.default.Attributor.Store(this.domNode);
    	    }
    	  }, {
    	    key: 'delta',
    	    value: function delta() {
    	      return new _quillDelta2.default().insert(this.value(), (0, _extend2.default)(this.formats(), this.attributes.values()));
    	    }
    	  }, {
    	    key: 'format',
    	    value: function format(name, value) {
    	      var attribute = _parchment2.default.query(name, _parchment2.default.Scope.BLOCK_ATTRIBUTE);
    	      if (attribute != null) {
    	        this.attributes.attribute(attribute, value);
    	      }
    	    }
    	  }, {
    	    key: 'formatAt',
    	    value: function formatAt(index, length, name, value) {
    	      this.format(name, value);
    	    }
    	  }, {
    	    key: 'insertAt',
    	    value: function insertAt(index, value, def) {
    	      if (typeof value === 'string' && value.endsWith('\n')) {
    	        var block = _parchment2.default.create(Block.blotName);
    	        this.parent.insertBefore(block, index === 0 ? this : this.next);
    	        block.insertAt(0, value.slice(0, -1));
    	      } else {
    	        _get(BlockEmbed.prototype.__proto__ || Object.getPrototypeOf(BlockEmbed.prototype), 'insertAt', this).call(this, index, value, def);
    	      }
    	    }
    	  }]);

    	  return BlockEmbed;
    	}(_parchment2.default.Embed);

    	BlockEmbed.scope = _parchment2.default.Scope.BLOCK_BLOT;
    	// It is important for cursor behavior BlockEmbeds use tags that are block level elements


    	var Block = function (_Parchment$Block) {
    	  _inherits(Block, _Parchment$Block);

    	  function Block(domNode) {
    	    _classCallCheck(this, Block);

    	    var _this2 = _possibleConstructorReturn(this, (Block.__proto__ || Object.getPrototypeOf(Block)).call(this, domNode));

    	    _this2.cache = {};
    	    return _this2;
    	  }

    	  _createClass(Block, [{
    	    key: 'delta',
    	    value: function delta() {
    	      if (this.cache.delta == null) {
    	        this.cache.delta = this.descendants(_parchment2.default.Leaf).reduce(function (delta, leaf) {
    	          if (leaf.length() === 0) {
    	            return delta;
    	          } else {
    	            return delta.insert(leaf.value(), bubbleFormats(leaf));
    	          }
    	        }, new _quillDelta2.default()).insert('\n', bubbleFormats(this));
    	      }
    	      return this.cache.delta;
    	    }
    	  }, {
    	    key: 'deleteAt',
    	    value: function deleteAt(index, length) {
    	      _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'deleteAt', this).call(this, index, length);
    	      this.cache = {};
    	    }
    	  }, {
    	    key: 'formatAt',
    	    value: function formatAt(index, length, name, value) {
    	      if (length <= 0) return;
    	      if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK)) {
    	        if (index + length === this.length()) {
    	          this.format(name, value);
    	        }
    	      } else {
    	        _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'formatAt', this).call(this, index, Math.min(length, this.length() - index - 1), name, value);
    	      }
    	      this.cache = {};
    	    }
    	  }, {
    	    key: 'insertAt',
    	    value: function insertAt(index, value, def) {
    	      if (def != null) return _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertAt', this).call(this, index, value, def);
    	      if (value.length === 0) return;
    	      var lines = value.split('\n');
    	      var text = lines.shift();
    	      if (text.length > 0) {
    	        if (index < this.length() - 1 || this.children.tail == null) {
    	          _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertAt', this).call(this, Math.min(index, this.length() - 1), text);
    	        } else {
    	          this.children.tail.insertAt(this.children.tail.length(), text);
    	        }
    	        this.cache = {};
    	      }
    	      var block = this;
    	      lines.reduce(function (index, line) {
    	        block = block.split(index, true);
    	        block.insertAt(0, line);
    	        return line.length;
    	      }, index + text.length);
    	    }
    	  }, {
    	    key: 'insertBefore',
    	    value: function insertBefore(blot, ref) {
    	      var head = this.children.head;
    	      _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertBefore', this).call(this, blot, ref);
    	      if (head instanceof _break2.default) {
    	        head.remove();
    	      }
    	      this.cache = {};
    	    }
    	  }, {
    	    key: 'length',
    	    value: function length() {
    	      if (this.cache.length == null) {
    	        this.cache.length = _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'length', this).call(this) + NEWLINE_LENGTH;
    	      }
    	      return this.cache.length;
    	    }
    	  }, {
    	    key: 'moveChildren',
    	    value: function moveChildren(target, ref) {
    	      _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'moveChildren', this).call(this, target, ref);
    	      this.cache = {};
    	    }
    	  }, {
    	    key: 'optimize',
    	    value: function optimize(context) {
    	      _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'optimize', this).call(this, context);
    	      this.cache = {};
    	    }
    	  }, {
    	    key: 'path',
    	    value: function path(index) {
    	      return _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'path', this).call(this, index, true);
    	    }
    	  }, {
    	    key: 'removeChild',
    	    value: function removeChild(child) {
    	      _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'removeChild', this).call(this, child);
    	      this.cache = {};
    	    }
    	  }, {
    	    key: 'split',
    	    value: function split(index) {
    	      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    	      if (force && (index === 0 || index >= this.length() - NEWLINE_LENGTH)) {
    	        var clone = this.clone();
    	        if (index === 0) {
    	          this.parent.insertBefore(clone, this);
    	          return this;
    	        } else {
    	          this.parent.insertBefore(clone, this.next);
    	          return clone;
    	        }
    	      } else {
    	        var next = _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'split', this).call(this, index, force);
    	        this.cache = {};
    	        return next;
    	      }
    	    }
    	  }]);

    	  return Block;
    	}(_parchment2.default.Block);

    	Block.blotName = 'block';
    	Block.tagName = 'P';
    	Block.defaultChild = 'break';
    	Block.allowedChildren = [_inline2.default, _parchment2.default.Embed, _text2.default];

    	function bubbleFormats(blot) {
    	  var formats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    	  if (blot == null) return formats;
    	  if (typeof blot.formats === 'function') {
    	    formats = (0, _extend2.default)(formats, blot.formats());
    	  }
    	  if (blot.parent == null || blot.parent.blotName == 'scroll' || blot.parent.statics.scope !== blot.statics.scope) {
    	    return formats;
    	  }
    	  return bubbleFormats(blot.parent, formats);
    	}

    	exports.bubbleFormats = bubbleFormats;
    	exports.BlockEmbed = BlockEmbed;
    	exports.default = Block;

    	/***/ }),
    	/* 5 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.default = exports.overload = exports.expandConfig = undefined;

    	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

    	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	__webpack_require__(50);

    	var _quillDelta = __webpack_require__(2);

    	var _quillDelta2 = _interopRequireDefault(_quillDelta);

    	var _editor = __webpack_require__(14);

    	var _editor2 = _interopRequireDefault(_editor);

    	var _emitter3 = __webpack_require__(8);

    	var _emitter4 = _interopRequireDefault(_emitter3);

    	var _module = __webpack_require__(9);

    	var _module2 = _interopRequireDefault(_module);

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _selection = __webpack_require__(15);

    	var _selection2 = _interopRequireDefault(_selection);

    	var _extend = __webpack_require__(3);

    	var _extend2 = _interopRequireDefault(_extend);

    	var _logger = __webpack_require__(10);

    	var _logger2 = _interopRequireDefault(_logger);

    	var _theme = __webpack_require__(34);

    	var _theme2 = _interopRequireDefault(_theme);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	var debug = (0, _logger2.default)('quill');

    	var Quill = function () {
    	  _createClass(Quill, null, [{
    	    key: 'debug',
    	    value: function debug(limit) {
    	      if (limit === true) {
    	        limit = 'log';
    	      }
    	      _logger2.default.level(limit);
    	    }
    	  }, {
    	    key: 'find',
    	    value: function find(node) {
    	      return node.__quill || _parchment2.default.find(node);
    	    }
    	  }, {
    	    key: 'import',
    	    value: function _import(name) {
    	      if (this.imports[name] == null) {
    	        debug.error('Cannot import ' + name + '. Are you sure it was registered?');
    	      }
    	      return this.imports[name];
    	    }
    	  }, {
    	    key: 'register',
    	    value: function register(path, target) {
    	      var _this = this;

    	      var overwrite = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    	      if (typeof path !== 'string') {
    	        var name = path.attrName || path.blotName;
    	        if (typeof name === 'string') {
    	          // register(Blot | Attributor, overwrite)
    	          this.register('formats/' + name, path, target);
    	        } else {
    	          Object.keys(path).forEach(function (key) {
    	            _this.register(key, path[key], target);
    	          });
    	        }
    	      } else {
    	        if (this.imports[path] != null && !overwrite) {
    	          debug.warn('Overwriting ' + path + ' with', target);
    	        }
    	        this.imports[path] = target;
    	        if ((path.startsWith('blots/') || path.startsWith('formats/')) && target.blotName !== 'abstract') {
    	          _parchment2.default.register(target);
    	        } else if (path.startsWith('modules') && typeof target.register === 'function') {
    	          target.register();
    	        }
    	      }
    	    }
    	  }]);

    	  function Quill(container) {
    	    var _this2 = this;

    	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    	    _classCallCheck(this, Quill);

    	    this.options = expandConfig(container, options);
    	    this.container = this.options.container;
    	    if (this.container == null) {
    	      return debug.error('Invalid Quill container', container);
    	    }
    	    if (this.options.debug) {
    	      Quill.debug(this.options.debug);
    	    }
    	    var html = this.container.innerHTML.trim();
    	    this.container.classList.add('ql-container');
    	    this.container.innerHTML = '';
    	    this.container.__quill = this;
    	    this.root = this.addContainer('ql-editor');
    	    this.root.classList.add('ql-blank');
    	    this.root.setAttribute('data-gramm', false);
    	    this.scrollingContainer = this.options.scrollingContainer || this.root;
    	    this.emitter = new _emitter4.default();
    	    this.scroll = _parchment2.default.create(this.root, {
    	      emitter: this.emitter,
    	      whitelist: this.options.formats
    	    });
    	    this.editor = new _editor2.default(this.scroll);
    	    this.selection = new _selection2.default(this.scroll, this.emitter);
    	    this.theme = new this.options.theme(this, this.options);
    	    this.keyboard = this.theme.addModule('keyboard');
    	    this.clipboard = this.theme.addModule('clipboard');
    	    this.history = this.theme.addModule('history');
    	    this.theme.init();
    	    this.emitter.on(_emitter4.default.events.EDITOR_CHANGE, function (type) {
    	      if (type === _emitter4.default.events.TEXT_CHANGE) {
    	        _this2.root.classList.toggle('ql-blank', _this2.editor.isBlank());
    	      }
    	    });
    	    this.emitter.on(_emitter4.default.events.SCROLL_UPDATE, function (source, mutations) {
    	      var range = _this2.selection.lastRange;
    	      var index = range && range.length === 0 ? range.index : undefined;
    	      modify.call(_this2, function () {
    	        return _this2.editor.update(null, mutations, index);
    	      }, source);
    	    });
    	    var contents = this.clipboard.convert('<div class=\'ql-editor\' style="white-space: normal;">' + html + '<p><br></p></div>');
    	    this.setContents(contents);
    	    this.history.clear();
    	    if (this.options.placeholder) {
    	      this.root.setAttribute('data-placeholder', this.options.placeholder);
    	    }
    	    if (this.options.readOnly) {
    	      this.disable();
    	    }
    	  }

    	  _createClass(Quill, [{
    	    key: 'addContainer',
    	    value: function addContainer(container) {
    	      var refNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    	      if (typeof container === 'string') {
    	        var className = container;
    	        container = document.createElement('div');
    	        container.classList.add(className);
    	      }
    	      this.container.insertBefore(container, refNode);
    	      return container;
    	    }
    	  }, {
    	    key: 'blur',
    	    value: function blur() {
    	      this.selection.setRange(null);
    	    }
    	  }, {
    	    key: 'deleteText',
    	    value: function deleteText(index, length, source) {
    	      var _this3 = this;

    	      var _overload = overload(index, length, source);

    	      var _overload2 = _slicedToArray(_overload, 4);

    	      index = _overload2[0];
    	      length = _overload2[1];
    	      source = _overload2[3];

    	      return modify.call(this, function () {
    	        return _this3.editor.deleteText(index, length);
    	      }, source, index, -1 * length);
    	    }
    	  }, {
    	    key: 'disable',
    	    value: function disable() {
    	      this.enable(false);
    	    }
    	  }, {
    	    key: 'enable',
    	    value: function enable() {
    	      var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

    	      this.scroll.enable(enabled);
    	      this.container.classList.toggle('ql-disabled', !enabled);
    	    }
    	  }, {
    	    key: 'focus',
    	    value: function focus() {
    	      var scrollTop = this.scrollingContainer.scrollTop;
    	      this.selection.focus();
    	      this.scrollingContainer.scrollTop = scrollTop;
    	      this.scrollIntoView();
    	    }
    	  }, {
    	    key: 'format',
    	    value: function format(name, value) {
    	      var _this4 = this;

    	      var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _emitter4.default.sources.API;

    	      return modify.call(this, function () {
    	        var range = _this4.getSelection(true);
    	        var change = new _quillDelta2.default();
    	        if (range == null) {
    	          return change;
    	        } else if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK)) {
    	          change = _this4.editor.formatLine(range.index, range.length, _defineProperty({}, name, value));
    	        } else if (range.length === 0) {
    	          _this4.selection.format(name, value);
    	          return change;
    	        } else {
    	          change = _this4.editor.formatText(range.index, range.length, _defineProperty({}, name, value));
    	        }
    	        _this4.setSelection(range, _emitter4.default.sources.SILENT);
    	        return change;
    	      }, source);
    	    }
    	  }, {
    	    key: 'formatLine',
    	    value: function formatLine(index, length, name, value, source) {
    	      var _this5 = this;

    	      var formats = void 0;

    	      var _overload3 = overload(index, length, name, value, source);

    	      var _overload4 = _slicedToArray(_overload3, 4);

    	      index = _overload4[0];
    	      length = _overload4[1];
    	      formats = _overload4[2];
    	      source = _overload4[3];

    	      return modify.call(this, function () {
    	        return _this5.editor.formatLine(index, length, formats);
    	      }, source, index, 0);
    	    }
    	  }, {
    	    key: 'formatText',
    	    value: function formatText(index, length, name, value, source) {
    	      var _this6 = this;

    	      var formats = void 0;

    	      var _overload5 = overload(index, length, name, value, source);

    	      var _overload6 = _slicedToArray(_overload5, 4);

    	      index = _overload6[0];
    	      length = _overload6[1];
    	      formats = _overload6[2];
    	      source = _overload6[3];

    	      return modify.call(this, function () {
    	        return _this6.editor.formatText(index, length, formats);
    	      }, source, index, 0);
    	    }
    	  }, {
    	    key: 'getBounds',
    	    value: function getBounds(index) {
    	      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    	      var bounds = void 0;
    	      if (typeof index === 'number') {
    	        bounds = this.selection.getBounds(index, length);
    	      } else {
    	        bounds = this.selection.getBounds(index.index, index.length);
    	      }
    	      var containerBounds = this.container.getBoundingClientRect();
    	      return {
    	        bottom: bounds.bottom - containerBounds.top,
    	        height: bounds.height,
    	        left: bounds.left - containerBounds.left,
    	        right: bounds.right - containerBounds.left,
    	        top: bounds.top - containerBounds.top,
    	        width: bounds.width
    	      };
    	    }
    	  }, {
    	    key: 'getContents',
    	    value: function getContents() {
    	      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    	      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;

    	      var _overload7 = overload(index, length);

    	      var _overload8 = _slicedToArray(_overload7, 2);

    	      index = _overload8[0];
    	      length = _overload8[1];

    	      return this.editor.getContents(index, length);
    	    }
    	  }, {
    	    key: 'getFormat',
    	    value: function getFormat() {
    	      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getSelection(true);
    	      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    	      if (typeof index === 'number') {
    	        return this.editor.getFormat(index, length);
    	      } else {
    	        return this.editor.getFormat(index.index, index.length);
    	      }
    	    }
    	  }, {
    	    key: 'getIndex',
    	    value: function getIndex(blot) {
    	      return blot.offset(this.scroll);
    	    }
    	  }, {
    	    key: 'getLength',
    	    value: function getLength() {
    	      return this.scroll.length();
    	    }
    	  }, {
    	    key: 'getLeaf',
    	    value: function getLeaf(index) {
    	      return this.scroll.leaf(index);
    	    }
    	  }, {
    	    key: 'getLine',
    	    value: function getLine(index) {
    	      return this.scroll.line(index);
    	    }
    	  }, {
    	    key: 'getLines',
    	    value: function getLines() {
    	      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    	      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;

    	      if (typeof index !== 'number') {
    	        return this.scroll.lines(index.index, index.length);
    	      } else {
    	        return this.scroll.lines(index, length);
    	      }
    	    }
    	  }, {
    	    key: 'getModule',
    	    value: function getModule(name) {
    	      return this.theme.modules[name];
    	    }
    	  }, {
    	    key: 'getSelection',
    	    value: function getSelection() {
    	      var focus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    	      if (focus) this.focus();
    	      this.update(); // Make sure we access getRange with editor in consistent state
    	      return this.selection.getRange()[0];
    	    }
    	  }, {
    	    key: 'getText',
    	    value: function getText() {
    	      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    	      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;

    	      var _overload9 = overload(index, length);

    	      var _overload10 = _slicedToArray(_overload9, 2);

    	      index = _overload10[0];
    	      length = _overload10[1];

    	      return this.editor.getText(index, length);
    	    }
    	  }, {
    	    key: 'hasFocus',
    	    value: function hasFocus() {
    	      return this.selection.hasFocus();
    	    }
    	  }, {
    	    key: 'insertEmbed',
    	    value: function insertEmbed(index, embed, value) {
    	      var _this7 = this;

    	      var source = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Quill.sources.API;

    	      return modify.call(this, function () {
    	        return _this7.editor.insertEmbed(index, embed, value);
    	      }, source, index);
    	    }
    	  }, {
    	    key: 'insertText',
    	    value: function insertText(index, text, name, value, source) {
    	      var _this8 = this;

    	      var formats = void 0;

    	      var _overload11 = overload(index, 0, name, value, source);

    	      var _overload12 = _slicedToArray(_overload11, 4);

    	      index = _overload12[0];
    	      formats = _overload12[2];
    	      source = _overload12[3];

    	      return modify.call(this, function () {
    	        return _this8.editor.insertText(index, text, formats);
    	      }, source, index, text.length);
    	    }
    	  }, {
    	    key: 'isEnabled',
    	    value: function isEnabled() {
    	      return !this.container.classList.contains('ql-disabled');
    	    }
    	  }, {
    	    key: 'off',
    	    value: function off() {
    	      return this.emitter.off.apply(this.emitter, arguments);
    	    }
    	  }, {
    	    key: 'on',
    	    value: function on() {
    	      return this.emitter.on.apply(this.emitter, arguments);
    	    }
    	  }, {
    	    key: 'once',
    	    value: function once() {
    	      return this.emitter.once.apply(this.emitter, arguments);
    	    }
    	  }, {
    	    key: 'pasteHTML',
    	    value: function pasteHTML(index, html, source) {
    	      this.clipboard.dangerouslyPasteHTML(index, html, source);
    	    }
    	  }, {
    	    key: 'removeFormat',
    	    value: function removeFormat(index, length, source) {
    	      var _this9 = this;

    	      var _overload13 = overload(index, length, source);

    	      var _overload14 = _slicedToArray(_overload13, 4);

    	      index = _overload14[0];
    	      length = _overload14[1];
    	      source = _overload14[3];

    	      return modify.call(this, function () {
    	        return _this9.editor.removeFormat(index, length);
    	      }, source, index);
    	    }
    	  }, {
    	    key: 'scrollIntoView',
    	    value: function scrollIntoView() {
    	      this.selection.scrollIntoView(this.scrollingContainer);
    	    }
    	  }, {
    	    key: 'setContents',
    	    value: function setContents(delta) {
    	      var _this10 = this;

    	      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;

    	      return modify.call(this, function () {
    	        delta = new _quillDelta2.default(delta);
    	        var length = _this10.getLength();
    	        var deleted = _this10.editor.deleteText(0, length);
    	        var applied = _this10.editor.applyDelta(delta);
    	        var lastOp = applied.ops[applied.ops.length - 1];
    	        if (lastOp != null && typeof lastOp.insert === 'string' && lastOp.insert[lastOp.insert.length - 1] === '\n') {
    	          _this10.editor.deleteText(_this10.getLength() - 1, 1);
    	          applied.delete(1);
    	        }
    	        var ret = deleted.compose(applied);
    	        return ret;
    	      }, source);
    	    }
    	  }, {
    	    key: 'setSelection',
    	    value: function setSelection(index, length, source) {
    	      if (index == null) {
    	        this.selection.setRange(null, length || Quill.sources.API);
    	      } else {
    	        var _overload15 = overload(index, length, source);

    	        var _overload16 = _slicedToArray(_overload15, 4);

    	        index = _overload16[0];
    	        length = _overload16[1];
    	        source = _overload16[3];

    	        this.selection.setRange(new _selection.Range(index, length), source);
    	        if (source !== _emitter4.default.sources.SILENT) {
    	          this.selection.scrollIntoView(this.scrollingContainer);
    	        }
    	      }
    	    }
    	  }, {
    	    key: 'setText',
    	    value: function setText(text) {
    	      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;

    	      var delta = new _quillDelta2.default().insert(text);
    	      return this.setContents(delta, source);
    	    }
    	  }, {
    	    key: 'update',
    	    value: function update() {
    	      var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _emitter4.default.sources.USER;

    	      var change = this.scroll.update(source); // Will update selection before selection.update() does if text changes
    	      this.selection.update(source);
    	      return change;
    	    }
    	  }, {
    	    key: 'updateContents',
    	    value: function updateContents(delta) {
    	      var _this11 = this;

    	      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;

    	      return modify.call(this, function () {
    	        delta = new _quillDelta2.default(delta);
    	        return _this11.editor.applyDelta(delta, source);
    	      }, source, true);
    	    }
    	  }]);

    	  return Quill;
    	}();

    	Quill.DEFAULTS = {
    	  bounds: null,
    	  formats: null,
    	  modules: {},
    	  placeholder: '',
    	  readOnly: false,
    	  scrollingContainer: null,
    	  strict: true,
    	  theme: 'default'
    	};
    	Quill.events = _emitter4.default.events;
    	Quill.sources = _emitter4.default.sources;
    	// eslint-disable-next-line no-undef
    	Quill.version =   "1.3.7";

    	Quill.imports = {
    	  'delta': _quillDelta2.default,
    	  'parchment': _parchment2.default,
    	  'core/module': _module2.default,
    	  'core/theme': _theme2.default
    	};

    	function expandConfig(container, userConfig) {
    	  userConfig = (0, _extend2.default)(true, {
    	    container: container,
    	    modules: {
    	      clipboard: true,
    	      keyboard: true,
    	      history: true
    	    }
    	  }, userConfig);
    	  if (!userConfig.theme || userConfig.theme === Quill.DEFAULTS.theme) {
    	    userConfig.theme = _theme2.default;
    	  } else {
    	    userConfig.theme = Quill.import('themes/' + userConfig.theme);
    	    if (userConfig.theme == null) {
    	      throw new Error('Invalid theme ' + userConfig.theme + '. Did you register it?');
    	    }
    	  }
    	  var themeConfig = (0, _extend2.default)(true, {}, userConfig.theme.DEFAULTS);
    	  [themeConfig, userConfig].forEach(function (config) {
    	    config.modules = config.modules || {};
    	    Object.keys(config.modules).forEach(function (module) {
    	      if (config.modules[module] === true) {
    	        config.modules[module] = {};
    	      }
    	    });
    	  });
    	  var moduleNames = Object.keys(themeConfig.modules).concat(Object.keys(userConfig.modules));
    	  var moduleConfig = moduleNames.reduce(function (config, name) {
    	    var moduleClass = Quill.import('modules/' + name);
    	    if (moduleClass == null) {
    	      debug.error('Cannot load ' + name + ' module. Are you sure you registered it?');
    	    } else {
    	      config[name] = moduleClass.DEFAULTS || {};
    	    }
    	    return config;
    	  }, {});
    	  // Special case toolbar shorthand
    	  if (userConfig.modules != null && userConfig.modules.toolbar && userConfig.modules.toolbar.constructor !== Object) {
    	    userConfig.modules.toolbar = {
    	      container: userConfig.modules.toolbar
    	    };
    	  }
    	  userConfig = (0, _extend2.default)(true, {}, Quill.DEFAULTS, { modules: moduleConfig }, themeConfig, userConfig);
    	  ['bounds', 'container', 'scrollingContainer'].forEach(function (key) {
    	    if (typeof userConfig[key] === 'string') {
    	      userConfig[key] = document.querySelector(userConfig[key]);
    	    }
    	  });
    	  userConfig.modules = Object.keys(userConfig.modules).reduce(function (config, name) {
    	    if (userConfig.modules[name]) {
    	      config[name] = userConfig.modules[name];
    	    }
    	    return config;
    	  }, {});
    	  return userConfig;
    	}

    	// Handle selection preservation and TEXT_CHANGE emission
    	// common to modification APIs
    	function modify(modifier, source, index, shift) {
    	  if (this.options.strict && !this.isEnabled() && source === _emitter4.default.sources.USER) {
    	    return new _quillDelta2.default();
    	  }
    	  var range = index == null ? null : this.getSelection();
    	  var oldDelta = this.editor.delta;
    	  var change = modifier();
    	  if (range != null) {
    	    if (index === true) index = range.index;
    	    if (shift == null) {
    	      range = shiftRange(range, change, source);
    	    } else if (shift !== 0) {
    	      range = shiftRange(range, index, shift, source);
    	    }
    	    this.setSelection(range, _emitter4.default.sources.SILENT);
    	  }
    	  if (change.length() > 0) {
    	    var _emitter;

    	    var args = [_emitter4.default.events.TEXT_CHANGE, change, oldDelta, source];
    	    (_emitter = this.emitter).emit.apply(_emitter, [_emitter4.default.events.EDITOR_CHANGE].concat(args));
    	    if (source !== _emitter4.default.sources.SILENT) {
    	      var _emitter2;

    	      (_emitter2 = this.emitter).emit.apply(_emitter2, args);
    	    }
    	  }
    	  return change;
    	}

    	function overload(index, length, name, value, source) {
    	  var formats = {};
    	  if (typeof index.index === 'number' && typeof index.length === 'number') {
    	    // Allow for throwaway end (used by insertText/insertEmbed)
    	    if (typeof length !== 'number') {
    	      source = value, value = name, name = length, length = index.length, index = index.index;
    	    } else {
    	      length = index.length, index = index.index;
    	    }
    	  } else if (typeof length !== 'number') {
    	    source = value, value = name, name = length, length = 0;
    	  }
    	  // Handle format being object, two format name/value strings or excluded
    	  if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {
    	    formats = name;
    	    source = value;
    	  } else if (typeof name === 'string') {
    	    if (value != null) {
    	      formats[name] = value;
    	    } else {
    	      source = name;
    	    }
    	  }
    	  // Handle optional source
    	  source = source || _emitter4.default.sources.API;
    	  return [index, length, formats, source];
    	}

    	function shiftRange(range, index, length, source) {
    	  if (range == null) return null;
    	  var start = void 0,
    	      end = void 0;
    	  if (index instanceof _quillDelta2.default) {
    	    var _map = [range.index, range.index + range.length].map(function (pos) {
    	      return index.transformPosition(pos, source !== _emitter4.default.sources.USER);
    	    });

    	    var _map2 = _slicedToArray(_map, 2);

    	    start = _map2[0];
    	    end = _map2[1];
    	  } else {
    	    var _map3 = [range.index, range.index + range.length].map(function (pos) {
    	      if (pos < index || pos === index && source === _emitter4.default.sources.USER) return pos;
    	      if (length >= 0) {
    	        return pos + length;
    	      } else {
    	        return Math.max(index, pos + length);
    	      }
    	    });

    	    var _map4 = _slicedToArray(_map3, 2);

    	    start = _map4[0];
    	    end = _map4[1];
    	  }
    	  return new _selection.Range(start, end - start);
    	}

    	exports.expandConfig = expandConfig;
    	exports.overload = overload;
    	exports.default = Quill;

    	/***/ }),
    	/* 6 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _text = __webpack_require__(7);

    	var _text2 = _interopRequireDefault(_text);

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Inline = function (_Parchment$Inline) {
    	  _inherits(Inline, _Parchment$Inline);

    	  function Inline() {
    	    _classCallCheck(this, Inline);

    	    return _possibleConstructorReturn(this, (Inline.__proto__ || Object.getPrototypeOf(Inline)).apply(this, arguments));
    	  }

    	  _createClass(Inline, [{
    	    key: 'formatAt',
    	    value: function formatAt(index, length, name, value) {
    	      if (Inline.compare(this.statics.blotName, name) < 0 && _parchment2.default.query(name, _parchment2.default.Scope.BLOT)) {
    	        var blot = this.isolate(index, length);
    	        if (value) {
    	          blot.wrap(name, value);
    	        }
    	      } else {
    	        _get(Inline.prototype.__proto__ || Object.getPrototypeOf(Inline.prototype), 'formatAt', this).call(this, index, length, name, value);
    	      }
    	    }
    	  }, {
    	    key: 'optimize',
    	    value: function optimize(context) {
    	      _get(Inline.prototype.__proto__ || Object.getPrototypeOf(Inline.prototype), 'optimize', this).call(this, context);
    	      if (this.parent instanceof Inline && Inline.compare(this.statics.blotName, this.parent.statics.blotName) > 0) {
    	        var parent = this.parent.isolate(this.offset(), this.length());
    	        this.moveChildren(parent);
    	        parent.wrap(this);
    	      }
    	    }
    	  }], [{
    	    key: 'compare',
    	    value: function compare(self, other) {
    	      var selfIndex = Inline.order.indexOf(self);
    	      var otherIndex = Inline.order.indexOf(other);
    	      if (selfIndex >= 0 || otherIndex >= 0) {
    	        return selfIndex - otherIndex;
    	      } else if (self === other) {
    	        return 0;
    	      } else if (self < other) {
    	        return -1;
    	      } else {
    	        return 1;
    	      }
    	    }
    	  }]);

    	  return Inline;
    	}(_parchment2.default.Inline);

    	Inline.allowedChildren = [Inline, _parchment2.default.Embed, _text2.default];
    	// Lower index means deeper in the DOM tree, since not found (-1) is for embeds
    	Inline.order = ['cursor', 'inline', // Must be lower
    	'underline', 'strike', 'italic', 'bold', 'script', 'link', 'code' // Must be higher
    	];

    	exports.default = Inline;

    	/***/ }),
    	/* 7 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var TextBlot = function (_Parchment$Text) {
    	  _inherits(TextBlot, _Parchment$Text);

    	  function TextBlot() {
    	    _classCallCheck(this, TextBlot);

    	    return _possibleConstructorReturn(this, (TextBlot.__proto__ || Object.getPrototypeOf(TextBlot)).apply(this, arguments));
    	  }

    	  return TextBlot;
    	}(_parchment2.default.Text);

    	exports.default = TextBlot;

    	/***/ }),
    	/* 8 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _eventemitter = __webpack_require__(54);

    	var _eventemitter2 = _interopRequireDefault(_eventemitter);

    	var _logger = __webpack_require__(10);

    	var _logger2 = _interopRequireDefault(_logger);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var debug = (0, _logger2.default)('quill:events');

    	var EVENTS = ['selectionchange', 'mousedown', 'mouseup', 'click'];

    	EVENTS.forEach(function (eventName) {
    	  document.addEventListener(eventName, function () {
    	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    	      args[_key] = arguments[_key];
    	    }

    	    [].slice.call(document.querySelectorAll('.ql-container')).forEach(function (node) {
    	      // TODO use WeakMap
    	      if (node.__quill && node.__quill.emitter) {
    	        var _node$__quill$emitter;

    	        (_node$__quill$emitter = node.__quill.emitter).handleDOM.apply(_node$__quill$emitter, args);
    	      }
    	    });
    	  });
    	});

    	var Emitter = function (_EventEmitter) {
    	  _inherits(Emitter, _EventEmitter);

    	  function Emitter() {
    	    _classCallCheck(this, Emitter);

    	    var _this = _possibleConstructorReturn(this, (Emitter.__proto__ || Object.getPrototypeOf(Emitter)).call(this));

    	    _this.listeners = {};
    	    _this.on('error', debug.error);
    	    return _this;
    	  }

    	  _createClass(Emitter, [{
    	    key: 'emit',
    	    value: function emit() {
    	      debug.log.apply(debug, arguments);
    	      _get(Emitter.prototype.__proto__ || Object.getPrototypeOf(Emitter.prototype), 'emit', this).apply(this, arguments);
    	    }
    	  }, {
    	    key: 'handleDOM',
    	    value: function handleDOM(event) {
    	      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    	        args[_key2 - 1] = arguments[_key2];
    	      }

    	      (this.listeners[event.type] || []).forEach(function (_ref) {
    	        var node = _ref.node,
    	            handler = _ref.handler;

    	        if (event.target === node || node.contains(event.target)) {
    	          handler.apply(undefined, [event].concat(args));
    	        }
    	      });
    	    }
    	  }, {
    	    key: 'listenDOM',
    	    value: function listenDOM(eventName, node, handler) {
    	      if (!this.listeners[eventName]) {
    	        this.listeners[eventName] = [];
    	      }
    	      this.listeners[eventName].push({ node: node, handler: handler });
    	    }
    	  }]);

    	  return Emitter;
    	}(_eventemitter2.default);

    	Emitter.events = {
    	  EDITOR_CHANGE: 'editor-change',
    	  SCROLL_BEFORE_UPDATE: 'scroll-before-update',
    	  SCROLL_OPTIMIZE: 'scroll-optimize',
    	  SCROLL_UPDATE: 'scroll-update',
    	  SELECTION_CHANGE: 'selection-change',
    	  TEXT_CHANGE: 'text-change'
    	};
    	Emitter.sources = {
    	  API: 'api',
    	  SILENT: 'silent',
    	  USER: 'user'
    	};

    	exports.default = Emitter;

    	/***/ }),
    	/* 9 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	var Module = function Module(quill) {
    	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    	  _classCallCheck(this, Module);

    	  this.quill = quill;
    	  this.options = options;
    	};

    	Module.DEFAULTS = {};

    	exports.default = Module;

    	/***/ }),
    	/* 10 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	var levels = ['error', 'warn', 'log', 'info'];
    	var level = 'warn';

    	function debug(method) {
    	  if (levels.indexOf(method) <= levels.indexOf(level)) {
    	    var _console;

    	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    	      args[_key - 1] = arguments[_key];
    	    }

    	    (_console = console)[method].apply(_console, args); // eslint-disable-line no-console
    	  }
    	}

    	function namespace(ns) {
    	  return levels.reduce(function (logger, method) {
    	    logger[method] = debug.bind(console, method, ns);
    	    return logger;
    	  }, {});
    	}

    	debug.level = namespace.level = function (newLevel) {
    	  level = newLevel;
    	};

    	exports.default = namespace;

    	/***/ }),
    	/* 11 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var pSlice = Array.prototype.slice;
    	var objectKeys = __webpack_require__(52);
    	var isArguments = __webpack_require__(53);

    	var deepEqual = module.exports = function (actual, expected, opts) {
    	  if (!opts) opts = {};
    	  // 7.1. All identical values are equivalent, as determined by ===.
    	  if (actual === expected) {
    	    return true;

    	  } else if (actual instanceof Date && expected instanceof Date) {
    	    return actual.getTime() === expected.getTime();

    	  // 7.3. Other pairs that do not both pass typeof value == 'object',
    	  // equivalence is determined by ==.
    	  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
    	    return opts.strict ? actual === expected : actual == expected;

    	  // 7.4. For all other Object pairs, including Array objects, equivalence is
    	  // determined by having the same number of owned properties (as verified
    	  // with Object.prototype.hasOwnProperty.call), the same set of keys
    	  // (although not necessarily the same order), equivalent values for every
    	  // corresponding key, and an identical 'prototype' property. Note: this
    	  // accounts for both named and indexed properties on Arrays.
    	  } else {
    	    return objEquiv(actual, expected, opts);
    	  }
    	};

    	function isUndefinedOrNull(value) {
    	  return value === null || value === undefined;
    	}

    	function isBuffer (x) {
    	  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
    	  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
    	    return false;
    	  }
    	  if (x.length > 0 && typeof x[0] !== 'number') return false;
    	  return true;
    	}

    	function objEquiv(a, b, opts) {
    	  var i, key;
    	  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
    	    return false;
    	  // an identical 'prototype' property.
    	  if (a.prototype !== b.prototype) return false;
    	  //~~~I've managed to break Object.keys through screwy arguments passing.
    	  //   Converting to array solves the problem.
    	  if (isArguments(a)) {
    	    if (!isArguments(b)) {
    	      return false;
    	    }
    	    a = pSlice.call(a);
    	    b = pSlice.call(b);
    	    return deepEqual(a, b, opts);
    	  }
    	  if (isBuffer(a)) {
    	    if (!isBuffer(b)) {
    	      return false;
    	    }
    	    if (a.length !== b.length) return false;
    	    for (i = 0; i < a.length; i++) {
    	      if (a[i] !== b[i]) return false;
    	    }
    	    return true;
    	  }
    	  try {
    	    var ka = objectKeys(a),
    	        kb = objectKeys(b);
    	  } catch (e) {//happens when one is a string literal and the other isn't
    	    return false;
    	  }
    	  // having the same number of owned properties (keys incorporates
    	  // hasOwnProperty)
    	  if (ka.length != kb.length)
    	    return false;
    	  //the same set of keys (although not necessarily the same order),
    	  ka.sort();
    	  kb.sort();
    	  //~~~cheap key test
    	  for (i = ka.length - 1; i >= 0; i--) {
    	    if (ka[i] != kb[i])
    	      return false;
    	  }
    	  //equivalent values for every corresponding key, and
    	  //~~~possibly expensive deep test
    	  for (i = ka.length - 1; i >= 0; i--) {
    	    key = ka[i];
    	    if (!deepEqual(a[key], b[key], opts)) return false;
    	  }
    	  return typeof a === typeof b;
    	}


    	/***/ }),
    	/* 12 */
    	/***/ (function(module, exports, __webpack_require__) {

    	Object.defineProperty(exports, "__esModule", { value: true });
    	var Registry = __webpack_require__(1);
    	var Attributor = /** @class */ (function () {
    	    function Attributor(attrName, keyName, options) {
    	        if (options === void 0) { options = {}; }
    	        this.attrName = attrName;
    	        this.keyName = keyName;
    	        var attributeBit = Registry.Scope.TYPE & Registry.Scope.ATTRIBUTE;
    	        if (options.scope != null) {
    	            // Ignore type bits, force attribute bit
    	            this.scope = (options.scope & Registry.Scope.LEVEL) | attributeBit;
    	        }
    	        else {
    	            this.scope = Registry.Scope.ATTRIBUTE;
    	        }
    	        if (options.whitelist != null)
    	            this.whitelist = options.whitelist;
    	    }
    	    Attributor.keys = function (node) {
    	        return [].map.call(node.attributes, function (item) {
    	            return item.name;
    	        });
    	    };
    	    Attributor.prototype.add = function (node, value) {
    	        if (!this.canAdd(node, value))
    	            return false;
    	        node.setAttribute(this.keyName, value);
    	        return true;
    	    };
    	    Attributor.prototype.canAdd = function (node, value) {
    	        var match = Registry.query(node, Registry.Scope.BLOT & (this.scope | Registry.Scope.TYPE));
    	        if (match == null)
    	            return false;
    	        if (this.whitelist == null)
    	            return true;
    	        if (typeof value === 'string') {
    	            return this.whitelist.indexOf(value.replace(/["']/g, '')) > -1;
    	        }
    	        else {
    	            return this.whitelist.indexOf(value) > -1;
    	        }
    	    };
    	    Attributor.prototype.remove = function (node) {
    	        node.removeAttribute(this.keyName);
    	    };
    	    Attributor.prototype.value = function (node) {
    	        var value = node.getAttribute(this.keyName);
    	        if (this.canAdd(node, value) && value) {
    	            return value;
    	        }
    	        return '';
    	    };
    	    return Attributor;
    	}());
    	exports.default = Attributor;


    	/***/ }),
    	/* 13 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.default = exports.Code = undefined;

    	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _quillDelta = __webpack_require__(2);

    	var _quillDelta2 = _interopRequireDefault(_quillDelta);

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _block = __webpack_require__(4);

    	var _block2 = _interopRequireDefault(_block);

    	var _inline = __webpack_require__(6);

    	var _inline2 = _interopRequireDefault(_inline);

    	var _text = __webpack_require__(7);

    	var _text2 = _interopRequireDefault(_text);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Code = function (_Inline) {
    	  _inherits(Code, _Inline);

    	  function Code() {
    	    _classCallCheck(this, Code);

    	    return _possibleConstructorReturn(this, (Code.__proto__ || Object.getPrototypeOf(Code)).apply(this, arguments));
    	  }

    	  return Code;
    	}(_inline2.default);

    	Code.blotName = 'code';
    	Code.tagName = 'CODE';

    	var CodeBlock = function (_Block) {
    	  _inherits(CodeBlock, _Block);

    	  function CodeBlock() {
    	    _classCallCheck(this, CodeBlock);

    	    return _possibleConstructorReturn(this, (CodeBlock.__proto__ || Object.getPrototypeOf(CodeBlock)).apply(this, arguments));
    	  }

    	  _createClass(CodeBlock, [{
    	    key: 'delta',
    	    value: function delta() {
    	      var _this3 = this;

    	      var text = this.domNode.textContent;
    	      if (text.endsWith('\n')) {
    	        // Should always be true
    	        text = text.slice(0, -1);
    	      }
    	      return text.split('\n').reduce(function (delta, frag) {
    	        return delta.insert(frag).insert('\n', _this3.formats());
    	      }, new _quillDelta2.default());
    	    }
    	  }, {
    	    key: 'format',
    	    value: function format(name, value) {
    	      if (name === this.statics.blotName && value) return;

    	      var _descendant = this.descendant(_text2.default, this.length() - 1),
    	          _descendant2 = _slicedToArray(_descendant, 1),
    	          text = _descendant2[0];

    	      if (text != null) {
    	        text.deleteAt(text.length() - 1, 1);
    	      }
    	      _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'format', this).call(this, name, value);
    	    }
    	  }, {
    	    key: 'formatAt',
    	    value: function formatAt(index, length, name, value) {
    	      if (length === 0) return;
    	      if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK) == null || name === this.statics.blotName && value === this.statics.formats(this.domNode)) {
    	        return;
    	      }
    	      var nextNewline = this.newlineIndex(index);
    	      if (nextNewline < 0 || nextNewline >= index + length) return;
    	      var prevNewline = this.newlineIndex(index, true) + 1;
    	      var isolateLength = nextNewline - prevNewline + 1;
    	      var blot = this.isolate(prevNewline, isolateLength);
    	      var next = blot.next;
    	      blot.format(name, value);
    	      if (next instanceof CodeBlock) {
    	        next.formatAt(0, index - prevNewline + length - isolateLength, name, value);
    	      }
    	    }
    	  }, {
    	    key: 'insertAt',
    	    value: function insertAt(index, value, def) {
    	      if (def != null) return;

    	      var _descendant3 = this.descendant(_text2.default, index),
    	          _descendant4 = _slicedToArray(_descendant3, 2),
    	          text = _descendant4[0],
    	          offset = _descendant4[1];

    	      text.insertAt(offset, value);
    	    }
    	  }, {
    	    key: 'length',
    	    value: function length() {
    	      var length = this.domNode.textContent.length;
    	      if (!this.domNode.textContent.endsWith('\n')) {
    	        return length + 1;
    	      }
    	      return length;
    	    }
    	  }, {
    	    key: 'newlineIndex',
    	    value: function newlineIndex(searchIndex) {
    	      var reverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    	      if (!reverse) {
    	        var offset = this.domNode.textContent.slice(searchIndex).indexOf('\n');
    	        return offset > -1 ? searchIndex + offset : -1;
    	      } else {
    	        return this.domNode.textContent.slice(0, searchIndex).lastIndexOf('\n');
    	      }
    	    }
    	  }, {
    	    key: 'optimize',
    	    value: function optimize(context) {
    	      if (!this.domNode.textContent.endsWith('\n')) {
    	        this.appendChild(_parchment2.default.create('text', '\n'));
    	      }
    	      _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'optimize', this).call(this, context);
    	      var next = this.next;
    	      if (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && this.statics.formats(this.domNode) === next.statics.formats(next.domNode)) {
    	        next.optimize(context);
    	        next.moveChildren(this);
    	        next.remove();
    	      }
    	    }
    	  }, {
    	    key: 'replace',
    	    value: function replace(target) {
    	      _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'replace', this).call(this, target);
    	      [].slice.call(this.domNode.querySelectorAll('*')).forEach(function (node) {
    	        var blot = _parchment2.default.find(node);
    	        if (blot == null) {
    	          node.parentNode.removeChild(node);
    	        } else if (blot instanceof _parchment2.default.Embed) {
    	          blot.remove();
    	        } else {
    	          blot.unwrap();
    	        }
    	      });
    	    }
    	  }], [{
    	    key: 'create',
    	    value: function create(value) {
    	      var domNode = _get(CodeBlock.__proto__ || Object.getPrototypeOf(CodeBlock), 'create', this).call(this, value);
    	      domNode.setAttribute('spellcheck', false);
    	      return domNode;
    	    }
    	  }, {
    	    key: 'formats',
    	    value: function formats() {
    	      return true;
    	    }
    	  }]);

    	  return CodeBlock;
    	}(_block2.default);

    	CodeBlock.blotName = 'code-block';
    	CodeBlock.tagName = 'PRE';
    	CodeBlock.TAB = '  ';

    	exports.Code = Code;
    	exports.default = CodeBlock;

    	/***/ }),
    	/* 14 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

    	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _quillDelta = __webpack_require__(2);

    	var _quillDelta2 = _interopRequireDefault(_quillDelta);

    	var _op = __webpack_require__(20);

    	var _op2 = _interopRequireDefault(_op);

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _code = __webpack_require__(13);

    	var _code2 = _interopRequireDefault(_code);

    	var _cursor = __webpack_require__(24);

    	var _cursor2 = _interopRequireDefault(_cursor);

    	var _block = __webpack_require__(4);

    	var _block2 = _interopRequireDefault(_block);

    	var _break = __webpack_require__(16);

    	var _break2 = _interopRequireDefault(_break);

    	var _clone = __webpack_require__(21);

    	var _clone2 = _interopRequireDefault(_clone);

    	var _deepEqual = __webpack_require__(11);

    	var _deepEqual2 = _interopRequireDefault(_deepEqual);

    	var _extend = __webpack_require__(3);

    	var _extend2 = _interopRequireDefault(_extend);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	var ASCII = /^[ -~]*$/;

    	var Editor = function () {
    	  function Editor(scroll) {
    	    _classCallCheck(this, Editor);

    	    this.scroll = scroll;
    	    this.delta = this.getDelta();
    	  }

    	  _createClass(Editor, [{
    	    key: 'applyDelta',
    	    value: function applyDelta(delta) {
    	      var _this = this;

    	      var consumeNextNewline = false;
    	      this.scroll.update();
    	      var scrollLength = this.scroll.length();
    	      this.scroll.batchStart();
    	      delta = normalizeDelta(delta);
    	      delta.reduce(function (index, op) {
    	        var length = op.retain || op.delete || op.insert.length || 1;
    	        var attributes = op.attributes || {};
    	        if (op.insert != null) {
    	          if (typeof op.insert === 'string') {
    	            var text = op.insert;
    	            if (text.endsWith('\n') && consumeNextNewline) {
    	              consumeNextNewline = false;
    	              text = text.slice(0, -1);
    	            }
    	            if (index >= scrollLength && !text.endsWith('\n')) {
    	              consumeNextNewline = true;
    	            }
    	            _this.scroll.insertAt(index, text);

    	            var _scroll$line = _this.scroll.line(index),
    	                _scroll$line2 = _slicedToArray(_scroll$line, 2),
    	                line = _scroll$line2[0],
    	                offset = _scroll$line2[1];

    	            var formats = (0, _extend2.default)({}, (0, _block.bubbleFormats)(line));
    	            if (line instanceof _block2.default) {
    	              var _line$descendant = line.descendant(_parchment2.default.Leaf, offset),
    	                  _line$descendant2 = _slicedToArray(_line$descendant, 1),
    	                  leaf = _line$descendant2[0];

    	              formats = (0, _extend2.default)(formats, (0, _block.bubbleFormats)(leaf));
    	            }
    	            attributes = _op2.default.attributes.diff(formats, attributes) || {};
    	          } else if (_typeof(op.insert) === 'object') {
    	            var key = Object.keys(op.insert)[0]; // There should only be one key
    	            if (key == null) return index;
    	            _this.scroll.insertAt(index, key, op.insert[key]);
    	          }
    	          scrollLength += length;
    	        }
    	        Object.keys(attributes).forEach(function (name) {
    	          _this.scroll.formatAt(index, length, name, attributes[name]);
    	        });
    	        return index + length;
    	      }, 0);
    	      delta.reduce(function (index, op) {
    	        if (typeof op.delete === 'number') {
    	          _this.scroll.deleteAt(index, op.delete);
    	          return index;
    	        }
    	        return index + (op.retain || op.insert.length || 1);
    	      }, 0);
    	      this.scroll.batchEnd();
    	      return this.update(delta);
    	    }
    	  }, {
    	    key: 'deleteText',
    	    value: function deleteText(index, length) {
    	      this.scroll.deleteAt(index, length);
    	      return this.update(new _quillDelta2.default().retain(index).delete(length));
    	    }
    	  }, {
    	    key: 'formatLine',
    	    value: function formatLine(index, length) {
    	      var _this2 = this;

    	      var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    	      this.scroll.update();
    	      Object.keys(formats).forEach(function (format) {
    	        if (_this2.scroll.whitelist != null && !_this2.scroll.whitelist[format]) return;
    	        var lines = _this2.scroll.lines(index, Math.max(length, 1));
    	        var lengthRemaining = length;
    	        lines.forEach(function (line) {
    	          var lineLength = line.length();
    	          if (!(line instanceof _code2.default)) {
    	            line.format(format, formats[format]);
    	          } else {
    	            var codeIndex = index - line.offset(_this2.scroll);
    	            var codeLength = line.newlineIndex(codeIndex + lengthRemaining) - codeIndex + 1;
    	            line.formatAt(codeIndex, codeLength, format, formats[format]);
    	          }
    	          lengthRemaining -= lineLength;
    	        });
    	      });
    	      this.scroll.optimize();
    	      return this.update(new _quillDelta2.default().retain(index).retain(length, (0, _clone2.default)(formats)));
    	    }
    	  }, {
    	    key: 'formatText',
    	    value: function formatText(index, length) {
    	      var _this3 = this;

    	      var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    	      Object.keys(formats).forEach(function (format) {
    	        _this3.scroll.formatAt(index, length, format, formats[format]);
    	      });
    	      return this.update(new _quillDelta2.default().retain(index).retain(length, (0, _clone2.default)(formats)));
    	    }
    	  }, {
    	    key: 'getContents',
    	    value: function getContents(index, length) {
    	      return this.delta.slice(index, index + length);
    	    }
    	  }, {
    	    key: 'getDelta',
    	    value: function getDelta() {
    	      return this.scroll.lines().reduce(function (delta, line) {
    	        return delta.concat(line.delta());
    	      }, new _quillDelta2.default());
    	    }
    	  }, {
    	    key: 'getFormat',
    	    value: function getFormat(index) {
    	      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    	      var lines = [],
    	          leaves = [];
    	      if (length === 0) {
    	        this.scroll.path(index).forEach(function (path) {
    	          var _path = _slicedToArray(path, 1),
    	              blot = _path[0];

    	          if (blot instanceof _block2.default) {
    	            lines.push(blot);
    	          } else if (blot instanceof _parchment2.default.Leaf) {
    	            leaves.push(blot);
    	          }
    	        });
    	      } else {
    	        lines = this.scroll.lines(index, length);
    	        leaves = this.scroll.descendants(_parchment2.default.Leaf, index, length);
    	      }
    	      var formatsArr = [lines, leaves].map(function (blots) {
    	        if (blots.length === 0) return {};
    	        var formats = (0, _block.bubbleFormats)(blots.shift());
    	        while (Object.keys(formats).length > 0) {
    	          var blot = blots.shift();
    	          if (blot == null) return formats;
    	          formats = combineFormats((0, _block.bubbleFormats)(blot), formats);
    	        }
    	        return formats;
    	      });
    	      return _extend2.default.apply(_extend2.default, formatsArr);
    	    }
    	  }, {
    	    key: 'getText',
    	    value: function getText(index, length) {
    	      return this.getContents(index, length).filter(function (op) {
    	        return typeof op.insert === 'string';
    	      }).map(function (op) {
    	        return op.insert;
    	      }).join('');
    	    }
    	  }, {
    	    key: 'insertEmbed',
    	    value: function insertEmbed(index, embed, value) {
    	      this.scroll.insertAt(index, embed, value);
    	      return this.update(new _quillDelta2.default().retain(index).insert(_defineProperty({}, embed, value)));
    	    }
    	  }, {
    	    key: 'insertText',
    	    value: function insertText(index, text) {
    	      var _this4 = this;

    	      var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    	      text = text.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
    	      this.scroll.insertAt(index, text);
    	      Object.keys(formats).forEach(function (format) {
    	        _this4.scroll.formatAt(index, text.length, format, formats[format]);
    	      });
    	      return this.update(new _quillDelta2.default().retain(index).insert(text, (0, _clone2.default)(formats)));
    	    }
    	  }, {
    	    key: 'isBlank',
    	    value: function isBlank() {
    	      if (this.scroll.children.length == 0) return true;
    	      if (this.scroll.children.length > 1) return false;
    	      var block = this.scroll.children.head;
    	      if (block.statics.blotName !== _block2.default.blotName) return false;
    	      if (block.children.length > 1) return false;
    	      return block.children.head instanceof _break2.default;
    	    }
    	  }, {
    	    key: 'removeFormat',
    	    value: function removeFormat(index, length) {
    	      var text = this.getText(index, length);

    	      var _scroll$line3 = this.scroll.line(index + length),
    	          _scroll$line4 = _slicedToArray(_scroll$line3, 2),
    	          line = _scroll$line4[0],
    	          offset = _scroll$line4[1];

    	      var suffixLength = 0,
    	          suffix = new _quillDelta2.default();
    	      if (line != null) {
    	        if (!(line instanceof _code2.default)) {
    	          suffixLength = line.length() - offset;
    	        } else {
    	          suffixLength = line.newlineIndex(offset) - offset + 1;
    	        }
    	        suffix = line.delta().slice(offset, offset + suffixLength - 1).insert('\n');
    	      }
    	      var contents = this.getContents(index, length + suffixLength);
    	      var diff = contents.diff(new _quillDelta2.default().insert(text).concat(suffix));
    	      var delta = new _quillDelta2.default().retain(index).concat(diff);
    	      return this.applyDelta(delta);
    	    }
    	  }, {
    	    key: 'update',
    	    value: function update(change) {
    	      var mutations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    	      var cursorIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

    	      var oldDelta = this.delta;
    	      if (mutations.length === 1 && mutations[0].type === 'characterData' && mutations[0].target.data.match(ASCII) && _parchment2.default.find(mutations[0].target)) {
    	        // Optimization for character changes
    	        var textBlot = _parchment2.default.find(mutations[0].target);
    	        var formats = (0, _block.bubbleFormats)(textBlot);
    	        var index = textBlot.offset(this.scroll);
    	        var oldValue = mutations[0].oldValue.replace(_cursor2.default.CONTENTS, '');
    	        var oldText = new _quillDelta2.default().insert(oldValue);
    	        var newText = new _quillDelta2.default().insert(textBlot.value());
    	        var diffDelta = new _quillDelta2.default().retain(index).concat(oldText.diff(newText, cursorIndex));
    	        change = diffDelta.reduce(function (delta, op) {
    	          if (op.insert) {
    	            return delta.insert(op.insert, formats);
    	          } else {
    	            return delta.push(op);
    	          }
    	        }, new _quillDelta2.default());
    	        this.delta = oldDelta.compose(change);
    	      } else {
    	        this.delta = this.getDelta();
    	        if (!change || !(0, _deepEqual2.default)(oldDelta.compose(change), this.delta)) {
    	          change = oldDelta.diff(this.delta, cursorIndex);
    	        }
    	      }
    	      return change;
    	    }
    	  }]);

    	  return Editor;
    	}();

    	function combineFormats(formats, combined) {
    	  return Object.keys(combined).reduce(function (merged, name) {
    	    if (formats[name] == null) return merged;
    	    if (combined[name] === formats[name]) {
    	      merged[name] = combined[name];
    	    } else if (Array.isArray(combined[name])) {
    	      if (combined[name].indexOf(formats[name]) < 0) {
    	        merged[name] = combined[name].concat([formats[name]]);
    	      }
    	    } else {
    	      merged[name] = [combined[name], formats[name]];
    	    }
    	    return merged;
    	  }, {});
    	}

    	function normalizeDelta(delta) {
    	  return delta.reduce(function (delta, op) {
    	    if (op.insert === 1) {
    	      var attributes = (0, _clone2.default)(op.attributes);
    	      delete attributes['image'];
    	      return delta.insert({ image: op.attributes.image }, attributes);
    	    }
    	    if (op.attributes != null && (op.attributes.list === true || op.attributes.bullet === true)) {
    	      op = (0, _clone2.default)(op);
    	      if (op.attributes.list) {
    	        op.attributes.list = 'ordered';
    	      } else {
    	        op.attributes.list = 'bullet';
    	        delete op.attributes.bullet;
    	      }
    	    }
    	    if (typeof op.insert === 'string') {
    	      var text = op.insert.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
    	      return delta.insert(text, op.attributes);
    	    }
    	    return delta.push(op);
    	  }, new _quillDelta2.default());
    	}

    	exports.default = Editor;

    	/***/ }),
    	/* 15 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.default = exports.Range = undefined;

    	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _clone = __webpack_require__(21);

    	var _clone2 = _interopRequireDefault(_clone);

    	var _deepEqual = __webpack_require__(11);

    	var _deepEqual2 = _interopRequireDefault(_deepEqual);

    	var _emitter3 = __webpack_require__(8);

    	var _emitter4 = _interopRequireDefault(_emitter3);

    	var _logger = __webpack_require__(10);

    	var _logger2 = _interopRequireDefault(_logger);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	var debug = (0, _logger2.default)('quill:selection');

    	var Range = function Range(index) {
    	  var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    	  _classCallCheck(this, Range);

    	  this.index = index;
    	  this.length = length;
    	};

    	var Selection = function () {
    	  function Selection(scroll, emitter) {
    	    var _this = this;

    	    _classCallCheck(this, Selection);

    	    this.emitter = emitter;
    	    this.scroll = scroll;
    	    this.composing = false;
    	    this.mouseDown = false;
    	    this.root = this.scroll.domNode;
    	    this.cursor = _parchment2.default.create('cursor', this);
    	    // savedRange is last non-null range
    	    this.lastRange = this.savedRange = new Range(0, 0);
    	    this.handleComposition();
    	    this.handleDragging();
    	    this.emitter.listenDOM('selectionchange', document, function () {
    	      if (!_this.mouseDown) {
    	        setTimeout(_this.update.bind(_this, _emitter4.default.sources.USER), 1);
    	      }
    	    });
    	    this.emitter.on(_emitter4.default.events.EDITOR_CHANGE, function (type, delta) {
    	      if (type === _emitter4.default.events.TEXT_CHANGE && delta.length() > 0) {
    	        _this.update(_emitter4.default.sources.SILENT);
    	      }
    	    });
    	    this.emitter.on(_emitter4.default.events.SCROLL_BEFORE_UPDATE, function () {
    	      if (!_this.hasFocus()) return;
    	      var native = _this.getNativeRange();
    	      if (native == null) return;
    	      if (native.start.node === _this.cursor.textNode) return; // cursor.restore() will handle
    	      // TODO unclear if this has negative side effects
    	      _this.emitter.once(_emitter4.default.events.SCROLL_UPDATE, function () {
    	        try {
    	          _this.setNativeRange(native.start.node, native.start.offset, native.end.node, native.end.offset);
    	        } catch (ignored) {}
    	      });
    	    });
    	    this.emitter.on(_emitter4.default.events.SCROLL_OPTIMIZE, function (mutations, context) {
    	      if (context.range) {
    	        var _context$range = context.range,
    	            startNode = _context$range.startNode,
    	            startOffset = _context$range.startOffset,
    	            endNode = _context$range.endNode,
    	            endOffset = _context$range.endOffset;

    	        _this.setNativeRange(startNode, startOffset, endNode, endOffset);
    	      }
    	    });
    	    this.update(_emitter4.default.sources.SILENT);
    	  }

    	  _createClass(Selection, [{
    	    key: 'handleComposition',
    	    value: function handleComposition() {
    	      var _this2 = this;

    	      this.root.addEventListener('compositionstart', function () {
    	        _this2.composing = true;
    	      });
    	      this.root.addEventListener('compositionend', function () {
    	        _this2.composing = false;
    	        if (_this2.cursor.parent) {
    	          var range = _this2.cursor.restore();
    	          if (!range) return;
    	          setTimeout(function () {
    	            _this2.setNativeRange(range.startNode, range.startOffset, range.endNode, range.endOffset);
    	          }, 1);
    	        }
    	      });
    	    }
    	  }, {
    	    key: 'handleDragging',
    	    value: function handleDragging() {
    	      var _this3 = this;

    	      this.emitter.listenDOM('mousedown', document.body, function () {
    	        _this3.mouseDown = true;
    	      });
    	      this.emitter.listenDOM('mouseup', document.body, function () {
    	        _this3.mouseDown = false;
    	        _this3.update(_emitter4.default.sources.USER);
    	      });
    	    }
    	  }, {
    	    key: 'focus',
    	    value: function focus() {
    	      if (this.hasFocus()) return;
    	      this.root.focus();
    	      this.setRange(this.savedRange);
    	    }
    	  }, {
    	    key: 'format',
    	    value: function format(_format, value) {
    	      if (this.scroll.whitelist != null && !this.scroll.whitelist[_format]) return;
    	      this.scroll.update();
    	      var nativeRange = this.getNativeRange();
    	      if (nativeRange == null || !nativeRange.native.collapsed || _parchment2.default.query(_format, _parchment2.default.Scope.BLOCK)) return;
    	      if (nativeRange.start.node !== this.cursor.textNode) {
    	        var blot = _parchment2.default.find(nativeRange.start.node, false);
    	        if (blot == null) return;
    	        // TODO Give blot ability to not split
    	        if (blot instanceof _parchment2.default.Leaf) {
    	          var after = blot.split(nativeRange.start.offset);
    	          blot.parent.insertBefore(this.cursor, after);
    	        } else {
    	          blot.insertBefore(this.cursor, nativeRange.start.node); // Should never happen
    	        }
    	        this.cursor.attach();
    	      }
    	      this.cursor.format(_format, value);
    	      this.scroll.optimize();
    	      this.setNativeRange(this.cursor.textNode, this.cursor.textNode.data.length);
    	      this.update();
    	    }
    	  }, {
    	    key: 'getBounds',
    	    value: function getBounds(index) {
    	      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    	      var scrollLength = this.scroll.length();
    	      index = Math.min(index, scrollLength - 1);
    	      length = Math.min(index + length, scrollLength - 1) - index;
    	      var node = void 0,
    	          _scroll$leaf = this.scroll.leaf(index),
    	          _scroll$leaf2 = _slicedToArray(_scroll$leaf, 2),
    	          leaf = _scroll$leaf2[0],
    	          offset = _scroll$leaf2[1];
    	      if (leaf == null) return null;

    	      var _leaf$position = leaf.position(offset, true);

    	      var _leaf$position2 = _slicedToArray(_leaf$position, 2);

    	      node = _leaf$position2[0];
    	      offset = _leaf$position2[1];

    	      var range = document.createRange();
    	      if (length > 0) {
    	        range.setStart(node, offset);

    	        var _scroll$leaf3 = this.scroll.leaf(index + length);

    	        var _scroll$leaf4 = _slicedToArray(_scroll$leaf3, 2);

    	        leaf = _scroll$leaf4[0];
    	        offset = _scroll$leaf4[1];

    	        if (leaf == null) return null;

    	        var _leaf$position3 = leaf.position(offset, true);

    	        var _leaf$position4 = _slicedToArray(_leaf$position3, 2);

    	        node = _leaf$position4[0];
    	        offset = _leaf$position4[1];

    	        range.setEnd(node, offset);
    	        return range.getBoundingClientRect();
    	      } else {
    	        var side = 'left';
    	        var rect = void 0;
    	        if (node instanceof Text) {
    	          if (offset < node.data.length) {
    	            range.setStart(node, offset);
    	            range.setEnd(node, offset + 1);
    	          } else {
    	            range.setStart(node, offset - 1);
    	            range.setEnd(node, offset);
    	            side = 'right';
    	          }
    	          rect = range.getBoundingClientRect();
    	        } else {
    	          rect = leaf.domNode.getBoundingClientRect();
    	          if (offset > 0) side = 'right';
    	        }
    	        return {
    	          bottom: rect.top + rect.height,
    	          height: rect.height,
    	          left: rect[side],
    	          right: rect[side],
    	          top: rect.top,
    	          width: 0
    	        };
    	      }
    	    }
    	  }, {
    	    key: 'getNativeRange',
    	    value: function getNativeRange() {
    	      var selection = document.getSelection();
    	      if (selection == null || selection.rangeCount <= 0) return null;
    	      var nativeRange = selection.getRangeAt(0);
    	      if (nativeRange == null) return null;
    	      var range = this.normalizeNative(nativeRange);
    	      debug.info('getNativeRange', range);
    	      return range;
    	    }
    	  }, {
    	    key: 'getRange',
    	    value: function getRange() {
    	      var normalized = this.getNativeRange();
    	      if (normalized == null) return [null, null];
    	      var range = this.normalizedToRange(normalized);
    	      return [range, normalized];
    	    }
    	  }, {
    	    key: 'hasFocus',
    	    value: function hasFocus() {
    	      return document.activeElement === this.root;
    	    }
    	  }, {
    	    key: 'normalizedToRange',
    	    value: function normalizedToRange(range) {
    	      var _this4 = this;

    	      var positions = [[range.start.node, range.start.offset]];
    	      if (!range.native.collapsed) {
    	        positions.push([range.end.node, range.end.offset]);
    	      }
    	      var indexes = positions.map(function (position) {
    	        var _position = _slicedToArray(position, 2),
    	            node = _position[0],
    	            offset = _position[1];

    	        var blot = _parchment2.default.find(node, true);
    	        var index = blot.offset(_this4.scroll);
    	        if (offset === 0) {
    	          return index;
    	        } else if (blot instanceof _parchment2.default.Container) {
    	          return index + blot.length();
    	        } else {
    	          return index + blot.index(node, offset);
    	        }
    	      });
    	      var end = Math.min(Math.max.apply(Math, _toConsumableArray(indexes)), this.scroll.length() - 1);
    	      var start = Math.min.apply(Math, [end].concat(_toConsumableArray(indexes)));
    	      return new Range(start, end - start);
    	    }
    	  }, {
    	    key: 'normalizeNative',
    	    value: function normalizeNative(nativeRange) {
    	      if (!contains(this.root, nativeRange.startContainer) || !nativeRange.collapsed && !contains(this.root, nativeRange.endContainer)) {
    	        return null;
    	      }
    	      var range = {
    	        start: { node: nativeRange.startContainer, offset: nativeRange.startOffset },
    	        end: { node: nativeRange.endContainer, offset: nativeRange.endOffset },
    	        native: nativeRange
    	      };
    	      [range.start, range.end].forEach(function (position) {
    	        var node = position.node,
    	            offset = position.offset;
    	        while (!(node instanceof Text) && node.childNodes.length > 0) {
    	          if (node.childNodes.length > offset) {
    	            node = node.childNodes[offset];
    	            offset = 0;
    	          } else if (node.childNodes.length === offset) {
    	            node = node.lastChild;
    	            offset = node instanceof Text ? node.data.length : node.childNodes.length + 1;
    	          } else {
    	            break;
    	          }
    	        }
    	        position.node = node, position.offset = offset;
    	      });
    	      return range;
    	    }
    	  }, {
    	    key: 'rangeToNative',
    	    value: function rangeToNative(range) {
    	      var _this5 = this;

    	      var indexes = range.collapsed ? [range.index] : [range.index, range.index + range.length];
    	      var args = [];
    	      var scrollLength = this.scroll.length();
    	      indexes.forEach(function (index, i) {
    	        index = Math.min(scrollLength - 1, index);
    	        var node = void 0,
    	            _scroll$leaf5 = _this5.scroll.leaf(index),
    	            _scroll$leaf6 = _slicedToArray(_scroll$leaf5, 2),
    	            leaf = _scroll$leaf6[0],
    	            offset = _scroll$leaf6[1];
    	        var _leaf$position5 = leaf.position(offset, i !== 0);

    	        var _leaf$position6 = _slicedToArray(_leaf$position5, 2);

    	        node = _leaf$position6[0];
    	        offset = _leaf$position6[1];

    	        args.push(node, offset);
    	      });
    	      if (args.length < 2) {
    	        args = args.concat(args);
    	      }
    	      return args;
    	    }
    	  }, {
    	    key: 'scrollIntoView',
    	    value: function scrollIntoView(scrollingContainer) {
    	      var range = this.lastRange;
    	      if (range == null) return;
    	      var bounds = this.getBounds(range.index, range.length);
    	      if (bounds == null) return;
    	      var limit = this.scroll.length() - 1;

    	      var _scroll$line = this.scroll.line(Math.min(range.index, limit)),
    	          _scroll$line2 = _slicedToArray(_scroll$line, 1),
    	          first = _scroll$line2[0];

    	      var last = first;
    	      if (range.length > 0) {
    	        var _scroll$line3 = this.scroll.line(Math.min(range.index + range.length, limit));

    	        var _scroll$line4 = _slicedToArray(_scroll$line3, 1);

    	        last = _scroll$line4[0];
    	      }
    	      if (first == null || last == null) return;
    	      var scrollBounds = scrollingContainer.getBoundingClientRect();
    	      if (bounds.top < scrollBounds.top) {
    	        scrollingContainer.scrollTop -= scrollBounds.top - bounds.top;
    	      } else if (bounds.bottom > scrollBounds.bottom) {
    	        scrollingContainer.scrollTop += bounds.bottom - scrollBounds.bottom;
    	      }
    	    }
    	  }, {
    	    key: 'setNativeRange',
    	    value: function setNativeRange(startNode, startOffset) {
    	      var endNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : startNode;
    	      var endOffset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : startOffset;
    	      var force = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

    	      debug.info('setNativeRange', startNode, startOffset, endNode, endOffset);
    	      if (startNode != null && (this.root.parentNode == null || startNode.parentNode == null || endNode.parentNode == null)) {
    	        return;
    	      }
    	      var selection = document.getSelection();
    	      if (selection == null) return;
    	      if (startNode != null) {
    	        if (!this.hasFocus()) this.root.focus();
    	        var native = (this.getNativeRange() || {}).native;
    	        if (native == null || force || startNode !== native.startContainer || startOffset !== native.startOffset || endNode !== native.endContainer || endOffset !== native.endOffset) {

    	          if (startNode.tagName == "BR") {
    	            startOffset = [].indexOf.call(startNode.parentNode.childNodes, startNode);
    	            startNode = startNode.parentNode;
    	          }
    	          if (endNode.tagName == "BR") {
    	            endOffset = [].indexOf.call(endNode.parentNode.childNodes, endNode);
    	            endNode = endNode.parentNode;
    	          }
    	          var range = document.createRange();
    	          range.setStart(startNode, startOffset);
    	          range.setEnd(endNode, endOffset);
    	          selection.removeAllRanges();
    	          selection.addRange(range);
    	        }
    	      } else {
    	        selection.removeAllRanges();
    	        this.root.blur();
    	        document.body.focus(); // root.blur() not enough on IE11+Travis+SauceLabs (but not local VMs)
    	      }
    	    }
    	  }, {
    	    key: 'setRange',
    	    value: function setRange(range) {
    	      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    	      var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _emitter4.default.sources.API;

    	      if (typeof force === 'string') {
    	        source = force;
    	        force = false;
    	      }
    	      debug.info('setRange', range);
    	      if (range != null) {
    	        var args = this.rangeToNative(range);
    	        this.setNativeRange.apply(this, _toConsumableArray(args).concat([force]));
    	      } else {
    	        this.setNativeRange(null);
    	      }
    	      this.update(source);
    	    }
    	  }, {
    	    key: 'update',
    	    value: function update() {
    	      var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _emitter4.default.sources.USER;

    	      var oldRange = this.lastRange;

    	      var _getRange = this.getRange(),
    	          _getRange2 = _slicedToArray(_getRange, 2),
    	          lastRange = _getRange2[0],
    	          nativeRange = _getRange2[1];

    	      this.lastRange = lastRange;
    	      if (this.lastRange != null) {
    	        this.savedRange = this.lastRange;
    	      }
    	      if (!(0, _deepEqual2.default)(oldRange, this.lastRange)) {
    	        var _emitter;

    	        if (!this.composing && nativeRange != null && nativeRange.native.collapsed && nativeRange.start.node !== this.cursor.textNode) {
    	          this.cursor.restore();
    	        }
    	        var args = [_emitter4.default.events.SELECTION_CHANGE, (0, _clone2.default)(this.lastRange), (0, _clone2.default)(oldRange), source];
    	        (_emitter = this.emitter).emit.apply(_emitter, [_emitter4.default.events.EDITOR_CHANGE].concat(args));
    	        if (source !== _emitter4.default.sources.SILENT) {
    	          var _emitter2;

    	          (_emitter2 = this.emitter).emit.apply(_emitter2, args);
    	        }
    	      }
    	    }
    	  }]);

    	  return Selection;
    	}();

    	function contains(parent, descendant) {
    	  try {
    	    // Firefox inserts inaccessible nodes around video elements
    	    descendant.parentNode;
    	  } catch (e) {
    	    return false;
    	  }
    	  // IE11 has bug with Text nodes
    	  // https://connect.microsoft.com/IE/feedback/details/780874/node-contains-is-incorrect
    	  if (descendant instanceof Text) {
    	    descendant = descendant.parentNode;
    	  }
    	  return parent.contains(descendant);
    	}

    	exports.Range = Range;
    	exports.default = Selection;

    	/***/ }),
    	/* 16 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Break = function (_Parchment$Embed) {
    	  _inherits(Break, _Parchment$Embed);

    	  function Break() {
    	    _classCallCheck(this, Break);

    	    return _possibleConstructorReturn(this, (Break.__proto__ || Object.getPrototypeOf(Break)).apply(this, arguments));
    	  }

    	  _createClass(Break, [{
    	    key: 'insertInto',
    	    value: function insertInto(parent, ref) {
    	      if (parent.children.length === 0) {
    	        _get(Break.prototype.__proto__ || Object.getPrototypeOf(Break.prototype), 'insertInto', this).call(this, parent, ref);
    	      } else {
    	        this.remove();
    	      }
    	    }
    	  }, {
    	    key: 'length',
    	    value: function length() {
    	      return 0;
    	    }
    	  }, {
    	    key: 'value',
    	    value: function value() {
    	      return '';
    	    }
    	  }], [{
    	    key: 'value',
    	    value: function value() {
    	      return undefined;
    	    }
    	  }]);

    	  return Break;
    	}(_parchment2.default.Embed);

    	Break.blotName = 'break';
    	Break.tagName = 'BR';

    	exports.default = Break;

    	/***/ }),
    	/* 17 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var __extends = (this && this.__extends) || (function () {
    	    var extendStatics = Object.setPrototypeOf ||
    	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    	    return function (d, b) {
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(exports, "__esModule", { value: true });
    	var linked_list_1 = __webpack_require__(44);
    	var shadow_1 = __webpack_require__(30);
    	var Registry = __webpack_require__(1);
    	var ContainerBlot = /** @class */ (function (_super) {
    	    __extends(ContainerBlot, _super);
    	    function ContainerBlot(domNode) {
    	        var _this = _super.call(this, domNode) || this;
    	        _this.build();
    	        return _this;
    	    }
    	    ContainerBlot.prototype.appendChild = function (other) {
    	        this.insertBefore(other);
    	    };
    	    ContainerBlot.prototype.attach = function () {
    	        _super.prototype.attach.call(this);
    	        this.children.forEach(function (child) {
    	            child.attach();
    	        });
    	    };
    	    ContainerBlot.prototype.build = function () {
    	        var _this = this;
    	        this.children = new linked_list_1.default();
    	        // Need to be reversed for if DOM nodes already in order
    	        [].slice
    	            .call(this.domNode.childNodes)
    	            .reverse()
    	            .forEach(function (node) {
    	            try {
    	                var child = makeBlot(node);
    	                _this.insertBefore(child, _this.children.head || undefined);
    	            }
    	            catch (err) {
    	                if (err instanceof Registry.ParchmentError)
    	                    return;
    	                else
    	                    throw err;
    	            }
    	        });
    	    };
    	    ContainerBlot.prototype.deleteAt = function (index, length) {
    	        if (index === 0 && length === this.length()) {
    	            return this.remove();
    	        }
    	        this.children.forEachAt(index, length, function (child, offset, length) {
    	            child.deleteAt(offset, length);
    	        });
    	    };
    	    ContainerBlot.prototype.descendant = function (criteria, index) {
    	        var _a = this.children.find(index), child = _a[0], offset = _a[1];
    	        if ((criteria.blotName == null && criteria(child)) ||
    	            (criteria.blotName != null && child instanceof criteria)) {
    	            return [child, offset];
    	        }
    	        else if (child instanceof ContainerBlot) {
    	            return child.descendant(criteria, offset);
    	        }
    	        else {
    	            return [null, -1];
    	        }
    	    };
    	    ContainerBlot.prototype.descendants = function (criteria, index, length) {
    	        if (index === void 0) { index = 0; }
    	        if (length === void 0) { length = Number.MAX_VALUE; }
    	        var descendants = [];
    	        var lengthLeft = length;
    	        this.children.forEachAt(index, length, function (child, index, length) {
    	            if ((criteria.blotName == null && criteria(child)) ||
    	                (criteria.blotName != null && child instanceof criteria)) {
    	                descendants.push(child);
    	            }
    	            if (child instanceof ContainerBlot) {
    	                descendants = descendants.concat(child.descendants(criteria, index, lengthLeft));
    	            }
    	            lengthLeft -= length;
    	        });
    	        return descendants;
    	    };
    	    ContainerBlot.prototype.detach = function () {
    	        this.children.forEach(function (child) {
    	            child.detach();
    	        });
    	        _super.prototype.detach.call(this);
    	    };
    	    ContainerBlot.prototype.formatAt = function (index, length, name, value) {
    	        this.children.forEachAt(index, length, function (child, offset, length) {
    	            child.formatAt(offset, length, name, value);
    	        });
    	    };
    	    ContainerBlot.prototype.insertAt = function (index, value, def) {
    	        var _a = this.children.find(index), child = _a[0], offset = _a[1];
    	        if (child) {
    	            child.insertAt(offset, value, def);
    	        }
    	        else {
    	            var blot = def == null ? Registry.create('text', value) : Registry.create(value, def);
    	            this.appendChild(blot);
    	        }
    	    };
    	    ContainerBlot.prototype.insertBefore = function (childBlot, refBlot) {
    	        if (this.statics.allowedChildren != null &&
    	            !this.statics.allowedChildren.some(function (child) {
    	                return childBlot instanceof child;
    	            })) {
    	            throw new Registry.ParchmentError("Cannot insert " + childBlot.statics.blotName + " into " + this.statics.blotName);
    	        }
    	        childBlot.insertInto(this, refBlot);
    	    };
    	    ContainerBlot.prototype.length = function () {
    	        return this.children.reduce(function (memo, child) {
    	            return memo + child.length();
    	        }, 0);
    	    };
    	    ContainerBlot.prototype.moveChildren = function (targetParent, refNode) {
    	        this.children.forEach(function (child) {
    	            targetParent.insertBefore(child, refNode);
    	        });
    	    };
    	    ContainerBlot.prototype.optimize = function (context) {
    	        _super.prototype.optimize.call(this, context);
    	        if (this.children.length === 0) {
    	            if (this.statics.defaultChild != null) {
    	                var child = Registry.create(this.statics.defaultChild);
    	                this.appendChild(child);
    	                child.optimize(context);
    	            }
    	            else {
    	                this.remove();
    	            }
    	        }
    	    };
    	    ContainerBlot.prototype.path = function (index, inclusive) {
    	        if (inclusive === void 0) { inclusive = false; }
    	        var _a = this.children.find(index, inclusive), child = _a[0], offset = _a[1];
    	        var position = [[this, index]];
    	        if (child instanceof ContainerBlot) {
    	            return position.concat(child.path(offset, inclusive));
    	        }
    	        else if (child != null) {
    	            position.push([child, offset]);
    	        }
    	        return position;
    	    };
    	    ContainerBlot.prototype.removeChild = function (child) {
    	        this.children.remove(child);
    	    };
    	    ContainerBlot.prototype.replace = function (target) {
    	        if (target instanceof ContainerBlot) {
    	            target.moveChildren(this);
    	        }
    	        _super.prototype.replace.call(this, target);
    	    };
    	    ContainerBlot.prototype.split = function (index, force) {
    	        if (force === void 0) { force = false; }
    	        if (!force) {
    	            if (index === 0)
    	                return this;
    	            if (index === this.length())
    	                return this.next;
    	        }
    	        var after = this.clone();
    	        this.parent.insertBefore(after, this.next);
    	        this.children.forEachAt(index, this.length(), function (child, offset, length) {
    	            child = child.split(offset, force);
    	            after.appendChild(child);
    	        });
    	        return after;
    	    };
    	    ContainerBlot.prototype.unwrap = function () {
    	        this.moveChildren(this.parent, this.next);
    	        this.remove();
    	    };
    	    ContainerBlot.prototype.update = function (mutations, context) {
    	        var _this = this;
    	        var addedNodes = [];
    	        var removedNodes = [];
    	        mutations.forEach(function (mutation) {
    	            if (mutation.target === _this.domNode && mutation.type === 'childList') {
    	                addedNodes.push.apply(addedNodes, mutation.addedNodes);
    	                removedNodes.push.apply(removedNodes, mutation.removedNodes);
    	            }
    	        });
    	        removedNodes.forEach(function (node) {
    	            // Check node has actually been removed
    	            // One exception is Chrome does not immediately remove IFRAMEs
    	            // from DOM but MutationRecord is correct in its reported removal
    	            if (node.parentNode != null &&
    	                // @ts-ignore
    	                node.tagName !== 'IFRAME' &&
    	                document.body.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY) {
    	                return;
    	            }
    	            var blot = Registry.find(node);
    	            if (blot == null)
    	                return;
    	            if (blot.domNode.parentNode == null || blot.domNode.parentNode === _this.domNode) {
    	                blot.detach();
    	            }
    	        });
    	        addedNodes
    	            .filter(function (node) {
    	            return node.parentNode == _this.domNode;
    	        })
    	            .sort(function (a, b) {
    	            if (a === b)
    	                return 0;
    	            if (a.compareDocumentPosition(b) & Node.DOCUMENT_POSITION_FOLLOWING) {
    	                return 1;
    	            }
    	            return -1;
    	        })
    	            .forEach(function (node) {
    	            var refBlot = null;
    	            if (node.nextSibling != null) {
    	                refBlot = Registry.find(node.nextSibling);
    	            }
    	            var blot = makeBlot(node);
    	            if (blot.next != refBlot || blot.next == null) {
    	                if (blot.parent != null) {
    	                    blot.parent.removeChild(_this);
    	                }
    	                _this.insertBefore(blot, refBlot || undefined);
    	            }
    	        });
    	    };
    	    return ContainerBlot;
    	}(shadow_1.default));
    	function makeBlot(node) {
    	    var blot = Registry.find(node);
    	    if (blot == null) {
    	        try {
    	            blot = Registry.create(node);
    	        }
    	        catch (e) {
    	            blot = Registry.create(Registry.Scope.INLINE);
    	            [].slice.call(node.childNodes).forEach(function (child) {
    	                // @ts-ignore
    	                blot.domNode.appendChild(child);
    	            });
    	            if (node.parentNode) {
    	                node.parentNode.replaceChild(blot.domNode, node);
    	            }
    	            blot.attach();
    	        }
    	    }
    	    return blot;
    	}
    	exports.default = ContainerBlot;


    	/***/ }),
    	/* 18 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var __extends = (this && this.__extends) || (function () {
    	    var extendStatics = Object.setPrototypeOf ||
    	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    	    return function (d, b) {
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(exports, "__esModule", { value: true });
    	var attributor_1 = __webpack_require__(12);
    	var store_1 = __webpack_require__(31);
    	var container_1 = __webpack_require__(17);
    	var Registry = __webpack_require__(1);
    	var FormatBlot = /** @class */ (function (_super) {
    	    __extends(FormatBlot, _super);
    	    function FormatBlot(domNode) {
    	        var _this = _super.call(this, domNode) || this;
    	        _this.attributes = new store_1.default(_this.domNode);
    	        return _this;
    	    }
    	    FormatBlot.formats = function (domNode) {
    	        if (typeof this.tagName === 'string') {
    	            return true;
    	        }
    	        else if (Array.isArray(this.tagName)) {
    	            return domNode.tagName.toLowerCase();
    	        }
    	        return undefined;
    	    };
    	    FormatBlot.prototype.format = function (name, value) {
    	        var format = Registry.query(name);
    	        if (format instanceof attributor_1.default) {
    	            this.attributes.attribute(format, value);
    	        }
    	        else if (value) {
    	            if (format != null && (name !== this.statics.blotName || this.formats()[name] !== value)) {
    	                this.replaceWith(name, value);
    	            }
    	        }
    	    };
    	    FormatBlot.prototype.formats = function () {
    	        var formats = this.attributes.values();
    	        var format = this.statics.formats(this.domNode);
    	        if (format != null) {
    	            formats[this.statics.blotName] = format;
    	        }
    	        return formats;
    	    };
    	    FormatBlot.prototype.replaceWith = function (name, value) {
    	        var replacement = _super.prototype.replaceWith.call(this, name, value);
    	        this.attributes.copy(replacement);
    	        return replacement;
    	    };
    	    FormatBlot.prototype.update = function (mutations, context) {
    	        var _this = this;
    	        _super.prototype.update.call(this, mutations, context);
    	        if (mutations.some(function (mutation) {
    	            return mutation.target === _this.domNode && mutation.type === 'attributes';
    	        })) {
    	            this.attributes.build();
    	        }
    	    };
    	    FormatBlot.prototype.wrap = function (name, value) {
    	        var wrapper = _super.prototype.wrap.call(this, name, value);
    	        if (wrapper instanceof FormatBlot && wrapper.statics.scope === this.statics.scope) {
    	            this.attributes.move(wrapper);
    	        }
    	        return wrapper;
    	    };
    	    return FormatBlot;
    	}(container_1.default));
    	exports.default = FormatBlot;


    	/***/ }),
    	/* 19 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var __extends = (this && this.__extends) || (function () {
    	    var extendStatics = Object.setPrototypeOf ||
    	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    	    return function (d, b) {
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(exports, "__esModule", { value: true });
    	var shadow_1 = __webpack_require__(30);
    	var Registry = __webpack_require__(1);
    	var LeafBlot = /** @class */ (function (_super) {
    	    __extends(LeafBlot, _super);
    	    function LeafBlot() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    LeafBlot.value = function (domNode) {
    	        return true;
    	    };
    	    LeafBlot.prototype.index = function (node, offset) {
    	        if (this.domNode === node ||
    	            this.domNode.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY) {
    	            return Math.min(offset, 1);
    	        }
    	        return -1;
    	    };
    	    LeafBlot.prototype.position = function (index, inclusive) {
    	        var offset = [].indexOf.call(this.parent.domNode.childNodes, this.domNode);
    	        if (index > 0)
    	            offset += 1;
    	        return [this.parent.domNode, offset];
    	    };
    	    LeafBlot.prototype.value = function () {
    	        var _a;
    	        return _a = {}, _a[this.statics.blotName] = this.statics.value(this.domNode) || true, _a;
    	    };
    	    LeafBlot.scope = Registry.Scope.INLINE_BLOT;
    	    return LeafBlot;
    	}(shadow_1.default));
    	exports.default = LeafBlot;


    	/***/ }),
    	/* 20 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var equal = __webpack_require__(11);
    	var extend = __webpack_require__(3);


    	var lib = {
    	  attributes: {
    	    compose: function (a, b, keepNull) {
    	      if (typeof a !== 'object') a = {};
    	      if (typeof b !== 'object') b = {};
    	      var attributes = extend(true, {}, b);
    	      if (!keepNull) {
    	        attributes = Object.keys(attributes).reduce(function (copy, key) {
    	          if (attributes[key] != null) {
    	            copy[key] = attributes[key];
    	          }
    	          return copy;
    	        }, {});
    	      }
    	      for (var key in a) {
    	        if (a[key] !== undefined && b[key] === undefined) {
    	          attributes[key] = a[key];
    	        }
    	      }
    	      return Object.keys(attributes).length > 0 ? attributes : undefined;
    	    },

    	    diff: function(a, b) {
    	      if (typeof a !== 'object') a = {};
    	      if (typeof b !== 'object') b = {};
    	      var attributes = Object.keys(a).concat(Object.keys(b)).reduce(function (attributes, key) {
    	        if (!equal(a[key], b[key])) {
    	          attributes[key] = b[key] === undefined ? null : b[key];
    	        }
    	        return attributes;
    	      }, {});
    	      return Object.keys(attributes).length > 0 ? attributes : undefined;
    	    },

    	    transform: function (a, b, priority) {
    	      if (typeof a !== 'object') return b;
    	      if (typeof b !== 'object') return undefined;
    	      if (!priority) return b;  // b simply overwrites us without priority
    	      var attributes = Object.keys(b).reduce(function (attributes, key) {
    	        if (a[key] === undefined) attributes[key] = b[key];  // null is a valid value
    	        return attributes;
    	      }, {});
    	      return Object.keys(attributes).length > 0 ? attributes : undefined;
    	    }
    	  },

    	  iterator: function (ops) {
    	    return new Iterator(ops);
    	  },

    	  length: function (op) {
    	    if (typeof op['delete'] === 'number') {
    	      return op['delete'];
    	    } else if (typeof op.retain === 'number') {
    	      return op.retain;
    	    } else {
    	      return typeof op.insert === 'string' ? op.insert.length : 1;
    	    }
    	  }
    	};


    	function Iterator(ops) {
    	  this.ops = ops;
    	  this.index = 0;
    	  this.offset = 0;
    	}
    	Iterator.prototype.hasNext = function () {
    	  return this.peekLength() < Infinity;
    	};

    	Iterator.prototype.next = function (length) {
    	  if (!length) length = Infinity;
    	  var nextOp = this.ops[this.index];
    	  if (nextOp) {
    	    var offset = this.offset;
    	    var opLength = lib.length(nextOp);
    	    if (length >= opLength - offset) {
    	      length = opLength - offset;
    	      this.index += 1;
    	      this.offset = 0;
    	    } else {
    	      this.offset += length;
    	    }
    	    if (typeof nextOp['delete'] === 'number') {
    	      return { 'delete': length };
    	    } else {
    	      var retOp = {};
    	      if (nextOp.attributes) {
    	        retOp.attributes = nextOp.attributes;
    	      }
    	      if (typeof nextOp.retain === 'number') {
    	        retOp.retain = length;
    	      } else if (typeof nextOp.insert === 'string') {
    	        retOp.insert = nextOp.insert.substr(offset, length);
    	      } else {
    	        // offset should === 0, length should === 1
    	        retOp.insert = nextOp.insert;
    	      }
    	      return retOp;
    	    }
    	  } else {
    	    return { retain: Infinity };
    	  }
    	};

    	Iterator.prototype.peek = function () {
    	  return this.ops[this.index];
    	};

    	Iterator.prototype.peekLength = function () {
    	  if (this.ops[this.index]) {
    	    // Should never return 0 if our index is being managed correctly
    	    return lib.length(this.ops[this.index]) - this.offset;
    	  } else {
    	    return Infinity;
    	  }
    	};

    	Iterator.prototype.peekType = function () {
    	  if (this.ops[this.index]) {
    	    if (typeof this.ops[this.index]['delete'] === 'number') {
    	      return 'delete';
    	    } else if (typeof this.ops[this.index].retain === 'number') {
    	      return 'retain';
    	    } else {
    	      return 'insert';
    	    }
    	  }
    	  return 'retain';
    	};

    	Iterator.prototype.rest = function () {
    	  if (!this.hasNext()) {
    	    return [];
    	  } else if (this.offset === 0) {
    	    return this.ops.slice(this.index);
    	  } else {
    	    var offset = this.offset;
    	    var index = this.index;
    	    var next = this.next();
    	    var rest = this.ops.slice(this.index);
    	    this.offset = offset;
    	    this.index = index;
    	    return [next].concat(rest);
    	  }
    	};


    	module.exports = lib;


    	/***/ }),
    	/* 21 */
    	/***/ (function(module, exports) {

    	var clone = (function() {

    	function _instanceof(obj, type) {
    	  return type != null && obj instanceof type;
    	}

    	var nativeMap;
    	try {
    	  nativeMap = Map;
    	} catch(_) {
    	  // maybe a reference error because no `Map`. Give it a dummy value that no
    	  // value will ever be an instanceof.
    	  nativeMap = function() {};
    	}

    	var nativeSet;
    	try {
    	  nativeSet = Set;
    	} catch(_) {
    	  nativeSet = function() {};
    	}

    	var nativePromise;
    	try {
    	  nativePromise = Promise;
    	} catch(_) {
    	  nativePromise = function() {};
    	}

    	/**
    	 * Clones (copies) an Object using deep copying.
    	 *
    	 * This function supports circular references by default, but if you are certain
    	 * there are no circular references in your object, you can save some CPU time
    	 * by calling clone(obj, false).
    	 *
    	 * Caution: if `circular` is false and `parent` contains circular references,
    	 * your program may enter an infinite loop and crash.
    	 *
    	 * @param `parent` - the object to be cloned
    	 * @param `circular` - set to true if the object to be cloned may contain
    	 *    circular references. (optional - true by default)
    	 * @param `depth` - set to a number if the object is only to be cloned to
    	 *    a particular depth. (optional - defaults to Infinity)
    	 * @param `prototype` - sets the prototype to be used when cloning an object.
    	 *    (optional - defaults to parent prototype).
    	 * @param `includeNonEnumerable` - set to true if the non-enumerable properties
    	 *    should be cloned as well. Non-enumerable properties on the prototype
    	 *    chain will be ignored. (optional - false by default)
    	*/
    	function clone(parent, circular, depth, prototype, includeNonEnumerable) {
    	  if (typeof circular === 'object') {
    	    depth = circular.depth;
    	    prototype = circular.prototype;
    	    includeNonEnumerable = circular.includeNonEnumerable;
    	    circular = circular.circular;
    	  }
    	  // maintain two arrays for circular references, where corresponding parents
    	  // and children have the same index
    	  var allParents = [];
    	  var allChildren = [];

    	  var useBuffer = typeof Buffer != 'undefined';

    	  if (typeof circular == 'undefined')
    	    circular = true;

    	  if (typeof depth == 'undefined')
    	    depth = Infinity;

    	  // recurse this function so we don't reset allParents and allChildren
    	  function _clone(parent, depth) {
    	    // cloning null always returns null
    	    if (parent === null)
    	      return null;

    	    if (depth === 0)
    	      return parent;

    	    var child;
    	    var proto;
    	    if (typeof parent != 'object') {
    	      return parent;
    	    }

    	    if (_instanceof(parent, nativeMap)) {
    	      child = new nativeMap();
    	    } else if (_instanceof(parent, nativeSet)) {
    	      child = new nativeSet();
    	    } else if (_instanceof(parent, nativePromise)) {
    	      child = new nativePromise(function (resolve, reject) {
    	        parent.then(function(value) {
    	          resolve(_clone(value, depth - 1));
    	        }, function(err) {
    	          reject(_clone(err, depth - 1));
    	        });
    	      });
    	    } else if (clone.__isArray(parent)) {
    	      child = [];
    	    } else if (clone.__isRegExp(parent)) {
    	      child = new RegExp(parent.source, __getRegExpFlags(parent));
    	      if (parent.lastIndex) child.lastIndex = parent.lastIndex;
    	    } else if (clone.__isDate(parent)) {
    	      child = new Date(parent.getTime());
    	    } else if (useBuffer && Buffer.isBuffer(parent)) {
    	      if (Buffer.allocUnsafe) {
    	        // Node.js >= 4.5.0
    	        child = Buffer.allocUnsafe(parent.length);
    	      } else {
    	        // Older Node.js versions
    	        child = new Buffer(parent.length);
    	      }
    	      parent.copy(child);
    	      return child;
    	    } else if (_instanceof(parent, Error)) {
    	      child = Object.create(parent);
    	    } else {
    	      if (typeof prototype == 'undefined') {
    	        proto = Object.getPrototypeOf(parent);
    	        child = Object.create(proto);
    	      }
    	      else {
    	        child = Object.create(prototype);
    	        proto = prototype;
    	      }
    	    }

    	    if (circular) {
    	      var index = allParents.indexOf(parent);

    	      if (index != -1) {
    	        return allChildren[index];
    	      }
    	      allParents.push(parent);
    	      allChildren.push(child);
    	    }

    	    if (_instanceof(parent, nativeMap)) {
    	      parent.forEach(function(value, key) {
    	        var keyChild = _clone(key, depth - 1);
    	        var valueChild = _clone(value, depth - 1);
    	        child.set(keyChild, valueChild);
    	      });
    	    }
    	    if (_instanceof(parent, nativeSet)) {
    	      parent.forEach(function(value) {
    	        var entryChild = _clone(value, depth - 1);
    	        child.add(entryChild);
    	      });
    	    }

    	    for (var i in parent) {
    	      var attrs;
    	      if (proto) {
    	        attrs = Object.getOwnPropertyDescriptor(proto, i);
    	      }

    	      if (attrs && attrs.set == null) {
    	        continue;
    	      }
    	      child[i] = _clone(parent[i], depth - 1);
    	    }

    	    if (Object.getOwnPropertySymbols) {
    	      var symbols = Object.getOwnPropertySymbols(parent);
    	      for (var i = 0; i < symbols.length; i++) {
    	        // Don't need to worry about cloning a symbol because it is a primitive,
    	        // like a number or string.
    	        var symbol = symbols[i];
    	        var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);
    	        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
    	          continue;
    	        }
    	        child[symbol] = _clone(parent[symbol], depth - 1);
    	        if (!descriptor.enumerable) {
    	          Object.defineProperty(child, symbol, {
    	            enumerable: false
    	          });
    	        }
    	      }
    	    }

    	    if (includeNonEnumerable) {
    	      var allPropertyNames = Object.getOwnPropertyNames(parent);
    	      for (var i = 0; i < allPropertyNames.length; i++) {
    	        var propertyName = allPropertyNames[i];
    	        var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);
    	        if (descriptor && descriptor.enumerable) {
    	          continue;
    	        }
    	        child[propertyName] = _clone(parent[propertyName], depth - 1);
    	        Object.defineProperty(child, propertyName, {
    	          enumerable: false
    	        });
    	      }
    	    }

    	    return child;
    	  }

    	  return _clone(parent, depth);
    	}

    	/**
    	 * Simple flat clone using prototype, accepts only objects, usefull for property
    	 * override on FLAT configuration object (no nested props).
    	 *
    	 * USE WITH CAUTION! This may not behave as you wish if you do not know how this
    	 * works.
    	 */
    	clone.clonePrototype = function clonePrototype(parent) {
    	  if (parent === null)
    	    return null;

    	  var c = function () {};
    	  c.prototype = parent;
    	  return new c();
    	};

    	// private utility functions

    	function __objToStr(o) {
    	  return Object.prototype.toString.call(o);
    	}
    	clone.__objToStr = __objToStr;

    	function __isDate(o) {
    	  return typeof o === 'object' && __objToStr(o) === '[object Date]';
    	}
    	clone.__isDate = __isDate;

    	function __isArray(o) {
    	  return typeof o === 'object' && __objToStr(o) === '[object Array]';
    	}
    	clone.__isArray = __isArray;

    	function __isRegExp(o) {
    	  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
    	}
    	clone.__isRegExp = __isRegExp;

    	function __getRegExpFlags(re) {
    	  var flags = '';
    	  if (re.global) flags += 'g';
    	  if (re.ignoreCase) flags += 'i';
    	  if (re.multiline) flags += 'm';
    	  return flags;
    	}
    	clone.__getRegExpFlags = __getRegExpFlags;

    	return clone;
    	})();

    	if (typeof module === 'object' && module.exports) {
    	  module.exports = clone;
    	}


    	/***/ }),
    	/* 22 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _emitter = __webpack_require__(8);

    	var _emitter2 = _interopRequireDefault(_emitter);

    	var _block = __webpack_require__(4);

    	var _block2 = _interopRequireDefault(_block);

    	var _break = __webpack_require__(16);

    	var _break2 = _interopRequireDefault(_break);

    	var _code = __webpack_require__(13);

    	var _code2 = _interopRequireDefault(_code);

    	var _container = __webpack_require__(25);

    	var _container2 = _interopRequireDefault(_container);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	function isLine(blot) {
    	  return blot instanceof _block2.default || blot instanceof _block.BlockEmbed;
    	}

    	var Scroll = function (_Parchment$Scroll) {
    	  _inherits(Scroll, _Parchment$Scroll);

    	  function Scroll(domNode, config) {
    	    _classCallCheck(this, Scroll);

    	    var _this = _possibleConstructorReturn(this, (Scroll.__proto__ || Object.getPrototypeOf(Scroll)).call(this, domNode));

    	    _this.emitter = config.emitter;
    	    if (Array.isArray(config.whitelist)) {
    	      _this.whitelist = config.whitelist.reduce(function (whitelist, format) {
    	        whitelist[format] = true;
    	        return whitelist;
    	      }, {});
    	    }
    	    // Some reason fixes composition issues with character languages in Windows/Chrome, Safari
    	    _this.domNode.addEventListener('DOMNodeInserted', function () {});
    	    _this.optimize();
    	    _this.enable();
    	    return _this;
    	  }

    	  _createClass(Scroll, [{
    	    key: 'batchStart',
    	    value: function batchStart() {
    	      this.batch = true;
    	    }
    	  }, {
    	    key: 'batchEnd',
    	    value: function batchEnd() {
    	      this.batch = false;
    	      this.optimize();
    	    }
    	  }, {
    	    key: 'deleteAt',
    	    value: function deleteAt(index, length) {
    	      var _line = this.line(index),
    	          _line2 = _slicedToArray(_line, 2),
    	          first = _line2[0],
    	          offset = _line2[1];

    	      var _line3 = this.line(index + length),
    	          _line4 = _slicedToArray(_line3, 1),
    	          last = _line4[0];

    	      _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'deleteAt', this).call(this, index, length);
    	      if (last != null && first !== last && offset > 0) {
    	        if (first instanceof _block.BlockEmbed || last instanceof _block.BlockEmbed) {
    	          this.optimize();
    	          return;
    	        }
    	        if (first instanceof _code2.default) {
    	          var newlineIndex = first.newlineIndex(first.length(), true);
    	          if (newlineIndex > -1) {
    	            first = first.split(newlineIndex + 1);
    	            if (first === last) {
    	              this.optimize();
    	              return;
    	            }
    	          }
    	        } else if (last instanceof _code2.default) {
    	          var _newlineIndex = last.newlineIndex(0);
    	          if (_newlineIndex > -1) {
    	            last.split(_newlineIndex + 1);
    	          }
    	        }
    	        var ref = last.children.head instanceof _break2.default ? null : last.children.head;
    	        first.moveChildren(last, ref);
    	        first.remove();
    	      }
    	      this.optimize();
    	    }
    	  }, {
    	    key: 'enable',
    	    value: function enable() {
    	      var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

    	      this.domNode.setAttribute('contenteditable', enabled);
    	    }
    	  }, {
    	    key: 'formatAt',
    	    value: function formatAt(index, length, format, value) {
    	      if (this.whitelist != null && !this.whitelist[format]) return;
    	      _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'formatAt', this).call(this, index, length, format, value);
    	      this.optimize();
    	    }
    	  }, {
    	    key: 'insertAt',
    	    value: function insertAt(index, value, def) {
    	      if (def != null && this.whitelist != null && !this.whitelist[value]) return;
    	      if (index >= this.length()) {
    	        if (def == null || _parchment2.default.query(value, _parchment2.default.Scope.BLOCK) == null) {
    	          var blot = _parchment2.default.create(this.statics.defaultChild);
    	          this.appendChild(blot);
    	          if (def == null && value.endsWith('\n')) {
    	            value = value.slice(0, -1);
    	          }
    	          blot.insertAt(0, value, def);
    	        } else {
    	          var embed = _parchment2.default.create(value, def);
    	          this.appendChild(embed);
    	        }
    	      } else {
    	        _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'insertAt', this).call(this, index, value, def);
    	      }
    	      this.optimize();
    	    }
    	  }, {
    	    key: 'insertBefore',
    	    value: function insertBefore(blot, ref) {
    	      if (blot.statics.scope === _parchment2.default.Scope.INLINE_BLOT) {
    	        var wrapper = _parchment2.default.create(this.statics.defaultChild);
    	        wrapper.appendChild(blot);
    	        blot = wrapper;
    	      }
    	      _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'insertBefore', this).call(this, blot, ref);
    	    }
    	  }, {
    	    key: 'leaf',
    	    value: function leaf(index) {
    	      return this.path(index).pop() || [null, -1];
    	    }
    	  }, {
    	    key: 'line',
    	    value: function line(index) {
    	      if (index === this.length()) {
    	        return this.line(index - 1);
    	      }
    	      return this.descendant(isLine, index);
    	    }
    	  }, {
    	    key: 'lines',
    	    value: function lines() {
    	      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    	      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;

    	      var getLines = function getLines(blot, index, length) {
    	        var lines = [],
    	            lengthLeft = length;
    	        blot.children.forEachAt(index, length, function (child, index, length) {
    	          if (isLine(child)) {
    	            lines.push(child);
    	          } else if (child instanceof _parchment2.default.Container) {
    	            lines = lines.concat(getLines(child, index, lengthLeft));
    	          }
    	          lengthLeft -= length;
    	        });
    	        return lines;
    	      };
    	      return getLines(this, index, length);
    	    }
    	  }, {
    	    key: 'optimize',
    	    value: function optimize() {
    	      var mutations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    	      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    	      if (this.batch === true) return;
    	      _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'optimize', this).call(this, mutations, context);
    	      if (mutations.length > 0) {
    	        this.emitter.emit(_emitter2.default.events.SCROLL_OPTIMIZE, mutations, context);
    	      }
    	    }
    	  }, {
    	    key: 'path',
    	    value: function path(index) {
    	      return _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'path', this).call(this, index).slice(1); // Exclude self
    	    }
    	  }, {
    	    key: 'update',
    	    value: function update(mutations) {
    	      if (this.batch === true) return;
    	      var source = _emitter2.default.sources.USER;
    	      if (typeof mutations === 'string') {
    	        source = mutations;
    	      }
    	      if (!Array.isArray(mutations)) {
    	        mutations = this.observer.takeRecords();
    	      }
    	      if (mutations.length > 0) {
    	        this.emitter.emit(_emitter2.default.events.SCROLL_BEFORE_UPDATE, source, mutations);
    	      }
    	      _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'update', this).call(this, mutations.concat([])); // pass copy
    	      if (mutations.length > 0) {
    	        this.emitter.emit(_emitter2.default.events.SCROLL_UPDATE, source, mutations);
    	      }
    	    }
    	  }]);

    	  return Scroll;
    	}(_parchment2.default.Scroll);

    	Scroll.blotName = 'scroll';
    	Scroll.className = 'ql-editor';
    	Scroll.tagName = 'DIV';
    	Scroll.defaultChild = 'block';
    	Scroll.allowedChildren = [_block2.default, _block.BlockEmbed, _container2.default];

    	exports.default = Scroll;

    	/***/ }),
    	/* 23 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.SHORTKEY = exports.default = undefined;

    	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

    	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _clone = __webpack_require__(21);

    	var _clone2 = _interopRequireDefault(_clone);

    	var _deepEqual = __webpack_require__(11);

    	var _deepEqual2 = _interopRequireDefault(_deepEqual);

    	var _extend = __webpack_require__(3);

    	var _extend2 = _interopRequireDefault(_extend);

    	var _quillDelta = __webpack_require__(2);

    	var _quillDelta2 = _interopRequireDefault(_quillDelta);

    	var _op = __webpack_require__(20);

    	var _op2 = _interopRequireDefault(_op);

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _quill = __webpack_require__(5);

    	var _quill2 = _interopRequireDefault(_quill);

    	var _logger = __webpack_require__(10);

    	var _logger2 = _interopRequireDefault(_logger);

    	var _module = __webpack_require__(9);

    	var _module2 = _interopRequireDefault(_module);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var debug = (0, _logger2.default)('quill:keyboard');

    	var SHORTKEY = /Mac/i.test(navigator.platform) ? 'metaKey' : 'ctrlKey';

    	var Keyboard = function (_Module) {
    	  _inherits(Keyboard, _Module);

    	  _createClass(Keyboard, null, [{
    	    key: 'match',
    	    value: function match(evt, binding) {
    	      binding = normalize(binding);
    	      if (['altKey', 'ctrlKey', 'metaKey', 'shiftKey'].some(function (key) {
    	        return !!binding[key] !== evt[key] && binding[key] !== null;
    	      })) {
    	        return false;
    	      }
    	      return binding.key === (evt.which || evt.keyCode);
    	    }
    	  }]);

    	  function Keyboard(quill, options) {
    	    _classCallCheck(this, Keyboard);

    	    var _this = _possibleConstructorReturn(this, (Keyboard.__proto__ || Object.getPrototypeOf(Keyboard)).call(this, quill, options));

    	    _this.bindings = {};
    	    Object.keys(_this.options.bindings).forEach(function (name) {
    	      if (name === 'list autofill' && quill.scroll.whitelist != null && !quill.scroll.whitelist['list']) {
    	        return;
    	      }
    	      if (_this.options.bindings[name]) {
    	        _this.addBinding(_this.options.bindings[name]);
    	      }
    	    });
    	    _this.addBinding({ key: Keyboard.keys.ENTER, shiftKey: null }, handleEnter);
    	    _this.addBinding({ key: Keyboard.keys.ENTER, metaKey: null, ctrlKey: null, altKey: null }, function () {});
    	    if (/Firefox/i.test(navigator.userAgent)) {
    	      // Need to handle delete and backspace for Firefox in the general case #1171
    	      _this.addBinding({ key: Keyboard.keys.BACKSPACE }, { collapsed: true }, handleBackspace);
    	      _this.addBinding({ key: Keyboard.keys.DELETE }, { collapsed: true }, handleDelete);
    	    } else {
    	      _this.addBinding({ key: Keyboard.keys.BACKSPACE }, { collapsed: true, prefix: /^.?$/ }, handleBackspace);
    	      _this.addBinding({ key: Keyboard.keys.DELETE }, { collapsed: true, suffix: /^.?$/ }, handleDelete);
    	    }
    	    _this.addBinding({ key: Keyboard.keys.BACKSPACE }, { collapsed: false }, handleDeleteRange);
    	    _this.addBinding({ key: Keyboard.keys.DELETE }, { collapsed: false }, handleDeleteRange);
    	    _this.addBinding({ key: Keyboard.keys.BACKSPACE, altKey: null, ctrlKey: null, metaKey: null, shiftKey: null }, { collapsed: true, offset: 0 }, handleBackspace);
    	    _this.listen();
    	    return _this;
    	  }

    	  _createClass(Keyboard, [{
    	    key: 'addBinding',
    	    value: function addBinding(key) {
    	      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    	      var handler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    	      var binding = normalize(key);
    	      if (binding == null || binding.key == null) {
    	        return debug.warn('Attempted to add invalid keyboard binding', binding);
    	      }
    	      if (typeof context === 'function') {
    	        context = { handler: context };
    	      }
    	      if (typeof handler === 'function') {
    	        handler = { handler: handler };
    	      }
    	      binding = (0, _extend2.default)(binding, context, handler);
    	      this.bindings[binding.key] = this.bindings[binding.key] || [];
    	      this.bindings[binding.key].push(binding);
    	    }
    	  }, {
    	    key: 'listen',
    	    value: function listen() {
    	      var _this2 = this;

    	      this.quill.root.addEventListener('keydown', function (evt) {
    	        if (evt.defaultPrevented) return;
    	        var which = evt.which || evt.keyCode;
    	        var bindings = (_this2.bindings[which] || []).filter(function (binding) {
    	          return Keyboard.match(evt, binding);
    	        });
    	        if (bindings.length === 0) return;
    	        var range = _this2.quill.getSelection();
    	        if (range == null || !_this2.quill.hasFocus()) return;

    	        var _quill$getLine = _this2.quill.getLine(range.index),
    	            _quill$getLine2 = _slicedToArray(_quill$getLine, 2),
    	            line = _quill$getLine2[0],
    	            offset = _quill$getLine2[1];

    	        var _quill$getLeaf = _this2.quill.getLeaf(range.index),
    	            _quill$getLeaf2 = _slicedToArray(_quill$getLeaf, 2),
    	            leafStart = _quill$getLeaf2[0],
    	            offsetStart = _quill$getLeaf2[1];

    	        var _ref = range.length === 0 ? [leafStart, offsetStart] : _this2.quill.getLeaf(range.index + range.length),
    	            _ref2 = _slicedToArray(_ref, 2),
    	            leafEnd = _ref2[0],
    	            offsetEnd = _ref2[1];

    	        var prefixText = leafStart instanceof _parchment2.default.Text ? leafStart.value().slice(0, offsetStart) : '';
    	        var suffixText = leafEnd instanceof _parchment2.default.Text ? leafEnd.value().slice(offsetEnd) : '';
    	        var curContext = {
    	          collapsed: range.length === 0,
    	          empty: range.length === 0 && line.length() <= 1,
    	          format: _this2.quill.getFormat(range),
    	          offset: offset,
    	          prefix: prefixText,
    	          suffix: suffixText
    	        };
    	        var prevented = bindings.some(function (binding) {
    	          if (binding.collapsed != null && binding.collapsed !== curContext.collapsed) return false;
    	          if (binding.empty != null && binding.empty !== curContext.empty) return false;
    	          if (binding.offset != null && binding.offset !== curContext.offset) return false;
    	          if (Array.isArray(binding.format)) {
    	            // any format is present
    	            if (binding.format.every(function (name) {
    	              return curContext.format[name] == null;
    	            })) {
    	              return false;
    	            }
    	          } else if (_typeof(binding.format) === 'object') {
    	            // all formats must match
    	            if (!Object.keys(binding.format).every(function (name) {
    	              if (binding.format[name] === true) return curContext.format[name] != null;
    	              if (binding.format[name] === false) return curContext.format[name] == null;
    	              return (0, _deepEqual2.default)(binding.format[name], curContext.format[name]);
    	            })) {
    	              return false;
    	            }
    	          }
    	          if (binding.prefix != null && !binding.prefix.test(curContext.prefix)) return false;
    	          if (binding.suffix != null && !binding.suffix.test(curContext.suffix)) return false;
    	          return binding.handler.call(_this2, range, curContext) !== true;
    	        });
    	        if (prevented) {
    	          evt.preventDefault();
    	        }
    	      });
    	    }
    	  }]);

    	  return Keyboard;
    	}(_module2.default);

    	Keyboard.keys = {
    	  BACKSPACE: 8,
    	  TAB: 9,
    	  ENTER: 13,
    	  ESCAPE: 27,
    	  LEFT: 37,
    	  UP: 38,
    	  RIGHT: 39,
    	  DOWN: 40,
    	  DELETE: 46
    	};

    	Keyboard.DEFAULTS = {
    	  bindings: {
    	    'bold': makeFormatHandler('bold'),
    	    'italic': makeFormatHandler('italic'),
    	    'underline': makeFormatHandler('underline'),
    	    'indent': {
    	      // highlight tab or tab at beginning of list, indent or blockquote
    	      key: Keyboard.keys.TAB,
    	      format: ['blockquote', 'indent', 'list'],
    	      handler: function handler(range, context) {
    	        if (context.collapsed && context.offset !== 0) return true;
    	        this.quill.format('indent', '+1', _quill2.default.sources.USER);
    	      }
    	    },
    	    'outdent': {
    	      key: Keyboard.keys.TAB,
    	      shiftKey: true,
    	      format: ['blockquote', 'indent', 'list'],
    	      // highlight tab or tab at beginning of list, indent or blockquote
    	      handler: function handler(range, context) {
    	        if (context.collapsed && context.offset !== 0) return true;
    	        this.quill.format('indent', '-1', _quill2.default.sources.USER);
    	      }
    	    },
    	    'outdent backspace': {
    	      key: Keyboard.keys.BACKSPACE,
    	      collapsed: true,
    	      shiftKey: null,
    	      metaKey: null,
    	      ctrlKey: null,
    	      altKey: null,
    	      format: ['indent', 'list'],
    	      offset: 0,
    	      handler: function handler(range, context) {
    	        if (context.format.indent != null) {
    	          this.quill.format('indent', '-1', _quill2.default.sources.USER);
    	        } else if (context.format.list != null) {
    	          this.quill.format('list', false, _quill2.default.sources.USER);
    	        }
    	      }
    	    },
    	    'indent code-block': makeCodeBlockHandler(true),
    	    'outdent code-block': makeCodeBlockHandler(false),
    	    'remove tab': {
    	      key: Keyboard.keys.TAB,
    	      shiftKey: true,
    	      collapsed: true,
    	      prefix: /\t$/,
    	      handler: function handler(range) {
    	        this.quill.deleteText(range.index - 1, 1, _quill2.default.sources.USER);
    	      }
    	    },
    	    'tab': {
    	      key: Keyboard.keys.TAB,
    	      handler: function handler(range) {
    	        this.quill.history.cutoff();
    	        var delta = new _quillDelta2.default().retain(range.index).delete(range.length).insert('\t');
    	        this.quill.updateContents(delta, _quill2.default.sources.USER);
    	        this.quill.history.cutoff();
    	        this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
    	      }
    	    },
    	    'list empty enter': {
    	      key: Keyboard.keys.ENTER,
    	      collapsed: true,
    	      format: ['list'],
    	      empty: true,
    	      handler: function handler(range, context) {
    	        this.quill.format('list', false, _quill2.default.sources.USER);
    	        if (context.format.indent) {
    	          this.quill.format('indent', false, _quill2.default.sources.USER);
    	        }
    	      }
    	    },
    	    'checklist enter': {
    	      key: Keyboard.keys.ENTER,
    	      collapsed: true,
    	      format: { list: 'checked' },
    	      handler: function handler(range) {
    	        var _quill$getLine3 = this.quill.getLine(range.index),
    	            _quill$getLine4 = _slicedToArray(_quill$getLine3, 2),
    	            line = _quill$getLine4[0],
    	            offset = _quill$getLine4[1];

    	        var formats = (0, _extend2.default)({}, line.formats(), { list: 'checked' });
    	        var delta = new _quillDelta2.default().retain(range.index).insert('\n', formats).retain(line.length() - offset - 1).retain(1, { list: 'unchecked' });
    	        this.quill.updateContents(delta, _quill2.default.sources.USER);
    	        this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
    	        this.quill.scrollIntoView();
    	      }
    	    },
    	    'header enter': {
    	      key: Keyboard.keys.ENTER,
    	      collapsed: true,
    	      format: ['header'],
    	      suffix: /^$/,
    	      handler: function handler(range, context) {
    	        var _quill$getLine5 = this.quill.getLine(range.index),
    	            _quill$getLine6 = _slicedToArray(_quill$getLine5, 2),
    	            line = _quill$getLine6[0],
    	            offset = _quill$getLine6[1];

    	        var delta = new _quillDelta2.default().retain(range.index).insert('\n', context.format).retain(line.length() - offset - 1).retain(1, { header: null });
    	        this.quill.updateContents(delta, _quill2.default.sources.USER);
    	        this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
    	        this.quill.scrollIntoView();
    	      }
    	    },
    	    'list autofill': {
    	      key: ' ',
    	      collapsed: true,
    	      format: { list: false },
    	      prefix: /^\s*?(\d+\.|-|\*|\[ ?\]|\[x\])$/,
    	      handler: function handler(range, context) {
    	        var length = context.prefix.length;

    	        var _quill$getLine7 = this.quill.getLine(range.index),
    	            _quill$getLine8 = _slicedToArray(_quill$getLine7, 2),
    	            line = _quill$getLine8[0],
    	            offset = _quill$getLine8[1];

    	        if (offset > length) return true;
    	        var value = void 0;
    	        switch (context.prefix.trim()) {
    	          case '[]':case '[ ]':
    	            value = 'unchecked';
    	            break;
    	          case '[x]':
    	            value = 'checked';
    	            break;
    	          case '-':case '*':
    	            value = 'bullet';
    	            break;
    	          default:
    	            value = 'ordered';
    	        }
    	        this.quill.insertText(range.index, ' ', _quill2.default.sources.USER);
    	        this.quill.history.cutoff();
    	        var delta = new _quillDelta2.default().retain(range.index - offset).delete(length + 1).retain(line.length() - 2 - offset).retain(1, { list: value });
    	        this.quill.updateContents(delta, _quill2.default.sources.USER);
    	        this.quill.history.cutoff();
    	        this.quill.setSelection(range.index - length, _quill2.default.sources.SILENT);
    	      }
    	    },
    	    'code exit': {
    	      key: Keyboard.keys.ENTER,
    	      collapsed: true,
    	      format: ['code-block'],
    	      prefix: /\n\n$/,
    	      suffix: /^\s+$/,
    	      handler: function handler(range) {
    	        var _quill$getLine9 = this.quill.getLine(range.index),
    	            _quill$getLine10 = _slicedToArray(_quill$getLine9, 2),
    	            line = _quill$getLine10[0],
    	            offset = _quill$getLine10[1];

    	        var delta = new _quillDelta2.default().retain(range.index + line.length() - offset - 2).retain(1, { 'code-block': null }).delete(1);
    	        this.quill.updateContents(delta, _quill2.default.sources.USER);
    	      }
    	    },
    	    'embed left': makeEmbedArrowHandler(Keyboard.keys.LEFT, false),
    	    'embed left shift': makeEmbedArrowHandler(Keyboard.keys.LEFT, true),
    	    'embed right': makeEmbedArrowHandler(Keyboard.keys.RIGHT, false),
    	    'embed right shift': makeEmbedArrowHandler(Keyboard.keys.RIGHT, true)
    	  }
    	};

    	function makeEmbedArrowHandler(key, shiftKey) {
    	  var _ref3;

    	  var where = key === Keyboard.keys.LEFT ? 'prefix' : 'suffix';
    	  return _ref3 = {
    	    key: key,
    	    shiftKey: shiftKey,
    	    altKey: null
    	  }, _defineProperty(_ref3, where, /^$/), _defineProperty(_ref3, 'handler', function handler(range) {
    	    var index = range.index;
    	    if (key === Keyboard.keys.RIGHT) {
    	      index += range.length + 1;
    	    }

    	    var _quill$getLeaf3 = this.quill.getLeaf(index),
    	        _quill$getLeaf4 = _slicedToArray(_quill$getLeaf3, 1),
    	        leaf = _quill$getLeaf4[0];

    	    if (!(leaf instanceof _parchment2.default.Embed)) return true;
    	    if (key === Keyboard.keys.LEFT) {
    	      if (shiftKey) {
    	        this.quill.setSelection(range.index - 1, range.length + 1, _quill2.default.sources.USER);
    	      } else {
    	        this.quill.setSelection(range.index - 1, _quill2.default.sources.USER);
    	      }
    	    } else {
    	      if (shiftKey) {
    	        this.quill.setSelection(range.index, range.length + 1, _quill2.default.sources.USER);
    	      } else {
    	        this.quill.setSelection(range.index + range.length + 1, _quill2.default.sources.USER);
    	      }
    	    }
    	    return false;
    	  }), _ref3;
    	}

    	function handleBackspace(range, context) {
    	  if (range.index === 0 || this.quill.getLength() <= 1) return;

    	  var _quill$getLine11 = this.quill.getLine(range.index),
    	      _quill$getLine12 = _slicedToArray(_quill$getLine11, 1),
    	      line = _quill$getLine12[0];

    	  var formats = {};
    	  if (context.offset === 0) {
    	    var _quill$getLine13 = this.quill.getLine(range.index - 1),
    	        _quill$getLine14 = _slicedToArray(_quill$getLine13, 1),
    	        prev = _quill$getLine14[0];

    	    if (prev != null && prev.length() > 1) {
    	      var curFormats = line.formats();
    	      var prevFormats = this.quill.getFormat(range.index - 1, 1);
    	      formats = _op2.default.attributes.diff(curFormats, prevFormats) || {};
    	    }
    	  }
    	  // Check for astral symbols
    	  var length = /[\uD800-\uDBFF][\uDC00-\uDFFF]$/.test(context.prefix) ? 2 : 1;
    	  this.quill.deleteText(range.index - length, length, _quill2.default.sources.USER);
    	  if (Object.keys(formats).length > 0) {
    	    this.quill.formatLine(range.index - length, length, formats, _quill2.default.sources.USER);
    	  }
    	  this.quill.focus();
    	}

    	function handleDelete(range, context) {
    	  // Check for astral symbols
    	  var length = /^[\uD800-\uDBFF][\uDC00-\uDFFF]/.test(context.suffix) ? 2 : 1;
    	  if (range.index >= this.quill.getLength() - length) return;
    	  var formats = {},
    	      nextLength = 0;

    	  var _quill$getLine15 = this.quill.getLine(range.index),
    	      _quill$getLine16 = _slicedToArray(_quill$getLine15, 1),
    	      line = _quill$getLine16[0];

    	  if (context.offset >= line.length() - 1) {
    	    var _quill$getLine17 = this.quill.getLine(range.index + 1),
    	        _quill$getLine18 = _slicedToArray(_quill$getLine17, 1),
    	        next = _quill$getLine18[0];

    	    if (next) {
    	      var curFormats = line.formats();
    	      var nextFormats = this.quill.getFormat(range.index, 1);
    	      formats = _op2.default.attributes.diff(curFormats, nextFormats) || {};
    	      nextLength = next.length();
    	    }
    	  }
    	  this.quill.deleteText(range.index, length, _quill2.default.sources.USER);
    	  if (Object.keys(formats).length > 0) {
    	    this.quill.formatLine(range.index + nextLength - 1, length, formats, _quill2.default.sources.USER);
    	  }
    	}

    	function handleDeleteRange(range) {
    	  var lines = this.quill.getLines(range);
    	  var formats = {};
    	  if (lines.length > 1) {
    	    var firstFormats = lines[0].formats();
    	    var lastFormats = lines[lines.length - 1].formats();
    	    formats = _op2.default.attributes.diff(lastFormats, firstFormats) || {};
    	  }
    	  this.quill.deleteText(range, _quill2.default.sources.USER);
    	  if (Object.keys(formats).length > 0) {
    	    this.quill.formatLine(range.index, 1, formats, _quill2.default.sources.USER);
    	  }
    	  this.quill.setSelection(range.index, _quill2.default.sources.SILENT);
    	  this.quill.focus();
    	}

    	function handleEnter(range, context) {
    	  var _this3 = this;

    	  if (range.length > 0) {
    	    this.quill.scroll.deleteAt(range.index, range.length); // So we do not trigger text-change
    	  }
    	  var lineFormats = Object.keys(context.format).reduce(function (lineFormats, format) {
    	    if (_parchment2.default.query(format, _parchment2.default.Scope.BLOCK) && !Array.isArray(context.format[format])) {
    	      lineFormats[format] = context.format[format];
    	    }
    	    return lineFormats;
    	  }, {});
    	  this.quill.insertText(range.index, '\n', lineFormats, _quill2.default.sources.USER);
    	  // Earlier scroll.deleteAt might have messed up our selection,
    	  // so insertText's built in selection preservation is not reliable
    	  this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
    	  this.quill.focus();
    	  Object.keys(context.format).forEach(function (name) {
    	    if (lineFormats[name] != null) return;
    	    if (Array.isArray(context.format[name])) return;
    	    if (name === 'link') return;
    	    _this3.quill.format(name, context.format[name], _quill2.default.sources.USER);
    	  });
    	}

    	function makeCodeBlockHandler(indent) {
    	  return {
    	    key: Keyboard.keys.TAB,
    	    shiftKey: !indent,
    	    format: { 'code-block': true },
    	    handler: function handler(range) {
    	      var CodeBlock = _parchment2.default.query('code-block');
    	      var index = range.index,
    	          length = range.length;

    	      var _quill$scroll$descend = this.quill.scroll.descendant(CodeBlock, index),
    	          _quill$scroll$descend2 = _slicedToArray(_quill$scroll$descend, 2),
    	          block = _quill$scroll$descend2[0],
    	          offset = _quill$scroll$descend2[1];

    	      if (block == null) return;
    	      var scrollIndex = this.quill.getIndex(block);
    	      var start = block.newlineIndex(offset, true) + 1;
    	      var end = block.newlineIndex(scrollIndex + offset + length);
    	      var lines = block.domNode.textContent.slice(start, end).split('\n');
    	      offset = 0;
    	      lines.forEach(function (line, i) {
    	        if (indent) {
    	          block.insertAt(start + offset, CodeBlock.TAB);
    	          offset += CodeBlock.TAB.length;
    	          if (i === 0) {
    	            index += CodeBlock.TAB.length;
    	          } else {
    	            length += CodeBlock.TAB.length;
    	          }
    	        } else if (line.startsWith(CodeBlock.TAB)) {
    	          block.deleteAt(start + offset, CodeBlock.TAB.length);
    	          offset -= CodeBlock.TAB.length;
    	          if (i === 0) {
    	            index -= CodeBlock.TAB.length;
    	          } else {
    	            length -= CodeBlock.TAB.length;
    	          }
    	        }
    	        offset += line.length + 1;
    	      });
    	      this.quill.update(_quill2.default.sources.USER);
    	      this.quill.setSelection(index, length, _quill2.default.sources.SILENT);
    	    }
    	  };
    	}

    	function makeFormatHandler(format) {
    	  return {
    	    key: format[0].toUpperCase(),
    	    shortKey: true,
    	    handler: function handler(range, context) {
    	      this.quill.format(format, !context.format[format], _quill2.default.sources.USER);
    	    }
    	  };
    	}

    	function normalize(binding) {
    	  if (typeof binding === 'string' || typeof binding === 'number') {
    	    return normalize({ key: binding });
    	  }
    	  if ((typeof binding === 'undefined' ? 'undefined' : _typeof(binding)) === 'object') {
    	    binding = (0, _clone2.default)(binding, false);
    	  }
    	  if (typeof binding.key === 'string') {
    	    if (Keyboard.keys[binding.key.toUpperCase()] != null) {
    	      binding.key = Keyboard.keys[binding.key.toUpperCase()];
    	    } else if (binding.key.length === 1) {
    	      binding.key = binding.key.toUpperCase().charCodeAt(0);
    	    } else {
    	      return null;
    	    }
    	  }
    	  if (binding.shortKey) {
    	    binding[SHORTKEY] = binding.shortKey;
    	    delete binding.shortKey;
    	  }
    	  return binding;
    	}

    	exports.default = Keyboard;
    	exports.SHORTKEY = SHORTKEY;

    	/***/ }),
    	/* 24 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _text = __webpack_require__(7);

    	var _text2 = _interopRequireDefault(_text);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Cursor = function (_Parchment$Embed) {
    	  _inherits(Cursor, _Parchment$Embed);

    	  _createClass(Cursor, null, [{
    	    key: 'value',
    	    value: function value() {
    	      return undefined;
    	    }
    	  }]);

    	  function Cursor(domNode, selection) {
    	    _classCallCheck(this, Cursor);

    	    var _this = _possibleConstructorReturn(this, (Cursor.__proto__ || Object.getPrototypeOf(Cursor)).call(this, domNode));

    	    _this.selection = selection;
    	    _this.textNode = document.createTextNode(Cursor.CONTENTS);
    	    _this.domNode.appendChild(_this.textNode);
    	    _this._length = 0;
    	    return _this;
    	  }

    	  _createClass(Cursor, [{
    	    key: 'detach',
    	    value: function detach() {
    	      // super.detach() will also clear domNode.__blot
    	      if (this.parent != null) this.parent.removeChild(this);
    	    }
    	  }, {
    	    key: 'format',
    	    value: function format(name, value) {
    	      if (this._length !== 0) {
    	        return _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'format', this).call(this, name, value);
    	      }
    	      var target = this,
    	          index = 0;
    	      while (target != null && target.statics.scope !== _parchment2.default.Scope.BLOCK_BLOT) {
    	        index += target.offset(target.parent);
    	        target = target.parent;
    	      }
    	      if (target != null) {
    	        this._length = Cursor.CONTENTS.length;
    	        target.optimize();
    	        target.formatAt(index, Cursor.CONTENTS.length, name, value);
    	        this._length = 0;
    	      }
    	    }
    	  }, {
    	    key: 'index',
    	    value: function index(node, offset) {
    	      if (node === this.textNode) return 0;
    	      return _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'index', this).call(this, node, offset);
    	    }
    	  }, {
    	    key: 'length',
    	    value: function length() {
    	      return this._length;
    	    }
    	  }, {
    	    key: 'position',
    	    value: function position() {
    	      return [this.textNode, this.textNode.data.length];
    	    }
    	  }, {
    	    key: 'remove',
    	    value: function remove() {
    	      _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'remove', this).call(this);
    	      this.parent = null;
    	    }
    	  }, {
    	    key: 'restore',
    	    value: function restore() {
    	      if (this.selection.composing || this.parent == null) return;
    	      var textNode = this.textNode;
    	      var range = this.selection.getNativeRange();
    	      var restoreText = void 0,
    	          start = void 0,
    	          end = void 0;
    	      if (range != null && range.start.node === textNode && range.end.node === textNode) {
    	        var _ref = [textNode, range.start.offset, range.end.offset];
    	        restoreText = _ref[0];
    	        start = _ref[1];
    	        end = _ref[2];
    	      }
    	      // Link format will insert text outside of anchor tag
    	      while (this.domNode.lastChild != null && this.domNode.lastChild !== this.textNode) {
    	        this.domNode.parentNode.insertBefore(this.domNode.lastChild, this.domNode);
    	      }
    	      if (this.textNode.data !== Cursor.CONTENTS) {
    	        var text = this.textNode.data.split(Cursor.CONTENTS).join('');
    	        if (this.next instanceof _text2.default) {
    	          restoreText = this.next.domNode;
    	          this.next.insertAt(0, text);
    	          this.textNode.data = Cursor.CONTENTS;
    	        } else {
    	          this.textNode.data = text;
    	          this.parent.insertBefore(_parchment2.default.create(this.textNode), this);
    	          this.textNode = document.createTextNode(Cursor.CONTENTS);
    	          this.domNode.appendChild(this.textNode);
    	        }
    	      }
    	      this.remove();
    	      if (start != null) {
    	        var _map = [start, end].map(function (offset) {
    	          return Math.max(0, Math.min(restoreText.data.length, offset - 1));
    	        });

    	        var _map2 = _slicedToArray(_map, 2);

    	        start = _map2[0];
    	        end = _map2[1];

    	        return {
    	          startNode: restoreText,
    	          startOffset: start,
    	          endNode: restoreText,
    	          endOffset: end
    	        };
    	      }
    	    }
    	  }, {
    	    key: 'update',
    	    value: function update(mutations, context) {
    	      var _this2 = this;

    	      if (mutations.some(function (mutation) {
    	        return mutation.type === 'characterData' && mutation.target === _this2.textNode;
    	      })) {
    	        var range = this.restore();
    	        if (range) context.range = range;
    	      }
    	    }
    	  }, {
    	    key: 'value',
    	    value: function value() {
    	      return '';
    	    }
    	  }]);

    	  return Cursor;
    	}(_parchment2.default.Embed);

    	Cursor.blotName = 'cursor';
    	Cursor.className = 'ql-cursor';
    	Cursor.tagName = 'span';
    	Cursor.CONTENTS = '\uFEFF'; // Zero width no break space


    	exports.default = Cursor;

    	/***/ }),
    	/* 25 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _block = __webpack_require__(4);

    	var _block2 = _interopRequireDefault(_block);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Container = function (_Parchment$Container) {
    	  _inherits(Container, _Parchment$Container);

    	  function Container() {
    	    _classCallCheck(this, Container);

    	    return _possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).apply(this, arguments));
    	  }

    	  return Container;
    	}(_parchment2.default.Container);

    	Container.allowedChildren = [_block2.default, _block.BlockEmbed, Container];

    	exports.default = Container;

    	/***/ }),
    	/* 26 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.ColorStyle = exports.ColorClass = exports.ColorAttributor = undefined;

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var ColorAttributor = function (_Parchment$Attributor) {
    	  _inherits(ColorAttributor, _Parchment$Attributor);

    	  function ColorAttributor() {
    	    _classCallCheck(this, ColorAttributor);

    	    return _possibleConstructorReturn(this, (ColorAttributor.__proto__ || Object.getPrototypeOf(ColorAttributor)).apply(this, arguments));
    	  }

    	  _createClass(ColorAttributor, [{
    	    key: 'value',
    	    value: function value(domNode) {
    	      var value = _get(ColorAttributor.prototype.__proto__ || Object.getPrototypeOf(ColorAttributor.prototype), 'value', this).call(this, domNode);
    	      if (!value.startsWith('rgb(')) return value;
    	      value = value.replace(/^[^\d]+/, '').replace(/[^\d]+$/, '');
    	      return '#' + value.split(',').map(function (component) {
    	        return ('00' + parseInt(component).toString(16)).slice(-2);
    	      }).join('');
    	    }
    	  }]);

    	  return ColorAttributor;
    	}(_parchment2.default.Attributor.Style);

    	var ColorClass = new _parchment2.default.Attributor.Class('color', 'ql-color', {
    	  scope: _parchment2.default.Scope.INLINE
    	});
    	var ColorStyle = new ColorAttributor('color', 'color', {
    	  scope: _parchment2.default.Scope.INLINE
    	});

    	exports.ColorAttributor = ColorAttributor;
    	exports.ColorClass = ColorClass;
    	exports.ColorStyle = ColorStyle;

    	/***/ }),
    	/* 27 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.sanitize = exports.default = undefined;

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _inline = __webpack_require__(6);

    	var _inline2 = _interopRequireDefault(_inline);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Link = function (_Inline) {
    	  _inherits(Link, _Inline);

    	  function Link() {
    	    _classCallCheck(this, Link);

    	    return _possibleConstructorReturn(this, (Link.__proto__ || Object.getPrototypeOf(Link)).apply(this, arguments));
    	  }

    	  _createClass(Link, [{
    	    key: 'format',
    	    value: function format(name, value) {
    	      if (name !== this.statics.blotName || !value) return _get(Link.prototype.__proto__ || Object.getPrototypeOf(Link.prototype), 'format', this).call(this, name, value);
    	      value = this.constructor.sanitize(value);
    	      this.domNode.setAttribute('href', value);
    	    }
    	  }], [{
    	    key: 'create',
    	    value: function create(value) {
    	      var node = _get(Link.__proto__ || Object.getPrototypeOf(Link), 'create', this).call(this, value);
    	      value = this.sanitize(value);
    	      node.setAttribute('href', value);
    	      node.setAttribute('rel', 'noopener noreferrer');
    	      node.setAttribute('target', '_blank');
    	      return node;
    	    }
    	  }, {
    	    key: 'formats',
    	    value: function formats(domNode) {
    	      return domNode.getAttribute('href');
    	    }
    	  }, {
    	    key: 'sanitize',
    	    value: function sanitize(url) {
    	      return _sanitize(url, this.PROTOCOL_WHITELIST) ? url : this.SANITIZED_URL;
    	    }
    	  }]);

    	  return Link;
    	}(_inline2.default);

    	Link.blotName = 'link';
    	Link.tagName = 'A';
    	Link.SANITIZED_URL = 'about:blank';
    	Link.PROTOCOL_WHITELIST = ['http', 'https', 'mailto', 'tel'];

    	function _sanitize(url, protocols) {
    	  var anchor = document.createElement('a');
    	  anchor.href = url;
    	  var protocol = anchor.href.slice(0, anchor.href.indexOf(':'));
    	  return protocols.indexOf(protocol) > -1;
    	}

    	exports.default = Link;
    	exports.sanitize = _sanitize;

    	/***/ }),
    	/* 28 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _keyboard = __webpack_require__(23);

    	var _keyboard2 = _interopRequireDefault(_keyboard);

    	var _dropdown = __webpack_require__(107);

    	var _dropdown2 = _interopRequireDefault(_dropdown);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	var optionsCounter = 0;

    	function toggleAriaAttribute(element, attribute) {
    	  element.setAttribute(attribute, !(element.getAttribute(attribute) === 'true'));
    	}

    	var Picker = function () {
    	  function Picker(select) {
    	    var _this = this;

    	    _classCallCheck(this, Picker);

    	    this.select = select;
    	    this.container = document.createElement('span');
    	    this.buildPicker();
    	    this.select.style.display = 'none';
    	    this.select.parentNode.insertBefore(this.container, this.select);

    	    this.label.addEventListener('mousedown', function () {
    	      _this.togglePicker();
    	    });
    	    this.label.addEventListener('keydown', function (event) {
    	      switch (event.keyCode) {
    	        // Allows the "Enter" key to open the picker
    	        case _keyboard2.default.keys.ENTER:
    	          _this.togglePicker();
    	          break;

    	        // Allows the "Escape" key to close the picker
    	        case _keyboard2.default.keys.ESCAPE:
    	          _this.escape();
    	          event.preventDefault();
    	          break;
    	      }
    	    });
    	    this.select.addEventListener('change', this.update.bind(this));
    	  }

    	  _createClass(Picker, [{
    	    key: 'togglePicker',
    	    value: function togglePicker() {
    	      this.container.classList.toggle('ql-expanded');
    	      // Toggle aria-expanded and aria-hidden to make the picker accessible
    	      toggleAriaAttribute(this.label, 'aria-expanded');
    	      toggleAriaAttribute(this.options, 'aria-hidden');
    	    }
    	  }, {
    	    key: 'buildItem',
    	    value: function buildItem(option) {
    	      var _this2 = this;

    	      var item = document.createElement('span');
    	      item.tabIndex = '0';
    	      item.setAttribute('role', 'button');

    	      item.classList.add('ql-picker-item');
    	      if (option.hasAttribute('value')) {
    	        item.setAttribute('data-value', option.getAttribute('value'));
    	      }
    	      if (option.textContent) {
    	        item.setAttribute('data-label', option.textContent);
    	      }
    	      item.addEventListener('click', function () {
    	        _this2.selectItem(item, true);
    	      });
    	      item.addEventListener('keydown', function (event) {
    	        switch (event.keyCode) {
    	          // Allows the "Enter" key to select an item
    	          case _keyboard2.default.keys.ENTER:
    	            _this2.selectItem(item, true);
    	            event.preventDefault();
    	            break;

    	          // Allows the "Escape" key to close the picker
    	          case _keyboard2.default.keys.ESCAPE:
    	            _this2.escape();
    	            event.preventDefault();
    	            break;
    	        }
    	      });

    	      return item;
    	    }
    	  }, {
    	    key: 'buildLabel',
    	    value: function buildLabel() {
    	      var label = document.createElement('span');
    	      label.classList.add('ql-picker-label');
    	      label.innerHTML = _dropdown2.default;
    	      label.tabIndex = '0';
    	      label.setAttribute('role', 'button');
    	      label.setAttribute('aria-expanded', 'false');
    	      this.container.appendChild(label);
    	      return label;
    	    }
    	  }, {
    	    key: 'buildOptions',
    	    value: function buildOptions() {
    	      var _this3 = this;

    	      var options = document.createElement('span');
    	      options.classList.add('ql-picker-options');

    	      // Don't want screen readers to read this until options are visible
    	      options.setAttribute('aria-hidden', 'true');
    	      options.tabIndex = '-1';

    	      // Need a unique id for aria-controls
    	      options.id = 'ql-picker-options-' + optionsCounter;
    	      optionsCounter += 1;
    	      this.label.setAttribute('aria-controls', options.id);

    	      this.options = options;

    	      [].slice.call(this.select.options).forEach(function (option) {
    	        var item = _this3.buildItem(option);
    	        options.appendChild(item);
    	        if (option.selected === true) {
    	          _this3.selectItem(item);
    	        }
    	      });
    	      this.container.appendChild(options);
    	    }
    	  }, {
    	    key: 'buildPicker',
    	    value: function buildPicker() {
    	      var _this4 = this;

    	      [].slice.call(this.select.attributes).forEach(function (item) {
    	        _this4.container.setAttribute(item.name, item.value);
    	      });
    	      this.container.classList.add('ql-picker');
    	      this.label = this.buildLabel();
    	      this.buildOptions();
    	    }
    	  }, {
    	    key: 'escape',
    	    value: function escape() {
    	      var _this5 = this;

    	      // Close menu and return focus to trigger label
    	      this.close();
    	      // Need setTimeout for accessibility to ensure that the browser executes
    	      // focus on the next process thread and after any DOM content changes
    	      setTimeout(function () {
    	        return _this5.label.focus();
    	      }, 1);
    	    }
    	  }, {
    	    key: 'close',
    	    value: function close() {
    	      this.container.classList.remove('ql-expanded');
    	      this.label.setAttribute('aria-expanded', 'false');
    	      this.options.setAttribute('aria-hidden', 'true');
    	    }
    	  }, {
    	    key: 'selectItem',
    	    value: function selectItem(item) {
    	      var trigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    	      var selected = this.container.querySelector('.ql-selected');
    	      if (item === selected) return;
    	      if (selected != null) {
    	        selected.classList.remove('ql-selected');
    	      }
    	      if (item == null) return;
    	      item.classList.add('ql-selected');
    	      this.select.selectedIndex = [].indexOf.call(item.parentNode.children, item);
    	      if (item.hasAttribute('data-value')) {
    	        this.label.setAttribute('data-value', item.getAttribute('data-value'));
    	      } else {
    	        this.label.removeAttribute('data-value');
    	      }
    	      if (item.hasAttribute('data-label')) {
    	        this.label.setAttribute('data-label', item.getAttribute('data-label'));
    	      } else {
    	        this.label.removeAttribute('data-label');
    	      }
    	      if (trigger) {
    	        if (typeof Event === 'function') {
    	          this.select.dispatchEvent(new Event('change'));
    	        } else if ((typeof Event === 'undefined' ? 'undefined' : _typeof(Event)) === 'object') {
    	          // IE11
    	          var event = document.createEvent('Event');
    	          event.initEvent('change', true, true);
    	          this.select.dispatchEvent(event);
    	        }
    	        this.close();
    	      }
    	    }
    	  }, {
    	    key: 'update',
    	    value: function update() {
    	      var option = void 0;
    	      if (this.select.selectedIndex > -1) {
    	        var item = this.container.querySelector('.ql-picker-options').children[this.select.selectedIndex];
    	        option = this.select.options[this.select.selectedIndex];
    	        this.selectItem(item);
    	      } else {
    	        this.selectItem(null);
    	      }
    	      var isActive = option != null && option !== this.select.querySelector('option[selected]');
    	      this.label.classList.toggle('ql-active', isActive);
    	    }
    	  }]);

    	  return Picker;
    	}();

    	exports.default = Picker;

    	/***/ }),
    	/* 29 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _quill = __webpack_require__(5);

    	var _quill2 = _interopRequireDefault(_quill);

    	var _block = __webpack_require__(4);

    	var _block2 = _interopRequireDefault(_block);

    	var _break = __webpack_require__(16);

    	var _break2 = _interopRequireDefault(_break);

    	var _container = __webpack_require__(25);

    	var _container2 = _interopRequireDefault(_container);

    	var _cursor = __webpack_require__(24);

    	var _cursor2 = _interopRequireDefault(_cursor);

    	var _embed = __webpack_require__(35);

    	var _embed2 = _interopRequireDefault(_embed);

    	var _inline = __webpack_require__(6);

    	var _inline2 = _interopRequireDefault(_inline);

    	var _scroll = __webpack_require__(22);

    	var _scroll2 = _interopRequireDefault(_scroll);

    	var _text = __webpack_require__(7);

    	var _text2 = _interopRequireDefault(_text);

    	var _clipboard = __webpack_require__(55);

    	var _clipboard2 = _interopRequireDefault(_clipboard);

    	var _history = __webpack_require__(42);

    	var _history2 = _interopRequireDefault(_history);

    	var _keyboard = __webpack_require__(23);

    	var _keyboard2 = _interopRequireDefault(_keyboard);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	_quill2.default.register({
    	  'blots/block': _block2.default,
    	  'blots/block/embed': _block.BlockEmbed,
    	  'blots/break': _break2.default,
    	  'blots/container': _container2.default,
    	  'blots/cursor': _cursor2.default,
    	  'blots/embed': _embed2.default,
    	  'blots/inline': _inline2.default,
    	  'blots/scroll': _scroll2.default,
    	  'blots/text': _text2.default,

    	  'modules/clipboard': _clipboard2.default,
    	  'modules/history': _history2.default,
    	  'modules/keyboard': _keyboard2.default
    	});

    	_parchment2.default.register(_block2.default, _break2.default, _cursor2.default, _inline2.default, _scroll2.default, _text2.default);

    	exports.default = _quill2.default;

    	/***/ }),
    	/* 30 */
    	/***/ (function(module, exports, __webpack_require__) {

    	Object.defineProperty(exports, "__esModule", { value: true });
    	var Registry = __webpack_require__(1);
    	var ShadowBlot = /** @class */ (function () {
    	    function ShadowBlot(domNode) {
    	        this.domNode = domNode;
    	        // @ts-ignore
    	        this.domNode[Registry.DATA_KEY] = { blot: this };
    	    }
    	    Object.defineProperty(ShadowBlot.prototype, "statics", {
    	        // Hack for accessing inherited static methods
    	        get: function () {
    	            return this.constructor;
    	        },
    	        enumerable: true,
    	        configurable: true
    	    });
    	    ShadowBlot.create = function (value) {
    	        if (this.tagName == null) {
    	            throw new Registry.ParchmentError('Blot definition missing tagName');
    	        }
    	        var node;
    	        if (Array.isArray(this.tagName)) {
    	            if (typeof value === 'string') {
    	                value = value.toUpperCase();
    	                if (parseInt(value).toString() === value) {
    	                    value = parseInt(value);
    	                }
    	            }
    	            if (typeof value === 'number') {
    	                node = document.createElement(this.tagName[value - 1]);
    	            }
    	            else if (this.tagName.indexOf(value) > -1) {
    	                node = document.createElement(value);
    	            }
    	            else {
    	                node = document.createElement(this.tagName[0]);
    	            }
    	        }
    	        else {
    	            node = document.createElement(this.tagName);
    	        }
    	        if (this.className) {
    	            node.classList.add(this.className);
    	        }
    	        return node;
    	    };
    	    ShadowBlot.prototype.attach = function () {
    	        if (this.parent != null) {
    	            this.scroll = this.parent.scroll;
    	        }
    	    };
    	    ShadowBlot.prototype.clone = function () {
    	        var domNode = this.domNode.cloneNode(false);
    	        return Registry.create(domNode);
    	    };
    	    ShadowBlot.prototype.detach = function () {
    	        if (this.parent != null)
    	            this.parent.removeChild(this);
    	        // @ts-ignore
    	        delete this.domNode[Registry.DATA_KEY];
    	    };
    	    ShadowBlot.prototype.deleteAt = function (index, length) {
    	        var blot = this.isolate(index, length);
    	        blot.remove();
    	    };
    	    ShadowBlot.prototype.formatAt = function (index, length, name, value) {
    	        var blot = this.isolate(index, length);
    	        if (Registry.query(name, Registry.Scope.BLOT) != null && value) {
    	            blot.wrap(name, value);
    	        }
    	        else if (Registry.query(name, Registry.Scope.ATTRIBUTE) != null) {
    	            var parent = Registry.create(this.statics.scope);
    	            blot.wrap(parent);
    	            parent.format(name, value);
    	        }
    	    };
    	    ShadowBlot.prototype.insertAt = function (index, value, def) {
    	        var blot = def == null ? Registry.create('text', value) : Registry.create(value, def);
    	        var ref = this.split(index);
    	        this.parent.insertBefore(blot, ref);
    	    };
    	    ShadowBlot.prototype.insertInto = function (parentBlot, refBlot) {
    	        if (refBlot === void 0) { refBlot = null; }
    	        if (this.parent != null) {
    	            this.parent.children.remove(this);
    	        }
    	        var refDomNode = null;
    	        parentBlot.children.insertBefore(this, refBlot);
    	        if (refBlot != null) {
    	            refDomNode = refBlot.domNode;
    	        }
    	        if (this.domNode.parentNode != parentBlot.domNode ||
    	            this.domNode.nextSibling != refDomNode) {
    	            parentBlot.domNode.insertBefore(this.domNode, refDomNode);
    	        }
    	        this.parent = parentBlot;
    	        this.attach();
    	    };
    	    ShadowBlot.prototype.isolate = function (index, length) {
    	        var target = this.split(index);
    	        target.split(length);
    	        return target;
    	    };
    	    ShadowBlot.prototype.length = function () {
    	        return 1;
    	    };
    	    ShadowBlot.prototype.offset = function (root) {
    	        if (root === void 0) { root = this.parent; }
    	        if (this.parent == null || this == root)
    	            return 0;
    	        return this.parent.children.offset(this) + this.parent.offset(root);
    	    };
    	    ShadowBlot.prototype.optimize = function (context) {
    	        // TODO clean up once we use WeakMap
    	        // @ts-ignore
    	        if (this.domNode[Registry.DATA_KEY] != null) {
    	            // @ts-ignore
    	            delete this.domNode[Registry.DATA_KEY].mutations;
    	        }
    	    };
    	    ShadowBlot.prototype.remove = function () {
    	        if (this.domNode.parentNode != null) {
    	            this.domNode.parentNode.removeChild(this.domNode);
    	        }
    	        this.detach();
    	    };
    	    ShadowBlot.prototype.replace = function (target) {
    	        if (target.parent == null)
    	            return;
    	        target.parent.insertBefore(this, target.next);
    	        target.remove();
    	    };
    	    ShadowBlot.prototype.replaceWith = function (name, value) {
    	        var replacement = typeof name === 'string' ? Registry.create(name, value) : name;
    	        replacement.replace(this);
    	        return replacement;
    	    };
    	    ShadowBlot.prototype.split = function (index, force) {
    	        return index === 0 ? this : this.next;
    	    };
    	    ShadowBlot.prototype.update = function (mutations, context) {
    	        // Nothing to do by default
    	    };
    	    ShadowBlot.prototype.wrap = function (name, value) {
    	        var wrapper = typeof name === 'string' ? Registry.create(name, value) : name;
    	        if (this.parent != null) {
    	            this.parent.insertBefore(wrapper, this.next);
    	        }
    	        wrapper.appendChild(this);
    	        return wrapper;
    	    };
    	    ShadowBlot.blotName = 'abstract';
    	    return ShadowBlot;
    	}());
    	exports.default = ShadowBlot;


    	/***/ }),
    	/* 31 */
    	/***/ (function(module, exports, __webpack_require__) {

    	Object.defineProperty(exports, "__esModule", { value: true });
    	var attributor_1 = __webpack_require__(12);
    	var class_1 = __webpack_require__(32);
    	var style_1 = __webpack_require__(33);
    	var Registry = __webpack_require__(1);
    	var AttributorStore = /** @class */ (function () {
    	    function AttributorStore(domNode) {
    	        this.attributes = {};
    	        this.domNode = domNode;
    	        this.build();
    	    }
    	    AttributorStore.prototype.attribute = function (attribute, value) {
    	        // verb
    	        if (value) {
    	            if (attribute.add(this.domNode, value)) {
    	                if (attribute.value(this.domNode) != null) {
    	                    this.attributes[attribute.attrName] = attribute;
    	                }
    	                else {
    	                    delete this.attributes[attribute.attrName];
    	                }
    	            }
    	        }
    	        else {
    	            attribute.remove(this.domNode);
    	            delete this.attributes[attribute.attrName];
    	        }
    	    };
    	    AttributorStore.prototype.build = function () {
    	        var _this = this;
    	        this.attributes = {};
    	        var attributes = attributor_1.default.keys(this.domNode);
    	        var classes = class_1.default.keys(this.domNode);
    	        var styles = style_1.default.keys(this.domNode);
    	        attributes
    	            .concat(classes)
    	            .concat(styles)
    	            .forEach(function (name) {
    	            var attr = Registry.query(name, Registry.Scope.ATTRIBUTE);
    	            if (attr instanceof attributor_1.default) {
    	                _this.attributes[attr.attrName] = attr;
    	            }
    	        });
    	    };
    	    AttributorStore.prototype.copy = function (target) {
    	        var _this = this;
    	        Object.keys(this.attributes).forEach(function (key) {
    	            var value = _this.attributes[key].value(_this.domNode);
    	            target.format(key, value);
    	        });
    	    };
    	    AttributorStore.prototype.move = function (target) {
    	        var _this = this;
    	        this.copy(target);
    	        Object.keys(this.attributes).forEach(function (key) {
    	            _this.attributes[key].remove(_this.domNode);
    	        });
    	        this.attributes = {};
    	    };
    	    AttributorStore.prototype.values = function () {
    	        var _this = this;
    	        return Object.keys(this.attributes).reduce(function (attributes, name) {
    	            attributes[name] = _this.attributes[name].value(_this.domNode);
    	            return attributes;
    	        }, {});
    	    };
    	    return AttributorStore;
    	}());
    	exports.default = AttributorStore;


    	/***/ }),
    	/* 32 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var __extends = (this && this.__extends) || (function () {
    	    var extendStatics = Object.setPrototypeOf ||
    	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    	    return function (d, b) {
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(exports, "__esModule", { value: true });
    	var attributor_1 = __webpack_require__(12);
    	function match(node, prefix) {
    	    var className = node.getAttribute('class') || '';
    	    return className.split(/\s+/).filter(function (name) {
    	        return name.indexOf(prefix + "-") === 0;
    	    });
    	}
    	var ClassAttributor = /** @class */ (function (_super) {
    	    __extends(ClassAttributor, _super);
    	    function ClassAttributor() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    ClassAttributor.keys = function (node) {
    	        return (node.getAttribute('class') || '').split(/\s+/).map(function (name) {
    	            return name
    	                .split('-')
    	                .slice(0, -1)
    	                .join('-');
    	        });
    	    };
    	    ClassAttributor.prototype.add = function (node, value) {
    	        if (!this.canAdd(node, value))
    	            return false;
    	        this.remove(node);
    	        node.classList.add(this.keyName + "-" + value);
    	        return true;
    	    };
    	    ClassAttributor.prototype.remove = function (node) {
    	        var matches = match(node, this.keyName);
    	        matches.forEach(function (name) {
    	            node.classList.remove(name);
    	        });
    	        if (node.classList.length === 0) {
    	            node.removeAttribute('class');
    	        }
    	    };
    	    ClassAttributor.prototype.value = function (node) {
    	        var result = match(node, this.keyName)[0] || '';
    	        var value = result.slice(this.keyName.length + 1); // +1 for hyphen
    	        return this.canAdd(node, value) ? value : '';
    	    };
    	    return ClassAttributor;
    	}(attributor_1.default));
    	exports.default = ClassAttributor;


    	/***/ }),
    	/* 33 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var __extends = (this && this.__extends) || (function () {
    	    var extendStatics = Object.setPrototypeOf ||
    	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    	    return function (d, b) {
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(exports, "__esModule", { value: true });
    	var attributor_1 = __webpack_require__(12);
    	function camelize(name) {
    	    var parts = name.split('-');
    	    var rest = parts
    	        .slice(1)
    	        .map(function (part) {
    	        return part[0].toUpperCase() + part.slice(1);
    	    })
    	        .join('');
    	    return parts[0] + rest;
    	}
    	var StyleAttributor = /** @class */ (function (_super) {
    	    __extends(StyleAttributor, _super);
    	    function StyleAttributor() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    StyleAttributor.keys = function (node) {
    	        return (node.getAttribute('style') || '').split(';').map(function (value) {
    	            var arr = value.split(':');
    	            return arr[0].trim();
    	        });
    	    };
    	    StyleAttributor.prototype.add = function (node, value) {
    	        if (!this.canAdd(node, value))
    	            return false;
    	        // @ts-ignore
    	        node.style[camelize(this.keyName)] = value;
    	        return true;
    	    };
    	    StyleAttributor.prototype.remove = function (node) {
    	        // @ts-ignore
    	        node.style[camelize(this.keyName)] = '';
    	        if (!node.getAttribute('style')) {
    	            node.removeAttribute('style');
    	        }
    	    };
    	    StyleAttributor.prototype.value = function (node) {
    	        // @ts-ignore
    	        var value = node.style[camelize(this.keyName)];
    	        return this.canAdd(node, value) ? value : '';
    	    };
    	    return StyleAttributor;
    	}(attributor_1.default));
    	exports.default = StyleAttributor;


    	/***/ }),
    	/* 34 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	var Theme = function () {
    	  function Theme(quill, options) {
    	    _classCallCheck(this, Theme);

    	    this.quill = quill;
    	    this.options = options;
    	    this.modules = {};
    	  }

    	  _createClass(Theme, [{
    	    key: 'init',
    	    value: function init() {
    	      var _this = this;

    	      Object.keys(this.options.modules).forEach(function (name) {
    	        if (_this.modules[name] == null) {
    	          _this.addModule(name);
    	        }
    	      });
    	    }
    	  }, {
    	    key: 'addModule',
    	    value: function addModule(name) {
    	      var moduleClass = this.quill.constructor.import('modules/' + name);
    	      this.modules[name] = new moduleClass(this.quill, this.options.modules[name] || {});
    	      return this.modules[name];
    	    }
    	  }]);

    	  return Theme;
    	}();

    	Theme.DEFAULTS = {
    	  modules: {}
    	};
    	Theme.themes = {
    	  'default': Theme
    	};

    	exports.default = Theme;

    	/***/ }),
    	/* 35 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _text = __webpack_require__(7);

    	var _text2 = _interopRequireDefault(_text);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var GUARD_TEXT = '\uFEFF';

    	var Embed = function (_Parchment$Embed) {
    	  _inherits(Embed, _Parchment$Embed);

    	  function Embed(node) {
    	    _classCallCheck(this, Embed);

    	    var _this = _possibleConstructorReturn(this, (Embed.__proto__ || Object.getPrototypeOf(Embed)).call(this, node));

    	    _this.contentNode = document.createElement('span');
    	    _this.contentNode.setAttribute('contenteditable', false);
    	    [].slice.call(_this.domNode.childNodes).forEach(function (childNode) {
    	      _this.contentNode.appendChild(childNode);
    	    });
    	    _this.leftGuard = document.createTextNode(GUARD_TEXT);
    	    _this.rightGuard = document.createTextNode(GUARD_TEXT);
    	    _this.domNode.appendChild(_this.leftGuard);
    	    _this.domNode.appendChild(_this.contentNode);
    	    _this.domNode.appendChild(_this.rightGuard);
    	    return _this;
    	  }

    	  _createClass(Embed, [{
    	    key: 'index',
    	    value: function index(node, offset) {
    	      if (node === this.leftGuard) return 0;
    	      if (node === this.rightGuard) return 1;
    	      return _get(Embed.prototype.__proto__ || Object.getPrototypeOf(Embed.prototype), 'index', this).call(this, node, offset);
    	    }
    	  }, {
    	    key: 'restore',
    	    value: function restore(node) {
    	      var range = void 0,
    	          textNode = void 0;
    	      var text = node.data.split(GUARD_TEXT).join('');
    	      if (node === this.leftGuard) {
    	        if (this.prev instanceof _text2.default) {
    	          var prevLength = this.prev.length();
    	          this.prev.insertAt(prevLength, text);
    	          range = {
    	            startNode: this.prev.domNode,
    	            startOffset: prevLength + text.length
    	          };
    	        } else {
    	          textNode = document.createTextNode(text);
    	          this.parent.insertBefore(_parchment2.default.create(textNode), this);
    	          range = {
    	            startNode: textNode,
    	            startOffset: text.length
    	          };
    	        }
    	      } else if (node === this.rightGuard) {
    	        if (this.next instanceof _text2.default) {
    	          this.next.insertAt(0, text);
    	          range = {
    	            startNode: this.next.domNode,
    	            startOffset: text.length
    	          };
    	        } else {
    	          textNode = document.createTextNode(text);
    	          this.parent.insertBefore(_parchment2.default.create(textNode), this.next);
    	          range = {
    	            startNode: textNode,
    	            startOffset: text.length
    	          };
    	        }
    	      }
    	      node.data = GUARD_TEXT;
    	      return range;
    	    }
    	  }, {
    	    key: 'update',
    	    value: function update(mutations, context) {
    	      var _this2 = this;

    	      mutations.forEach(function (mutation) {
    	        if (mutation.type === 'characterData' && (mutation.target === _this2.leftGuard || mutation.target === _this2.rightGuard)) {
    	          var range = _this2.restore(mutation.target);
    	          if (range) context.range = range;
    	        }
    	      });
    	    }
    	  }]);

    	  return Embed;
    	}(_parchment2.default.Embed);

    	exports.default = Embed;

    	/***/ }),
    	/* 36 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.AlignStyle = exports.AlignClass = exports.AlignAttribute = undefined;

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	var config = {
    	  scope: _parchment2.default.Scope.BLOCK,
    	  whitelist: ['right', 'center', 'justify']
    	};

    	var AlignAttribute = new _parchment2.default.Attributor.Attribute('align', 'align', config);
    	var AlignClass = new _parchment2.default.Attributor.Class('align', 'ql-align', config);
    	var AlignStyle = new _parchment2.default.Attributor.Style('align', 'text-align', config);

    	exports.AlignAttribute = AlignAttribute;
    	exports.AlignClass = AlignClass;
    	exports.AlignStyle = AlignStyle;

    	/***/ }),
    	/* 37 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.BackgroundStyle = exports.BackgroundClass = undefined;

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _color = __webpack_require__(26);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	var BackgroundClass = new _parchment2.default.Attributor.Class('background', 'ql-bg', {
    	  scope: _parchment2.default.Scope.INLINE
    	});
    	var BackgroundStyle = new _color.ColorAttributor('background', 'background-color', {
    	  scope: _parchment2.default.Scope.INLINE
    	});

    	exports.BackgroundClass = BackgroundClass;
    	exports.BackgroundStyle = BackgroundStyle;

    	/***/ }),
    	/* 38 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.DirectionStyle = exports.DirectionClass = exports.DirectionAttribute = undefined;

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	var config = {
    	  scope: _parchment2.default.Scope.BLOCK,
    	  whitelist: ['rtl']
    	};

    	var DirectionAttribute = new _parchment2.default.Attributor.Attribute('direction', 'dir', config);
    	var DirectionClass = new _parchment2.default.Attributor.Class('direction', 'ql-direction', config);
    	var DirectionStyle = new _parchment2.default.Attributor.Style('direction', 'direction', config);

    	exports.DirectionAttribute = DirectionAttribute;
    	exports.DirectionClass = DirectionClass;
    	exports.DirectionStyle = DirectionStyle;

    	/***/ }),
    	/* 39 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.FontClass = exports.FontStyle = undefined;

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var config = {
    	  scope: _parchment2.default.Scope.INLINE,
    	  whitelist: ['serif', 'monospace']
    	};

    	var FontClass = new _parchment2.default.Attributor.Class('font', 'ql-font', config);

    	var FontStyleAttributor = function (_Parchment$Attributor) {
    	  _inherits(FontStyleAttributor, _Parchment$Attributor);

    	  function FontStyleAttributor() {
    	    _classCallCheck(this, FontStyleAttributor);

    	    return _possibleConstructorReturn(this, (FontStyleAttributor.__proto__ || Object.getPrototypeOf(FontStyleAttributor)).apply(this, arguments));
    	  }

    	  _createClass(FontStyleAttributor, [{
    	    key: 'value',
    	    value: function value(node) {
    	      return _get(FontStyleAttributor.prototype.__proto__ || Object.getPrototypeOf(FontStyleAttributor.prototype), 'value', this).call(this, node).replace(/["']/g, '');
    	    }
    	  }]);

    	  return FontStyleAttributor;
    	}(_parchment2.default.Attributor.Style);

    	var FontStyle = new FontStyleAttributor('font', 'font-family', config);

    	exports.FontStyle = FontStyle;
    	exports.FontClass = FontClass;

    	/***/ }),
    	/* 40 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.SizeStyle = exports.SizeClass = undefined;

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	var SizeClass = new _parchment2.default.Attributor.Class('size', 'ql-size', {
    	  scope: _parchment2.default.Scope.INLINE,
    	  whitelist: ['small', 'large', 'huge']
    	});
    	var SizeStyle = new _parchment2.default.Attributor.Style('size', 'font-size', {
    	  scope: _parchment2.default.Scope.INLINE,
    	  whitelist: ['10px', '18px', '32px']
    	});

    	exports.SizeClass = SizeClass;
    	exports.SizeStyle = SizeStyle;

    	/***/ }),
    	/* 41 */
    	/***/ (function(module, exports, __webpack_require__) {


    	module.exports = {
    	  'align': {
    	    '': __webpack_require__(76),
    	    'center': __webpack_require__(77),
    	    'right': __webpack_require__(78),
    	    'justify': __webpack_require__(79)
    	  },
    	  'background': __webpack_require__(80),
    	  'blockquote': __webpack_require__(81),
    	  'bold': __webpack_require__(82),
    	  'clean': __webpack_require__(83),
    	  'code': __webpack_require__(58),
    	  'code-block': __webpack_require__(58),
    	  'color': __webpack_require__(84),
    	  'direction': {
    	    '': __webpack_require__(85),
    	    'rtl': __webpack_require__(86)
    	  },
    	  'float': {
    	    'center': __webpack_require__(87),
    	    'full': __webpack_require__(88),
    	    'left': __webpack_require__(89),
    	    'right': __webpack_require__(90)
    	  },
    	  'formula': __webpack_require__(91),
    	  'header': {
    	    '1': __webpack_require__(92),
    	    '2': __webpack_require__(93)
    	  },
    	  'italic': __webpack_require__(94),
    	  'image': __webpack_require__(95),
    	  'indent': {
    	    '+1': __webpack_require__(96),
    	    '-1': __webpack_require__(97)
    	  },
    	  'link': __webpack_require__(98),
    	  'list': {
    	    'ordered': __webpack_require__(99),
    	    'bullet': __webpack_require__(100),
    	    'check': __webpack_require__(101)
    	  },
    	  'script': {
    	    'sub': __webpack_require__(102),
    	    'super': __webpack_require__(103)
    	  },
    	  'strike': __webpack_require__(104),
    	  'underline': __webpack_require__(105),
    	  'video': __webpack_require__(106)
    	};

    	/***/ }),
    	/* 42 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.getLastChangeIndex = exports.default = undefined;

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _quill = __webpack_require__(5);

    	var _quill2 = _interopRequireDefault(_quill);

    	var _module = __webpack_require__(9);

    	var _module2 = _interopRequireDefault(_module);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var History = function (_Module) {
    	  _inherits(History, _Module);

    	  function History(quill, options) {
    	    _classCallCheck(this, History);

    	    var _this = _possibleConstructorReturn(this, (History.__proto__ || Object.getPrototypeOf(History)).call(this, quill, options));

    	    _this.lastRecorded = 0;
    	    _this.ignoreChange = false;
    	    _this.clear();
    	    _this.quill.on(_quill2.default.events.EDITOR_CHANGE, function (eventName, delta, oldDelta, source) {
    	      if (eventName !== _quill2.default.events.TEXT_CHANGE || _this.ignoreChange) return;
    	      if (!_this.options.userOnly || source === _quill2.default.sources.USER) {
    	        _this.record(delta, oldDelta);
    	      } else {
    	        _this.transform(delta);
    	      }
    	    });
    	    _this.quill.keyboard.addBinding({ key: 'Z', shortKey: true }, _this.undo.bind(_this));
    	    _this.quill.keyboard.addBinding({ key: 'Z', shortKey: true, shiftKey: true }, _this.redo.bind(_this));
    	    if (/Win/i.test(navigator.platform)) {
    	      _this.quill.keyboard.addBinding({ key: 'Y', shortKey: true }, _this.redo.bind(_this));
    	    }
    	    return _this;
    	  }

    	  _createClass(History, [{
    	    key: 'change',
    	    value: function change(source, dest) {
    	      if (this.stack[source].length === 0) return;
    	      var delta = this.stack[source].pop();
    	      this.stack[dest].push(delta);
    	      this.lastRecorded = 0;
    	      this.ignoreChange = true;
    	      this.quill.updateContents(delta[source], _quill2.default.sources.USER);
    	      this.ignoreChange = false;
    	      var index = getLastChangeIndex(delta[source]);
    	      this.quill.setSelection(index);
    	    }
    	  }, {
    	    key: 'clear',
    	    value: function clear() {
    	      this.stack = { undo: [], redo: [] };
    	    }
    	  }, {
    	    key: 'cutoff',
    	    value: function cutoff() {
    	      this.lastRecorded = 0;
    	    }
    	  }, {
    	    key: 'record',
    	    value: function record(changeDelta, oldDelta) {
    	      if (changeDelta.ops.length === 0) return;
    	      this.stack.redo = [];
    	      var undoDelta = this.quill.getContents().diff(oldDelta);
    	      var timestamp = Date.now();
    	      if (this.lastRecorded + this.options.delay > timestamp && this.stack.undo.length > 0) {
    	        var delta = this.stack.undo.pop();
    	        undoDelta = undoDelta.compose(delta.undo);
    	        changeDelta = delta.redo.compose(changeDelta);
    	      } else {
    	        this.lastRecorded = timestamp;
    	      }
    	      this.stack.undo.push({
    	        redo: changeDelta,
    	        undo: undoDelta
    	      });
    	      if (this.stack.undo.length > this.options.maxStack) {
    	        this.stack.undo.shift();
    	      }
    	    }
    	  }, {
    	    key: 'redo',
    	    value: function redo() {
    	      this.change('redo', 'undo');
    	    }
    	  }, {
    	    key: 'transform',
    	    value: function transform(delta) {
    	      this.stack.undo.forEach(function (change) {
    	        change.undo = delta.transform(change.undo, true);
    	        change.redo = delta.transform(change.redo, true);
    	      });
    	      this.stack.redo.forEach(function (change) {
    	        change.undo = delta.transform(change.undo, true);
    	        change.redo = delta.transform(change.redo, true);
    	      });
    	    }
    	  }, {
    	    key: 'undo',
    	    value: function undo() {
    	      this.change('undo', 'redo');
    	    }
    	  }]);

    	  return History;
    	}(_module2.default);

    	History.DEFAULTS = {
    	  delay: 1000,
    	  maxStack: 100,
    	  userOnly: false
    	};

    	function endsWithNewlineChange(delta) {
    	  var lastOp = delta.ops[delta.ops.length - 1];
    	  if (lastOp == null) return false;
    	  if (lastOp.insert != null) {
    	    return typeof lastOp.insert === 'string' && lastOp.insert.endsWith('\n');
    	  }
    	  if (lastOp.attributes != null) {
    	    return Object.keys(lastOp.attributes).some(function (attr) {
    	      return _parchment2.default.query(attr, _parchment2.default.Scope.BLOCK) != null;
    	    });
    	  }
    	  return false;
    	}

    	function getLastChangeIndex(delta) {
    	  var deleteLength = delta.reduce(function (length, op) {
    	    length += op.delete || 0;
    	    return length;
    	  }, 0);
    	  var changeIndex = delta.length() - deleteLength;
    	  if (endsWithNewlineChange(delta)) {
    	    changeIndex -= 1;
    	  }
    	  return changeIndex;
    	}

    	exports.default = History;
    	exports.getLastChangeIndex = getLastChangeIndex;

    	/***/ }),
    	/* 43 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.default = exports.BaseTooltip = undefined;

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _extend = __webpack_require__(3);

    	var _extend2 = _interopRequireDefault(_extend);

    	var _quillDelta = __webpack_require__(2);

    	var _quillDelta2 = _interopRequireDefault(_quillDelta);

    	var _emitter = __webpack_require__(8);

    	var _emitter2 = _interopRequireDefault(_emitter);

    	var _keyboard = __webpack_require__(23);

    	var _keyboard2 = _interopRequireDefault(_keyboard);

    	var _theme = __webpack_require__(34);

    	var _theme2 = _interopRequireDefault(_theme);

    	var _colorPicker = __webpack_require__(59);

    	var _colorPicker2 = _interopRequireDefault(_colorPicker);

    	var _iconPicker = __webpack_require__(60);

    	var _iconPicker2 = _interopRequireDefault(_iconPicker);

    	var _picker = __webpack_require__(28);

    	var _picker2 = _interopRequireDefault(_picker);

    	var _tooltip = __webpack_require__(61);

    	var _tooltip2 = _interopRequireDefault(_tooltip);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var ALIGNS = [false, 'center', 'right', 'justify'];

    	var COLORS = ["#000000", "#e60000", "#ff9900", "#ffff00", "#008a00", "#0066cc", "#9933ff", "#ffffff", "#facccc", "#ffebcc", "#ffffcc", "#cce8cc", "#cce0f5", "#ebd6ff", "#bbbbbb", "#f06666", "#ffc266", "#ffff66", "#66b966", "#66a3e0", "#c285ff", "#888888", "#a10000", "#b26b00", "#b2b200", "#006100", "#0047b2", "#6b24b2", "#444444", "#5c0000", "#663d00", "#666600", "#003700", "#002966", "#3d1466"];

    	var FONTS = [false, 'serif', 'monospace'];

    	var HEADERS = ['1', '2', '3', false];

    	var SIZES = ['small', false, 'large', 'huge'];

    	var BaseTheme = function (_Theme) {
    	  _inherits(BaseTheme, _Theme);

    	  function BaseTheme(quill, options) {
    	    _classCallCheck(this, BaseTheme);

    	    var _this = _possibleConstructorReturn(this, (BaseTheme.__proto__ || Object.getPrototypeOf(BaseTheme)).call(this, quill, options));

    	    var listener = function listener(e) {
    	      if (!document.body.contains(quill.root)) {
    	        return document.body.removeEventListener('click', listener);
    	      }
    	      if (_this.tooltip != null && !_this.tooltip.root.contains(e.target) && document.activeElement !== _this.tooltip.textbox && !_this.quill.hasFocus()) {
    	        _this.tooltip.hide();
    	      }
    	      if (_this.pickers != null) {
    	        _this.pickers.forEach(function (picker) {
    	          if (!picker.container.contains(e.target)) {
    	            picker.close();
    	          }
    	        });
    	      }
    	    };
    	    quill.emitter.listenDOM('click', document.body, listener);
    	    return _this;
    	  }

    	  _createClass(BaseTheme, [{
    	    key: 'addModule',
    	    value: function addModule(name) {
    	      var module = _get(BaseTheme.prototype.__proto__ || Object.getPrototypeOf(BaseTheme.prototype), 'addModule', this).call(this, name);
    	      if (name === 'toolbar') {
    	        this.extendToolbar(module);
    	      }
    	      return module;
    	    }
    	  }, {
    	    key: 'buildButtons',
    	    value: function buildButtons(buttons, icons) {
    	      buttons.forEach(function (button) {
    	        var className = button.getAttribute('class') || '';
    	        className.split(/\s+/).forEach(function (name) {
    	          if (!name.startsWith('ql-')) return;
    	          name = name.slice('ql-'.length);
    	          if (icons[name] == null) return;
    	          if (name === 'direction') {
    	            button.innerHTML = icons[name][''] + icons[name]['rtl'];
    	          } else if (typeof icons[name] === 'string') {
    	            button.innerHTML = icons[name];
    	          } else {
    	            var value = button.value || '';
    	            if (value != null && icons[name][value]) {
    	              button.innerHTML = icons[name][value];
    	            }
    	          }
    	        });
    	      });
    	    }
    	  }, {
    	    key: 'buildPickers',
    	    value: function buildPickers(selects, icons) {
    	      var _this2 = this;

    	      this.pickers = selects.map(function (select) {
    	        if (select.classList.contains('ql-align')) {
    	          if (select.querySelector('option') == null) {
    	            fillSelect(select, ALIGNS);
    	          }
    	          return new _iconPicker2.default(select, icons.align);
    	        } else if (select.classList.contains('ql-background') || select.classList.contains('ql-color')) {
    	          var format = select.classList.contains('ql-background') ? 'background' : 'color';
    	          if (select.querySelector('option') == null) {
    	            fillSelect(select, COLORS, format === 'background' ? '#ffffff' : '#000000');
    	          }
    	          return new _colorPicker2.default(select, icons[format]);
    	        } else {
    	          if (select.querySelector('option') == null) {
    	            if (select.classList.contains('ql-font')) {
    	              fillSelect(select, FONTS);
    	            } else if (select.classList.contains('ql-header')) {
    	              fillSelect(select, HEADERS);
    	            } else if (select.classList.contains('ql-size')) {
    	              fillSelect(select, SIZES);
    	            }
    	          }
    	          return new _picker2.default(select);
    	        }
    	      });
    	      var update = function update() {
    	        _this2.pickers.forEach(function (picker) {
    	          picker.update();
    	        });
    	      };
    	      this.quill.on(_emitter2.default.events.EDITOR_CHANGE, update);
    	    }
    	  }]);

    	  return BaseTheme;
    	}(_theme2.default);

    	BaseTheme.DEFAULTS = (0, _extend2.default)(true, {}, _theme2.default.DEFAULTS, {
    	  modules: {
    	    toolbar: {
    	      handlers: {
    	        formula: function formula() {
    	          this.quill.theme.tooltip.edit('formula');
    	        },
    	        image: function image() {
    	          var _this3 = this;

    	          var fileInput = this.container.querySelector('input.ql-image[type=file]');
    	          if (fileInput == null) {
    	            fileInput = document.createElement('input');
    	            fileInput.setAttribute('type', 'file');
    	            fileInput.setAttribute('accept', 'image/png, image/gif, image/jpeg, image/bmp, image/x-icon');
    	            fileInput.classList.add('ql-image');
    	            fileInput.addEventListener('change', function () {
    	              if (fileInput.files != null && fileInput.files[0] != null) {
    	                var reader = new FileReader();
    	                reader.onload = function (e) {
    	                  var range = _this3.quill.getSelection(true);
    	                  _this3.quill.updateContents(new _quillDelta2.default().retain(range.index).delete(range.length).insert({ image: e.target.result }), _emitter2.default.sources.USER);
    	                  _this3.quill.setSelection(range.index + 1, _emitter2.default.sources.SILENT);
    	                  fileInput.value = "";
    	                };
    	                reader.readAsDataURL(fileInput.files[0]);
    	              }
    	            });
    	            this.container.appendChild(fileInput);
    	          }
    	          fileInput.click();
    	        },
    	        video: function video() {
    	          this.quill.theme.tooltip.edit('video');
    	        }
    	      }
    	    }
    	  }
    	});

    	var BaseTooltip = function (_Tooltip) {
    	  _inherits(BaseTooltip, _Tooltip);

    	  function BaseTooltip(quill, boundsContainer) {
    	    _classCallCheck(this, BaseTooltip);

    	    var _this4 = _possibleConstructorReturn(this, (BaseTooltip.__proto__ || Object.getPrototypeOf(BaseTooltip)).call(this, quill, boundsContainer));

    	    _this4.textbox = _this4.root.querySelector('input[type="text"]');
    	    _this4.listen();
    	    return _this4;
    	  }

    	  _createClass(BaseTooltip, [{
    	    key: 'listen',
    	    value: function listen() {
    	      var _this5 = this;

    	      this.textbox.addEventListener('keydown', function (event) {
    	        if (_keyboard2.default.match(event, 'enter')) {
    	          _this5.save();
    	          event.preventDefault();
    	        } else if (_keyboard2.default.match(event, 'escape')) {
    	          _this5.cancel();
    	          event.preventDefault();
    	        }
    	      });
    	    }
    	  }, {
    	    key: 'cancel',
    	    value: function cancel() {
    	      this.hide();
    	    }
    	  }, {
    	    key: 'edit',
    	    value: function edit() {
    	      var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'link';
    	      var preview = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    	      this.root.classList.remove('ql-hidden');
    	      this.root.classList.add('ql-editing');
    	      if (preview != null) {
    	        this.textbox.value = preview;
    	      } else if (mode !== this.root.getAttribute('data-mode')) {
    	        this.textbox.value = '';
    	      }
    	      this.position(this.quill.getBounds(this.quill.selection.savedRange));
    	      this.textbox.select();
    	      this.textbox.setAttribute('placeholder', this.textbox.getAttribute('data-' + mode) || '');
    	      this.root.setAttribute('data-mode', mode);
    	    }
    	  }, {
    	    key: 'restoreFocus',
    	    value: function restoreFocus() {
    	      var scrollTop = this.quill.scrollingContainer.scrollTop;
    	      this.quill.focus();
    	      this.quill.scrollingContainer.scrollTop = scrollTop;
    	    }
    	  }, {
    	    key: 'save',
    	    value: function save() {
    	      var value = this.textbox.value;
    	      switch (this.root.getAttribute('data-mode')) {
    	        case 'link':
    	          {
    	            var scrollTop = this.quill.root.scrollTop;
    	            if (this.linkRange) {
    	              this.quill.formatText(this.linkRange, 'link', value, _emitter2.default.sources.USER);
    	              delete this.linkRange;
    	            } else {
    	              this.restoreFocus();
    	              this.quill.format('link', value, _emitter2.default.sources.USER);
    	            }
    	            this.quill.root.scrollTop = scrollTop;
    	            break;
    	          }
    	        case 'video':
    	          {
    	            value = extractVideoUrl(value);
    	          } // eslint-disable-next-line no-fallthrough
    	        case 'formula':
    	          {
    	            if (!value) break;
    	            var range = this.quill.getSelection(true);
    	            if (range != null) {
    	              var index = range.index + range.length;
    	              this.quill.insertEmbed(index, this.root.getAttribute('data-mode'), value, _emitter2.default.sources.USER);
    	              if (this.root.getAttribute('data-mode') === 'formula') {
    	                this.quill.insertText(index + 1, ' ', _emitter2.default.sources.USER);
    	              }
    	              this.quill.setSelection(index + 2, _emitter2.default.sources.USER);
    	            }
    	            break;
    	          }
    	      }
    	      this.textbox.value = '';
    	      this.hide();
    	    }
    	  }]);

    	  return BaseTooltip;
    	}(_tooltip2.default);

    	function extractVideoUrl(url) {
    	  var match = url.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtube\.com\/watch.*v=([a-zA-Z0-9_-]+)/) || url.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtu\.be\/([a-zA-Z0-9_-]+)/);
    	  if (match) {
    	    return (match[1] || 'https') + '://www.youtube.com/embed/' + match[2] + '?showinfo=0';
    	  }
    	  if (match = url.match(/^(?:(https?):\/\/)?(?:www\.)?vimeo\.com\/(\d+)/)) {
    	    // eslint-disable-line no-cond-assign
    	    return (match[1] || 'https') + '://player.vimeo.com/video/' + match[2] + '/';
    	  }
    	  return url;
    	}

    	function fillSelect(select, values) {
    	  var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    	  values.forEach(function (value) {
    	    var option = document.createElement('option');
    	    if (value === defaultValue) {
    	      option.setAttribute('selected', 'selected');
    	    } else {
    	      option.setAttribute('value', value);
    	    }
    	    select.appendChild(option);
    	  });
    	}

    	exports.BaseTooltip = BaseTooltip;
    	exports.default = BaseTheme;

    	/***/ }),
    	/* 44 */
    	/***/ (function(module, exports, __webpack_require__) {

    	Object.defineProperty(exports, "__esModule", { value: true });
    	var LinkedList = /** @class */ (function () {
    	    function LinkedList() {
    	        this.head = this.tail = null;
    	        this.length = 0;
    	    }
    	    LinkedList.prototype.append = function () {
    	        var nodes = [];
    	        for (var _i = 0; _i < arguments.length; _i++) {
    	            nodes[_i] = arguments[_i];
    	        }
    	        this.insertBefore(nodes[0], null);
    	        if (nodes.length > 1) {
    	            this.append.apply(this, nodes.slice(1));
    	        }
    	    };
    	    LinkedList.prototype.contains = function (node) {
    	        var cur, next = this.iterator();
    	        while ((cur = next())) {
    	            if (cur === node)
    	                return true;
    	        }
    	        return false;
    	    };
    	    LinkedList.prototype.insertBefore = function (node, refNode) {
    	        if (!node)
    	            return;
    	        node.next = refNode;
    	        if (refNode != null) {
    	            node.prev = refNode.prev;
    	            if (refNode.prev != null) {
    	                refNode.prev.next = node;
    	            }
    	            refNode.prev = node;
    	            if (refNode === this.head) {
    	                this.head = node;
    	            }
    	        }
    	        else if (this.tail != null) {
    	            this.tail.next = node;
    	            node.prev = this.tail;
    	            this.tail = node;
    	        }
    	        else {
    	            node.prev = null;
    	            this.head = this.tail = node;
    	        }
    	        this.length += 1;
    	    };
    	    LinkedList.prototype.offset = function (target) {
    	        var index = 0, cur = this.head;
    	        while (cur != null) {
    	            if (cur === target)
    	                return index;
    	            index += cur.length();
    	            cur = cur.next;
    	        }
    	        return -1;
    	    };
    	    LinkedList.prototype.remove = function (node) {
    	        if (!this.contains(node))
    	            return;
    	        if (node.prev != null)
    	            node.prev.next = node.next;
    	        if (node.next != null)
    	            node.next.prev = node.prev;
    	        if (node === this.head)
    	            this.head = node.next;
    	        if (node === this.tail)
    	            this.tail = node.prev;
    	        this.length -= 1;
    	    };
    	    LinkedList.prototype.iterator = function (curNode) {
    	        if (curNode === void 0) { curNode = this.head; }
    	        // TODO use yield when we can
    	        return function () {
    	            var ret = curNode;
    	            if (curNode != null)
    	                curNode = curNode.next;
    	            return ret;
    	        };
    	    };
    	    LinkedList.prototype.find = function (index, inclusive) {
    	        if (inclusive === void 0) { inclusive = false; }
    	        var cur, next = this.iterator();
    	        while ((cur = next())) {
    	            var length = cur.length();
    	            if (index < length ||
    	                (inclusive && index === length && (cur.next == null || cur.next.length() !== 0))) {
    	                return [cur, index];
    	            }
    	            index -= length;
    	        }
    	        return [null, 0];
    	    };
    	    LinkedList.prototype.forEach = function (callback) {
    	        var cur, next = this.iterator();
    	        while ((cur = next())) {
    	            callback(cur);
    	        }
    	    };
    	    LinkedList.prototype.forEachAt = function (index, length, callback) {
    	        if (length <= 0)
    	            return;
    	        var _a = this.find(index), startNode = _a[0], offset = _a[1];
    	        var cur, curIndex = index - offset, next = this.iterator(startNode);
    	        while ((cur = next()) && curIndex < index + length) {
    	            var curLength = cur.length();
    	            if (index > curIndex) {
    	                callback(cur, index - curIndex, Math.min(length, curIndex + curLength - index));
    	            }
    	            else {
    	                callback(cur, 0, Math.min(curLength, index + length - curIndex));
    	            }
    	            curIndex += curLength;
    	        }
    	    };
    	    LinkedList.prototype.map = function (callback) {
    	        return this.reduce(function (memo, cur) {
    	            memo.push(callback(cur));
    	            return memo;
    	        }, []);
    	    };
    	    LinkedList.prototype.reduce = function (callback, memo) {
    	        var cur, next = this.iterator();
    	        while ((cur = next())) {
    	            memo = callback(memo, cur);
    	        }
    	        return memo;
    	    };
    	    return LinkedList;
    	}());
    	exports.default = LinkedList;


    	/***/ }),
    	/* 45 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var __extends = (this && this.__extends) || (function () {
    	    var extendStatics = Object.setPrototypeOf ||
    	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    	    return function (d, b) {
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(exports, "__esModule", { value: true });
    	var container_1 = __webpack_require__(17);
    	var Registry = __webpack_require__(1);
    	var OBSERVER_CONFIG = {
    	    attributes: true,
    	    characterData: true,
    	    characterDataOldValue: true,
    	    childList: true,
    	    subtree: true,
    	};
    	var MAX_OPTIMIZE_ITERATIONS = 100;
    	var ScrollBlot = /** @class */ (function (_super) {
    	    __extends(ScrollBlot, _super);
    	    function ScrollBlot(node) {
    	        var _this = _super.call(this, node) || this;
    	        _this.scroll = _this;
    	        _this.observer = new MutationObserver(function (mutations) {
    	            _this.update(mutations);
    	        });
    	        _this.observer.observe(_this.domNode, OBSERVER_CONFIG);
    	        _this.attach();
    	        return _this;
    	    }
    	    ScrollBlot.prototype.detach = function () {
    	        _super.prototype.detach.call(this);
    	        this.observer.disconnect();
    	    };
    	    ScrollBlot.prototype.deleteAt = function (index, length) {
    	        this.update();
    	        if (index === 0 && length === this.length()) {
    	            this.children.forEach(function (child) {
    	                child.remove();
    	            });
    	        }
    	        else {
    	            _super.prototype.deleteAt.call(this, index, length);
    	        }
    	    };
    	    ScrollBlot.prototype.formatAt = function (index, length, name, value) {
    	        this.update();
    	        _super.prototype.formatAt.call(this, index, length, name, value);
    	    };
    	    ScrollBlot.prototype.insertAt = function (index, value, def) {
    	        this.update();
    	        _super.prototype.insertAt.call(this, index, value, def);
    	    };
    	    ScrollBlot.prototype.optimize = function (mutations, context) {
    	        var _this = this;
    	        if (mutations === void 0) { mutations = []; }
    	        if (context === void 0) { context = {}; }
    	        _super.prototype.optimize.call(this, context);
    	        // We must modify mutations directly, cannot make copy and then modify
    	        var records = [].slice.call(this.observer.takeRecords());
    	        // Array.push currently seems to be implemented by a non-tail recursive function
    	        // so we cannot just mutations.push.apply(mutations, this.observer.takeRecords());
    	        while (records.length > 0)
    	            mutations.push(records.pop());
    	        // TODO use WeakMap
    	        var mark = function (blot, markParent) {
    	            if (markParent === void 0) { markParent = true; }
    	            if (blot == null || blot === _this)
    	                return;
    	            if (blot.domNode.parentNode == null)
    	                return;
    	            // @ts-ignore
    	            if (blot.domNode[Registry.DATA_KEY].mutations == null) {
    	                // @ts-ignore
    	                blot.domNode[Registry.DATA_KEY].mutations = [];
    	            }
    	            if (markParent)
    	                mark(blot.parent);
    	        };
    	        var optimize = function (blot) {
    	            // Post-order traversal
    	            if (
    	            // @ts-ignore
    	            blot.domNode[Registry.DATA_KEY] == null ||
    	                // @ts-ignore
    	                blot.domNode[Registry.DATA_KEY].mutations == null) {
    	                return;
    	            }
    	            if (blot instanceof container_1.default) {
    	                blot.children.forEach(optimize);
    	            }
    	            blot.optimize(context);
    	        };
    	        var remaining = mutations;
    	        for (var i = 0; remaining.length > 0; i += 1) {
    	            if (i >= MAX_OPTIMIZE_ITERATIONS) {
    	                throw new Error('[Parchment] Maximum optimize iterations reached');
    	            }
    	            remaining.forEach(function (mutation) {
    	                var blot = Registry.find(mutation.target, true);
    	                if (blot == null)
    	                    return;
    	                if (blot.domNode === mutation.target) {
    	                    if (mutation.type === 'childList') {
    	                        mark(Registry.find(mutation.previousSibling, false));
    	                        [].forEach.call(mutation.addedNodes, function (node) {
    	                            var child = Registry.find(node, false);
    	                            mark(child, false);
    	                            if (child instanceof container_1.default) {
    	                                child.children.forEach(function (grandChild) {
    	                                    mark(grandChild, false);
    	                                });
    	                            }
    	                        });
    	                    }
    	                    else if (mutation.type === 'attributes') {
    	                        mark(blot.prev);
    	                    }
    	                }
    	                mark(blot);
    	            });
    	            this.children.forEach(optimize);
    	            remaining = [].slice.call(this.observer.takeRecords());
    	            records = remaining.slice();
    	            while (records.length > 0)
    	                mutations.push(records.pop());
    	        }
    	    };
    	    ScrollBlot.prototype.update = function (mutations, context) {
    	        var _this = this;
    	        if (context === void 0) { context = {}; }
    	        mutations = mutations || this.observer.takeRecords();
    	        // TODO use WeakMap
    	        mutations
    	            .map(function (mutation) {
    	            var blot = Registry.find(mutation.target, true);
    	            if (blot == null)
    	                return null;
    	            // @ts-ignore
    	            if (blot.domNode[Registry.DATA_KEY].mutations == null) {
    	                // @ts-ignore
    	                blot.domNode[Registry.DATA_KEY].mutations = [mutation];
    	                return blot;
    	            }
    	            else {
    	                // @ts-ignore
    	                blot.domNode[Registry.DATA_KEY].mutations.push(mutation);
    	                return null;
    	            }
    	        })
    	            .forEach(function (blot) {
    	            if (blot == null ||
    	                blot === _this ||
    	                //@ts-ignore
    	                blot.domNode[Registry.DATA_KEY] == null)
    	                return;
    	            // @ts-ignore
    	            blot.update(blot.domNode[Registry.DATA_KEY].mutations || [], context);
    	        });
    	        // @ts-ignore
    	        if (this.domNode[Registry.DATA_KEY].mutations != null) {
    	            // @ts-ignore
    	            _super.prototype.update.call(this, this.domNode[Registry.DATA_KEY].mutations, context);
    	        }
    	        this.optimize(mutations, context);
    	    };
    	    ScrollBlot.blotName = 'scroll';
    	    ScrollBlot.defaultChild = 'block';
    	    ScrollBlot.scope = Registry.Scope.BLOCK_BLOT;
    	    ScrollBlot.tagName = 'DIV';
    	    return ScrollBlot;
    	}(container_1.default));
    	exports.default = ScrollBlot;


    	/***/ }),
    	/* 46 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var __extends = (this && this.__extends) || (function () {
    	    var extendStatics = Object.setPrototypeOf ||
    	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    	    return function (d, b) {
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(exports, "__esModule", { value: true });
    	var format_1 = __webpack_require__(18);
    	var Registry = __webpack_require__(1);
    	// Shallow object comparison
    	function isEqual(obj1, obj2) {
    	    if (Object.keys(obj1).length !== Object.keys(obj2).length)
    	        return false;
    	    // @ts-ignore
    	    for (var prop in obj1) {
    	        // @ts-ignore
    	        if (obj1[prop] !== obj2[prop])
    	            return false;
    	    }
    	    return true;
    	}
    	var InlineBlot = /** @class */ (function (_super) {
    	    __extends(InlineBlot, _super);
    	    function InlineBlot() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    InlineBlot.formats = function (domNode) {
    	        if (domNode.tagName === InlineBlot.tagName)
    	            return undefined;
    	        return _super.formats.call(this, domNode);
    	    };
    	    InlineBlot.prototype.format = function (name, value) {
    	        var _this = this;
    	        if (name === this.statics.blotName && !value) {
    	            this.children.forEach(function (child) {
    	                if (!(child instanceof format_1.default)) {
    	                    child = child.wrap(InlineBlot.blotName, true);
    	                }
    	                _this.attributes.copy(child);
    	            });
    	            this.unwrap();
    	        }
    	        else {
    	            _super.prototype.format.call(this, name, value);
    	        }
    	    };
    	    InlineBlot.prototype.formatAt = function (index, length, name, value) {
    	        if (this.formats()[name] != null || Registry.query(name, Registry.Scope.ATTRIBUTE)) {
    	            var blot = this.isolate(index, length);
    	            blot.format(name, value);
    	        }
    	        else {
    	            _super.prototype.formatAt.call(this, index, length, name, value);
    	        }
    	    };
    	    InlineBlot.prototype.optimize = function (context) {
    	        _super.prototype.optimize.call(this, context);
    	        var formats = this.formats();
    	        if (Object.keys(formats).length === 0) {
    	            return this.unwrap(); // unformatted span
    	        }
    	        var next = this.next;
    	        if (next instanceof InlineBlot && next.prev === this && isEqual(formats, next.formats())) {
    	            next.moveChildren(this);
    	            next.remove();
    	        }
    	    };
    	    InlineBlot.blotName = 'inline';
    	    InlineBlot.scope = Registry.Scope.INLINE_BLOT;
    	    InlineBlot.tagName = 'SPAN';
    	    return InlineBlot;
    	}(format_1.default));
    	exports.default = InlineBlot;


    	/***/ }),
    	/* 47 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var __extends = (this && this.__extends) || (function () {
    	    var extendStatics = Object.setPrototypeOf ||
    	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    	    return function (d, b) {
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(exports, "__esModule", { value: true });
    	var format_1 = __webpack_require__(18);
    	var Registry = __webpack_require__(1);
    	var BlockBlot = /** @class */ (function (_super) {
    	    __extends(BlockBlot, _super);
    	    function BlockBlot() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    BlockBlot.formats = function (domNode) {
    	        var tagName = Registry.query(BlockBlot.blotName).tagName;
    	        if (domNode.tagName === tagName)
    	            return undefined;
    	        return _super.formats.call(this, domNode);
    	    };
    	    BlockBlot.prototype.format = function (name, value) {
    	        if (Registry.query(name, Registry.Scope.BLOCK) == null) {
    	            return;
    	        }
    	        else if (name === this.statics.blotName && !value) {
    	            this.replaceWith(BlockBlot.blotName);
    	        }
    	        else {
    	            _super.prototype.format.call(this, name, value);
    	        }
    	    };
    	    BlockBlot.prototype.formatAt = function (index, length, name, value) {
    	        if (Registry.query(name, Registry.Scope.BLOCK) != null) {
    	            this.format(name, value);
    	        }
    	        else {
    	            _super.prototype.formatAt.call(this, index, length, name, value);
    	        }
    	    };
    	    BlockBlot.prototype.insertAt = function (index, value, def) {
    	        if (def == null || Registry.query(value, Registry.Scope.INLINE) != null) {
    	            // Insert text or inline
    	            _super.prototype.insertAt.call(this, index, value, def);
    	        }
    	        else {
    	            var after = this.split(index);
    	            var blot = Registry.create(value, def);
    	            after.parent.insertBefore(blot, after);
    	        }
    	    };
    	    BlockBlot.prototype.update = function (mutations, context) {
    	        if (navigator.userAgent.match(/Trident/)) {
    	            this.build();
    	        }
    	        else {
    	            _super.prototype.update.call(this, mutations, context);
    	        }
    	    };
    	    BlockBlot.blotName = 'block';
    	    BlockBlot.scope = Registry.Scope.BLOCK_BLOT;
    	    BlockBlot.tagName = 'P';
    	    return BlockBlot;
    	}(format_1.default));
    	exports.default = BlockBlot;


    	/***/ }),
    	/* 48 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var __extends = (this && this.__extends) || (function () {
    	    var extendStatics = Object.setPrototypeOf ||
    	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    	    return function (d, b) {
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(exports, "__esModule", { value: true });
    	var leaf_1 = __webpack_require__(19);
    	var EmbedBlot = /** @class */ (function (_super) {
    	    __extends(EmbedBlot, _super);
    	    function EmbedBlot() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    EmbedBlot.formats = function (domNode) {
    	        return undefined;
    	    };
    	    EmbedBlot.prototype.format = function (name, value) {
    	        // super.formatAt wraps, which is what we want in general,
    	        // but this allows subclasses to overwrite for formats
    	        // that just apply to particular embeds
    	        _super.prototype.formatAt.call(this, 0, this.length(), name, value);
    	    };
    	    EmbedBlot.prototype.formatAt = function (index, length, name, value) {
    	        if (index === 0 && length === this.length()) {
    	            this.format(name, value);
    	        }
    	        else {
    	            _super.prototype.formatAt.call(this, index, length, name, value);
    	        }
    	    };
    	    EmbedBlot.prototype.formats = function () {
    	        return this.statics.formats(this.domNode);
    	    };
    	    return EmbedBlot;
    	}(leaf_1.default));
    	exports.default = EmbedBlot;


    	/***/ }),
    	/* 49 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var __extends = (this && this.__extends) || (function () {
    	    var extendStatics = Object.setPrototypeOf ||
    	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    	    return function (d, b) {
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(exports, "__esModule", { value: true });
    	var leaf_1 = __webpack_require__(19);
    	var Registry = __webpack_require__(1);
    	var TextBlot = /** @class */ (function (_super) {
    	    __extends(TextBlot, _super);
    	    function TextBlot(node) {
    	        var _this = _super.call(this, node) || this;
    	        _this.text = _this.statics.value(_this.domNode);
    	        return _this;
    	    }
    	    TextBlot.create = function (value) {
    	        return document.createTextNode(value);
    	    };
    	    TextBlot.value = function (domNode) {
    	        var text = domNode.data;
    	        // @ts-ignore
    	        if (text['normalize'])
    	            text = text['normalize']();
    	        return text;
    	    };
    	    TextBlot.prototype.deleteAt = function (index, length) {
    	        this.domNode.data = this.text = this.text.slice(0, index) + this.text.slice(index + length);
    	    };
    	    TextBlot.prototype.index = function (node, offset) {
    	        if (this.domNode === node) {
    	            return offset;
    	        }
    	        return -1;
    	    };
    	    TextBlot.prototype.insertAt = function (index, value, def) {
    	        if (def == null) {
    	            this.text = this.text.slice(0, index) + value + this.text.slice(index);
    	            this.domNode.data = this.text;
    	        }
    	        else {
    	            _super.prototype.insertAt.call(this, index, value, def);
    	        }
    	    };
    	    TextBlot.prototype.length = function () {
    	        return this.text.length;
    	    };
    	    TextBlot.prototype.optimize = function (context) {
    	        _super.prototype.optimize.call(this, context);
    	        this.text = this.statics.value(this.domNode);
    	        if (this.text.length === 0) {
    	            this.remove();
    	        }
    	        else if (this.next instanceof TextBlot && this.next.prev === this) {
    	            this.insertAt(this.length(), this.next.value());
    	            this.next.remove();
    	        }
    	    };
    	    TextBlot.prototype.position = function (index, inclusive) {
    	        return [this.domNode, index];
    	    };
    	    TextBlot.prototype.split = function (index, force) {
    	        if (force === void 0) { force = false; }
    	        if (!force) {
    	            if (index === 0)
    	                return this;
    	            if (index === this.length())
    	                return this.next;
    	        }
    	        var after = Registry.create(this.domNode.splitText(index));
    	        this.parent.insertBefore(after, this.next);
    	        this.text = this.statics.value(this.domNode);
    	        return after;
    	    };
    	    TextBlot.prototype.update = function (mutations, context) {
    	        var _this = this;
    	        if (mutations.some(function (mutation) {
    	            return mutation.type === 'characterData' && mutation.target === _this.domNode;
    	        })) {
    	            this.text = this.statics.value(this.domNode);
    	        }
    	    };
    	    TextBlot.prototype.value = function () {
    	        return this.text;
    	    };
    	    TextBlot.blotName = 'text';
    	    TextBlot.scope = Registry.Scope.INLINE_BLOT;
    	    return TextBlot;
    	}(leaf_1.default));
    	exports.default = TextBlot;


    	/***/ }),
    	/* 50 */
    	/***/ (function(module, exports, __webpack_require__) {


    	var elem = document.createElement('div');
    	elem.classList.toggle('test-class', false);
    	if (elem.classList.contains('test-class')) {
    	  var _toggle = DOMTokenList.prototype.toggle;
    	  DOMTokenList.prototype.toggle = function (token, force) {
    	    if (arguments.length > 1 && !this.contains(token) === !force) {
    	      return force;
    	    } else {
    	      return _toggle.call(this, token);
    	    }
    	  };
    	}

    	if (!String.prototype.startsWith) {
    	  String.prototype.startsWith = function (searchString, position) {
    	    position = position || 0;
    	    return this.substr(position, searchString.length) === searchString;
    	  };
    	}

    	if (!String.prototype.endsWith) {
    	  String.prototype.endsWith = function (searchString, position) {
    	    var subjectString = this.toString();
    	    if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {
    	      position = subjectString.length;
    	    }
    	    position -= searchString.length;
    	    var lastIndex = subjectString.indexOf(searchString, position);
    	    return lastIndex !== -1 && lastIndex === position;
    	  };
    	}

    	if (!Array.prototype.find) {
    	  Object.defineProperty(Array.prototype, "find", {
    	    value: function value(predicate) {
    	      if (this === null) {
    	        throw new TypeError('Array.prototype.find called on null or undefined');
    	      }
    	      if (typeof predicate !== 'function') {
    	        throw new TypeError('predicate must be a function');
    	      }
    	      var list = Object(this);
    	      var length = list.length >>> 0;
    	      var thisArg = arguments[1];
    	      var value;

    	      for (var i = 0; i < length; i++) {
    	        value = list[i];
    	        if (predicate.call(thisArg, value, i, list)) {
    	          return value;
    	        }
    	      }
    	      return undefined;
    	    }
    	  });
    	}

    	document.addEventListener("DOMContentLoaded", function () {
    	  // Disable resizing in Firefox
    	  document.execCommand("enableObjectResizing", false, false);
    	  // Disable automatic linkifying in IE11
    	  document.execCommand("autoUrlDetect", false, false);
    	});

    	/***/ }),
    	/* 51 */
    	/***/ (function(module, exports) {

    	/**
    	 * This library modifies the diff-patch-match library by Neil Fraser
    	 * by removing the patch and match functionality and certain advanced
    	 * options in the diff function. The original license is as follows:
    	 *
    	 * ===
    	 *
    	 * Diff Match and Patch
    	 *
    	 * Copyright 2006 Google Inc.
    	 * http://code.google.com/p/google-diff-match-patch/
    	 *
    	 * Licensed under the Apache License, Version 2.0 (the "License");
    	 * you may not use this file except in compliance with the License.
    	 * You may obtain a copy of the License at
    	 *
    	 *   http://www.apache.org/licenses/LICENSE-2.0
    	 *
    	 * Unless required by applicable law or agreed to in writing, software
    	 * distributed under the License is distributed on an "AS IS" BASIS,
    	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    	 * See the License for the specific language governing permissions and
    	 * limitations under the License.
    	 */


    	/**
    	 * The data structure representing a diff is an array of tuples:
    	 * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]
    	 * which means: delete 'Hello', add 'Goodbye' and keep ' world.'
    	 */
    	var DIFF_DELETE = -1;
    	var DIFF_INSERT = 1;
    	var DIFF_EQUAL = 0;


    	/**
    	 * Find the differences between two texts.  Simplifies the problem by stripping
    	 * any common prefix or suffix off the texts before diffing.
    	 * @param {string} text1 Old string to be diffed.
    	 * @param {string} text2 New string to be diffed.
    	 * @param {Int} cursor_pos Expected edit position in text1 (optional)
    	 * @return {Array} Array of diff tuples.
    	 */
    	function diff_main(text1, text2, cursor_pos) {
    	  // Check for equality (speedup).
    	  if (text1 == text2) {
    	    if (text1) {
    	      return [[DIFF_EQUAL, text1]];
    	    }
    	    return [];
    	  }

    	  // Check cursor_pos within bounds
    	  if (cursor_pos < 0 || text1.length < cursor_pos) {
    	    cursor_pos = null;
    	  }

    	  // Trim off common prefix (speedup).
    	  var commonlength = diff_commonPrefix(text1, text2);
    	  var commonprefix = text1.substring(0, commonlength);
    	  text1 = text1.substring(commonlength);
    	  text2 = text2.substring(commonlength);

    	  // Trim off common suffix (speedup).
    	  commonlength = diff_commonSuffix(text1, text2);
    	  var commonsuffix = text1.substring(text1.length - commonlength);
    	  text1 = text1.substring(0, text1.length - commonlength);
    	  text2 = text2.substring(0, text2.length - commonlength);

    	  // Compute the diff on the middle block.
    	  var diffs = diff_compute_(text1, text2);

    	  // Restore the prefix and suffix.
    	  if (commonprefix) {
    	    diffs.unshift([DIFF_EQUAL, commonprefix]);
    	  }
    	  if (commonsuffix) {
    	    diffs.push([DIFF_EQUAL, commonsuffix]);
    	  }
    	  diff_cleanupMerge(diffs);
    	  if (cursor_pos != null) {
    	    diffs = fix_cursor(diffs, cursor_pos);
    	  }
    	  diffs = fix_emoji(diffs);
    	  return diffs;
    	}

    	/**
    	 * Find the differences between two texts.  Assumes that the texts do not
    	 * have any common prefix or suffix.
    	 * @param {string} text1 Old string to be diffed.
    	 * @param {string} text2 New string to be diffed.
    	 * @return {Array} Array of diff tuples.
    	 */
    	function diff_compute_(text1, text2) {
    	  var diffs;

    	  if (!text1) {
    	    // Just add some text (speedup).
    	    return [[DIFF_INSERT, text2]];
    	  }

    	  if (!text2) {
    	    // Just delete some text (speedup).
    	    return [[DIFF_DELETE, text1]];
    	  }

    	  var longtext = text1.length > text2.length ? text1 : text2;
    	  var shorttext = text1.length > text2.length ? text2 : text1;
    	  var i = longtext.indexOf(shorttext);
    	  if (i != -1) {
    	    // Shorter text is inside the longer text (speedup).
    	    diffs = [[DIFF_INSERT, longtext.substring(0, i)],
    	             [DIFF_EQUAL, shorttext],
    	             [DIFF_INSERT, longtext.substring(i + shorttext.length)]];
    	    // Swap insertions for deletions if diff is reversed.
    	    if (text1.length > text2.length) {
    	      diffs[0][0] = diffs[2][0] = DIFF_DELETE;
    	    }
    	    return diffs;
    	  }

    	  if (shorttext.length == 1) {
    	    // Single character string.
    	    // After the previous speedup, the character can't be an equality.
    	    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
    	  }

    	  // Check to see if the problem can be split in two.
    	  var hm = diff_halfMatch_(text1, text2);
    	  if (hm) {
    	    // A half-match was found, sort out the return data.
    	    var text1_a = hm[0];
    	    var text1_b = hm[1];
    	    var text2_a = hm[2];
    	    var text2_b = hm[3];
    	    var mid_common = hm[4];
    	    // Send both pairs off for separate processing.
    	    var diffs_a = diff_main(text1_a, text2_a);
    	    var diffs_b = diff_main(text1_b, text2_b);
    	    // Merge the results.
    	    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);
    	  }

    	  return diff_bisect_(text1, text2);
    	}

    	/**
    	 * Find the 'middle snake' of a diff, split the problem in two
    	 * and return the recursively constructed diff.
    	 * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.
    	 * @param {string} text1 Old string to be diffed.
    	 * @param {string} text2 New string to be diffed.
    	 * @return {Array} Array of diff tuples.
    	 * @private
    	 */
    	function diff_bisect_(text1, text2) {
    	  // Cache the text lengths to prevent multiple calls.
    	  var text1_length = text1.length;
    	  var text2_length = text2.length;
    	  var max_d = Math.ceil((text1_length + text2_length) / 2);
    	  var v_offset = max_d;
    	  var v_length = 2 * max_d;
    	  var v1 = new Array(v_length);
    	  var v2 = new Array(v_length);
    	  // Setting all elements to -1 is faster in Chrome & Firefox than mixing
    	  // integers and undefined.
    	  for (var x = 0; x < v_length; x++) {
    	    v1[x] = -1;
    	    v2[x] = -1;
    	  }
    	  v1[v_offset + 1] = 0;
    	  v2[v_offset + 1] = 0;
    	  var delta = text1_length - text2_length;
    	  // If the total number of characters is odd, then the front path will collide
    	  // with the reverse path.
    	  var front = (delta % 2 != 0);
    	  // Offsets for start and end of k loop.
    	  // Prevents mapping of space beyond the grid.
    	  var k1start = 0;
    	  var k1end = 0;
    	  var k2start = 0;
    	  var k2end = 0;
    	  for (var d = 0; d < max_d; d++) {
    	    // Walk the front path one step.
    	    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {
    	      var k1_offset = v_offset + k1;
    	      var x1;
    	      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {
    	        x1 = v1[k1_offset + 1];
    	      } else {
    	        x1 = v1[k1_offset - 1] + 1;
    	      }
    	      var y1 = x1 - k1;
    	      while (x1 < text1_length && y1 < text2_length &&
    	             text1.charAt(x1) == text2.charAt(y1)) {
    	        x1++;
    	        y1++;
    	      }
    	      v1[k1_offset] = x1;
    	      if (x1 > text1_length) {
    	        // Ran off the right of the graph.
    	        k1end += 2;
    	      } else if (y1 > text2_length) {
    	        // Ran off the bottom of the graph.
    	        k1start += 2;
    	      } else if (front) {
    	        var k2_offset = v_offset + delta - k1;
    	        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {
    	          // Mirror x2 onto top-left coordinate system.
    	          var x2 = text1_length - v2[k2_offset];
    	          if (x1 >= x2) {
    	            // Overlap detected.
    	            return diff_bisectSplit_(text1, text2, x1, y1);
    	          }
    	        }
    	      }
    	    }

    	    // Walk the reverse path one step.
    	    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {
    	      var k2_offset = v_offset + k2;
    	      var x2;
    	      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {
    	        x2 = v2[k2_offset + 1];
    	      } else {
    	        x2 = v2[k2_offset - 1] + 1;
    	      }
    	      var y2 = x2 - k2;
    	      while (x2 < text1_length && y2 < text2_length &&
    	             text1.charAt(text1_length - x2 - 1) ==
    	             text2.charAt(text2_length - y2 - 1)) {
    	        x2++;
    	        y2++;
    	      }
    	      v2[k2_offset] = x2;
    	      if (x2 > text1_length) {
    	        // Ran off the left of the graph.
    	        k2end += 2;
    	      } else if (y2 > text2_length) {
    	        // Ran off the top of the graph.
    	        k2start += 2;
    	      } else if (!front) {
    	        var k1_offset = v_offset + delta - k2;
    	        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {
    	          var x1 = v1[k1_offset];
    	          var y1 = v_offset + x1 - k1_offset;
    	          // Mirror x2 onto top-left coordinate system.
    	          x2 = text1_length - x2;
    	          if (x1 >= x2) {
    	            // Overlap detected.
    	            return diff_bisectSplit_(text1, text2, x1, y1);
    	          }
    	        }
    	      }
    	    }
    	  }
    	  // Diff took too long and hit the deadline or
    	  // number of diffs equals number of characters, no commonality at all.
    	  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
    	}

    	/**
    	 * Given the location of the 'middle snake', split the diff in two parts
    	 * and recurse.
    	 * @param {string} text1 Old string to be diffed.
    	 * @param {string} text2 New string to be diffed.
    	 * @param {number} x Index of split point in text1.
    	 * @param {number} y Index of split point in text2.
    	 * @return {Array} Array of diff tuples.
    	 */
    	function diff_bisectSplit_(text1, text2, x, y) {
    	  var text1a = text1.substring(0, x);
    	  var text2a = text2.substring(0, y);
    	  var text1b = text1.substring(x);
    	  var text2b = text2.substring(y);

    	  // Compute both diffs serially.
    	  var diffs = diff_main(text1a, text2a);
    	  var diffsb = diff_main(text1b, text2b);

    	  return diffs.concat(diffsb);
    	}

    	/**
    	 * Determine the common prefix of two strings.
    	 * @param {string} text1 First string.
    	 * @param {string} text2 Second string.
    	 * @return {number} The number of characters common to the start of each
    	 *     string.
    	 */
    	function diff_commonPrefix(text1, text2) {
    	  // Quick check for common null cases.
    	  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {
    	    return 0;
    	  }
    	  // Binary search.
    	  // Performance analysis: http://neil.fraser.name/news/2007/10/09/
    	  var pointermin = 0;
    	  var pointermax = Math.min(text1.length, text2.length);
    	  var pointermid = pointermax;
    	  var pointerstart = 0;
    	  while (pointermin < pointermid) {
    	    if (text1.substring(pointerstart, pointermid) ==
    	        text2.substring(pointerstart, pointermid)) {
    	      pointermin = pointermid;
    	      pointerstart = pointermin;
    	    } else {
    	      pointermax = pointermid;
    	    }
    	    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
    	  }
    	  return pointermid;
    	}

    	/**
    	 * Determine the common suffix of two strings.
    	 * @param {string} text1 First string.
    	 * @param {string} text2 Second string.
    	 * @return {number} The number of characters common to the end of each string.
    	 */
    	function diff_commonSuffix(text1, text2) {
    	  // Quick check for common null cases.
    	  if (!text1 || !text2 ||
    	      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {
    	    return 0;
    	  }
    	  // Binary search.
    	  // Performance analysis: http://neil.fraser.name/news/2007/10/09/
    	  var pointermin = 0;
    	  var pointermax = Math.min(text1.length, text2.length);
    	  var pointermid = pointermax;
    	  var pointerend = 0;
    	  while (pointermin < pointermid) {
    	    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==
    	        text2.substring(text2.length - pointermid, text2.length - pointerend)) {
    	      pointermin = pointermid;
    	      pointerend = pointermin;
    	    } else {
    	      pointermax = pointermid;
    	    }
    	    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
    	  }
    	  return pointermid;
    	}

    	/**
    	 * Do the two texts share a substring which is at least half the length of the
    	 * longer text?
    	 * This speedup can produce non-minimal diffs.
    	 * @param {string} text1 First string.
    	 * @param {string} text2 Second string.
    	 * @return {Array.<string>} Five element Array, containing the prefix of
    	 *     text1, the suffix of text1, the prefix of text2, the suffix of
    	 *     text2 and the common middle.  Or null if there was no match.
    	 */
    	function diff_halfMatch_(text1, text2) {
    	  var longtext = text1.length > text2.length ? text1 : text2;
    	  var shorttext = text1.length > text2.length ? text2 : text1;
    	  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {
    	    return null;  // Pointless.
    	  }

    	  /**
    	   * Does a substring of shorttext exist within longtext such that the substring
    	   * is at least half the length of longtext?
    	   * Closure, but does not reference any external variables.
    	   * @param {string} longtext Longer string.
    	   * @param {string} shorttext Shorter string.
    	   * @param {number} i Start index of quarter length substring within longtext.
    	   * @return {Array.<string>} Five element Array, containing the prefix of
    	   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix
    	   *     of shorttext and the common middle.  Or null if there was no match.
    	   * @private
    	   */
    	  function diff_halfMatchI_(longtext, shorttext, i) {
    	    // Start with a 1/4 length substring at position i as a seed.
    	    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));
    	    var j = -1;
    	    var best_common = '';
    	    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;
    	    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {
    	      var prefixLength = diff_commonPrefix(longtext.substring(i),
    	                                           shorttext.substring(j));
    	      var suffixLength = diff_commonSuffix(longtext.substring(0, i),
    	                                           shorttext.substring(0, j));
    	      if (best_common.length < suffixLength + prefixLength) {
    	        best_common = shorttext.substring(j - suffixLength, j) +
    	            shorttext.substring(j, j + prefixLength);
    	        best_longtext_a = longtext.substring(0, i - suffixLength);
    	        best_longtext_b = longtext.substring(i + prefixLength);
    	        best_shorttext_a = shorttext.substring(0, j - suffixLength);
    	        best_shorttext_b = shorttext.substring(j + prefixLength);
    	      }
    	    }
    	    if (best_common.length * 2 >= longtext.length) {
    	      return [best_longtext_a, best_longtext_b,
    	              best_shorttext_a, best_shorttext_b, best_common];
    	    } else {
    	      return null;
    	    }
    	  }

    	  // First check if the second quarter is the seed for a half-match.
    	  var hm1 = diff_halfMatchI_(longtext, shorttext,
    	                             Math.ceil(longtext.length / 4));
    	  // Check again based on the third quarter.
    	  var hm2 = diff_halfMatchI_(longtext, shorttext,
    	                             Math.ceil(longtext.length / 2));
    	  var hm;
    	  if (!hm1 && !hm2) {
    	    return null;
    	  } else if (!hm2) {
    	    hm = hm1;
    	  } else if (!hm1) {
    	    hm = hm2;
    	  } else {
    	    // Both matched.  Select the longest.
    	    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;
    	  }

    	  // A half-match was found, sort out the return data.
    	  var text1_a, text1_b, text2_a, text2_b;
    	  if (text1.length > text2.length) {
    	    text1_a = hm[0];
    	    text1_b = hm[1];
    	    text2_a = hm[2];
    	    text2_b = hm[3];
    	  } else {
    	    text2_a = hm[0];
    	    text2_b = hm[1];
    	    text1_a = hm[2];
    	    text1_b = hm[3];
    	  }
    	  var mid_common = hm[4];
    	  return [text1_a, text1_b, text2_a, text2_b, mid_common];
    	}

    	/**
    	 * Reorder and merge like edit sections.  Merge equalities.
    	 * Any edit section can move as long as it doesn't cross an equality.
    	 * @param {Array} diffs Array of diff tuples.
    	 */
    	function diff_cleanupMerge(diffs) {
    	  diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.
    	  var pointer = 0;
    	  var count_delete = 0;
    	  var count_insert = 0;
    	  var text_delete = '';
    	  var text_insert = '';
    	  var commonlength;
    	  while (pointer < diffs.length) {
    	    switch (diffs[pointer][0]) {
    	      case DIFF_INSERT:
    	        count_insert++;
    	        text_insert += diffs[pointer][1];
    	        pointer++;
    	        break;
    	      case DIFF_DELETE:
    	        count_delete++;
    	        text_delete += diffs[pointer][1];
    	        pointer++;
    	        break;
    	      case DIFF_EQUAL:
    	        // Upon reaching an equality, check for prior redundancies.
    	        if (count_delete + count_insert > 1) {
    	          if (count_delete !== 0 && count_insert !== 0) {
    	            // Factor out any common prefixies.
    	            commonlength = diff_commonPrefix(text_insert, text_delete);
    	            if (commonlength !== 0) {
    	              if ((pointer - count_delete - count_insert) > 0 &&
    	                  diffs[pointer - count_delete - count_insert - 1][0] ==
    	                  DIFF_EQUAL) {
    	                diffs[pointer - count_delete - count_insert - 1][1] +=
    	                    text_insert.substring(0, commonlength);
    	              } else {
    	                diffs.splice(0, 0, [DIFF_EQUAL,
    	                                    text_insert.substring(0, commonlength)]);
    	                pointer++;
    	              }
    	              text_insert = text_insert.substring(commonlength);
    	              text_delete = text_delete.substring(commonlength);
    	            }
    	            // Factor out any common suffixies.
    	            commonlength = diff_commonSuffix(text_insert, text_delete);
    	            if (commonlength !== 0) {
    	              diffs[pointer][1] = text_insert.substring(text_insert.length -
    	                  commonlength) + diffs[pointer][1];
    	              text_insert = text_insert.substring(0, text_insert.length -
    	                  commonlength);
    	              text_delete = text_delete.substring(0, text_delete.length -
    	                  commonlength);
    	            }
    	          }
    	          // Delete the offending records and add the merged ones.
    	          if (count_delete === 0) {
    	            diffs.splice(pointer - count_insert,
    	                count_delete + count_insert, [DIFF_INSERT, text_insert]);
    	          } else if (count_insert === 0) {
    	            diffs.splice(pointer - count_delete,
    	                count_delete + count_insert, [DIFF_DELETE, text_delete]);
    	          } else {
    	            diffs.splice(pointer - count_delete - count_insert,
    	                count_delete + count_insert, [DIFF_DELETE, text_delete],
    	                [DIFF_INSERT, text_insert]);
    	          }
    	          pointer = pointer - count_delete - count_insert +
    	                    (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;
    	        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {
    	          // Merge this equality with the previous one.
    	          diffs[pointer - 1][1] += diffs[pointer][1];
    	          diffs.splice(pointer, 1);
    	        } else {
    	          pointer++;
    	        }
    	        count_insert = 0;
    	        count_delete = 0;
    	        text_delete = '';
    	        text_insert = '';
    	        break;
    	    }
    	  }
    	  if (diffs[diffs.length - 1][1] === '') {
    	    diffs.pop();  // Remove the dummy entry at the end.
    	  }

    	  // Second pass: look for single edits surrounded on both sides by equalities
    	  // which can be shifted sideways to eliminate an equality.
    	  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC
    	  var changes = false;
    	  pointer = 1;
    	  // Intentionally ignore the first and last element (don't need checking).
    	  while (pointer < diffs.length - 1) {
    	    if (diffs[pointer - 1][0] == DIFF_EQUAL &&
    	        diffs[pointer + 1][0] == DIFF_EQUAL) {
    	      // This is a single edit surrounded by equalities.
    	      if (diffs[pointer][1].substring(diffs[pointer][1].length -
    	          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {
    	        // Shift the edit over the previous equality.
    	        diffs[pointer][1] = diffs[pointer - 1][1] +
    	            diffs[pointer][1].substring(0, diffs[pointer][1].length -
    	                                        diffs[pointer - 1][1].length);
    	        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];
    	        diffs.splice(pointer - 1, 1);
    	        changes = true;
    	      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==
    	          diffs[pointer + 1][1]) {
    	        // Shift the edit over the next equality.
    	        diffs[pointer - 1][1] += diffs[pointer + 1][1];
    	        diffs[pointer][1] =
    	            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +
    	            diffs[pointer + 1][1];
    	        diffs.splice(pointer + 1, 1);
    	        changes = true;
    	      }
    	    }
    	    pointer++;
    	  }
    	  // If shifts were made, the diff needs reordering and another shift sweep.
    	  if (changes) {
    	    diff_cleanupMerge(diffs);
    	  }
    	}

    	var diff = diff_main;
    	diff.INSERT = DIFF_INSERT;
    	diff.DELETE = DIFF_DELETE;
    	diff.EQUAL = DIFF_EQUAL;

    	module.exports = diff;

    	/*
    	 * Modify a diff such that the cursor position points to the start of a change:
    	 * E.g.
    	 *   cursor_normalize_diff([[DIFF_EQUAL, 'abc']], 1)
    	 *     => [1, [[DIFF_EQUAL, 'a'], [DIFF_EQUAL, 'bc']]]
    	 *   cursor_normalize_diff([[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xyz']], 2)
    	 *     => [2, [[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xy'], [DIFF_DELETE, 'z']]]
    	 *
    	 * @param {Array} diffs Array of diff tuples
    	 * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!
    	 * @return {Array} A tuple [cursor location in the modified diff, modified diff]
    	 */
    	function cursor_normalize_diff (diffs, cursor_pos) {
    	  if (cursor_pos === 0) {
    	    return [DIFF_EQUAL, diffs];
    	  }
    	  for (var current_pos = 0, i = 0; i < diffs.length; i++) {
    	    var d = diffs[i];
    	    if (d[0] === DIFF_DELETE || d[0] === DIFF_EQUAL) {
    	      var next_pos = current_pos + d[1].length;
    	      if (cursor_pos === next_pos) {
    	        return [i + 1, diffs];
    	      } else if (cursor_pos < next_pos) {
    	        // copy to prevent side effects
    	        diffs = diffs.slice();
    	        // split d into two diff changes
    	        var split_pos = cursor_pos - current_pos;
    	        var d_left = [d[0], d[1].slice(0, split_pos)];
    	        var d_right = [d[0], d[1].slice(split_pos)];
    	        diffs.splice(i, 1, d_left, d_right);
    	        return [i + 1, diffs];
    	      } else {
    	        current_pos = next_pos;
    	      }
    	    }
    	  }
    	  throw new Error('cursor_pos is out of bounds!')
    	}

    	/*
    	 * Modify a diff such that the edit position is "shifted" to the proposed edit location (cursor_position).
    	 *
    	 * Case 1)
    	 *   Check if a naive shift is possible:
    	 *     [0, X], [ 1, Y] -> [ 1, Y], [0, X]    (if X + Y === Y + X)
    	 *     [0, X], [-1, Y] -> [-1, Y], [0, X]    (if X + Y === Y + X) - holds same result
    	 * Case 2)
    	 *   Check if the following shifts are possible:
    	 *     [0, 'pre'], [ 1, 'prefix'] -> [ 1, 'pre'], [0, 'pre'], [ 1, 'fix']
    	 *     [0, 'pre'], [-1, 'prefix'] -> [-1, 'pre'], [0, 'pre'], [-1, 'fix']
    	 *         ^            ^
    	 *         d          d_next
    	 *
    	 * @param {Array} diffs Array of diff tuples
    	 * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!
    	 * @return {Array} Array of diff tuples
    	 */
    	function fix_cursor (diffs, cursor_pos) {
    	  var norm = cursor_normalize_diff(diffs, cursor_pos);
    	  var ndiffs = norm[1];
    	  var cursor_pointer = norm[0];
    	  var d = ndiffs[cursor_pointer];
    	  var d_next = ndiffs[cursor_pointer + 1];

    	  if (d == null) {
    	    // Text was deleted from end of original string,
    	    // cursor is now out of bounds in new string
    	    return diffs;
    	  } else if (d[0] !== DIFF_EQUAL) {
    	    // A modification happened at the cursor location.
    	    // This is the expected outcome, so we can return the original diff.
    	    return diffs;
    	  } else {
    	    if (d_next != null && d[1] + d_next[1] === d_next[1] + d[1]) {
    	      // Case 1)
    	      // It is possible to perform a naive shift
    	      ndiffs.splice(cursor_pointer, 2, d_next, d);
    	      return merge_tuples(ndiffs, cursor_pointer, 2)
    	    } else if (d_next != null && d_next[1].indexOf(d[1]) === 0) {
    	      // Case 2)
    	      // d[1] is a prefix of d_next[1]
    	      // We can assume that d_next[0] !== 0, since d[0] === 0
    	      // Shift edit locations..
    	      ndiffs.splice(cursor_pointer, 2, [d_next[0], d[1]], [0, d[1]]);
    	      var suffix = d_next[1].slice(d[1].length);
    	      if (suffix.length > 0) {
    	        ndiffs.splice(cursor_pointer + 2, 0, [d_next[0], suffix]);
    	      }
    	      return merge_tuples(ndiffs, cursor_pointer, 3)
    	    } else {
    	      // Not possible to perform any modification
    	      return diffs;
    	    }
    	  }
    	}

    	/*
    	 * Check diff did not split surrogate pairs.
    	 * Ex. [0, '\uD83D'], [-1, '\uDC36'], [1, '\uDC2F'] -> [-1, '\uD83D\uDC36'], [1, '\uD83D\uDC2F']
    	 *     '\uD83D\uDC36' === '🐶', '\uD83D\uDC2F' === '🐯'
    	 *
    	 * @param {Array} diffs Array of diff tuples
    	 * @return {Array} Array of diff tuples
    	 */
    	function fix_emoji (diffs) {
    	  var compact = false;
    	  var starts_with_pair_end = function(str) {
    	    return str.charCodeAt(0) >= 0xDC00 && str.charCodeAt(0) <= 0xDFFF;
    	  };
    	  var ends_with_pair_start = function(str) {
    	    return str.charCodeAt(str.length-1) >= 0xD800 && str.charCodeAt(str.length-1) <= 0xDBFF;
    	  };
    	  for (var i = 2; i < diffs.length; i += 1) {
    	    if (diffs[i-2][0] === DIFF_EQUAL && ends_with_pair_start(diffs[i-2][1]) &&
    	        diffs[i-1][0] === DIFF_DELETE && starts_with_pair_end(diffs[i-1][1]) &&
    	        diffs[i][0] === DIFF_INSERT && starts_with_pair_end(diffs[i][1])) {
    	      compact = true;

    	      diffs[i-1][1] = diffs[i-2][1].slice(-1) + diffs[i-1][1];
    	      diffs[i][1] = diffs[i-2][1].slice(-1) + diffs[i][1];

    	      diffs[i-2][1] = diffs[i-2][1].slice(0, -1);
    	    }
    	  }
    	  if (!compact) {
    	    return diffs;
    	  }
    	  var fixed_diffs = [];
    	  for (var i = 0; i < diffs.length; i += 1) {
    	    if (diffs[i][1].length > 0) {
    	      fixed_diffs.push(diffs[i]);
    	    }
    	  }
    	  return fixed_diffs;
    	}

    	/*
    	 * Try to merge tuples with their neigbors in a given range.
    	 * E.g. [0, 'a'], [0, 'b'] -> [0, 'ab']
    	 *
    	 * @param {Array} diffs Array of diff tuples.
    	 * @param {Int} start Position of the first element to merge (diffs[start] is also merged with diffs[start - 1]).
    	 * @param {Int} length Number of consecutive elements to check.
    	 * @return {Array} Array of merged diff tuples.
    	 */
    	function merge_tuples (diffs, start, length) {
    	  // Check from (start-1) to (start+length).
    	  for (var i = start + length - 1; i >= 0 && i >= start - 1; i--) {
    	    if (i + 1 < diffs.length) {
    	      var left_d = diffs[i];
    	      var right_d = diffs[i+1];
    	      if (left_d[0] === right_d[1]) {
    	        diffs.splice(i, 2, [left_d[0], left_d[1] + right_d[1]]);
    	      }
    	    }
    	  }
    	  return diffs;
    	}


    	/***/ }),
    	/* 52 */
    	/***/ (function(module, exports) {

    	exports = module.exports = typeof Object.keys === 'function'
    	  ? Object.keys : shim;

    	exports.shim = shim;
    	function shim (obj) {
    	  var keys = [];
    	  for (var key in obj) keys.push(key);
    	  return keys;
    	}


    	/***/ }),
    	/* 53 */
    	/***/ (function(module, exports) {

    	var supportsArgumentsClass = (function(){
    	  return Object.prototype.toString.call(arguments)
    	})() == '[object Arguments]';

    	exports = module.exports = supportsArgumentsClass ? supported : unsupported;

    	exports.supported = supported;
    	function supported(object) {
    	  return Object.prototype.toString.call(object) == '[object Arguments]';
    	}
    	exports.unsupported = unsupported;
    	function unsupported(object){
    	  return object &&
    	    typeof object == 'object' &&
    	    typeof object.length == 'number' &&
    	    Object.prototype.hasOwnProperty.call(object, 'callee') &&
    	    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
    	    false;
    	}

    	/***/ }),
    	/* 54 */
    	/***/ (function(module, exports) {

    	var has = Object.prototype.hasOwnProperty
    	  , prefix = '~';

    	/**
    	 * Constructor to create a storage for our `EE` objects.
    	 * An `Events` instance is a plain object whose properties are event names.
    	 *
    	 * @constructor
    	 * @api private
    	 */
    	function Events() {}

    	//
    	// We try to not inherit from `Object.prototype`. In some engines creating an
    	// instance in this way is faster than calling `Object.create(null)` directly.
    	// If `Object.create(null)` is not supported we prefix the event names with a
    	// character to make sure that the built-in object properties are not
    	// overridden or used as an attack vector.
    	//
    	if (Object.create) {
    	  Events.prototype = Object.create(null);

    	  //
    	  // This hack is needed because the `__proto__` property is still inherited in
    	  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
    	  //
    	  if (!new Events().__proto__) prefix = false;
    	}

    	/**
    	 * Representation of a single event listener.
    	 *
    	 * @param {Function} fn The listener function.
    	 * @param {Mixed} context The context to invoke the listener with.
    	 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
    	 * @constructor
    	 * @api private
    	 */
    	function EE(fn, context, once) {
    	  this.fn = fn;
    	  this.context = context;
    	  this.once = once || false;
    	}

    	/**
    	 * Minimal `EventEmitter` interface that is molded against the Node.js
    	 * `EventEmitter` interface.
    	 *
    	 * @constructor
    	 * @api public
    	 */
    	function EventEmitter() {
    	  this._events = new Events();
    	  this._eventsCount = 0;
    	}

    	/**
    	 * Return an array listing the events for which the emitter has registered
    	 * listeners.
    	 *
    	 * @returns {Array}
    	 * @api public
    	 */
    	EventEmitter.prototype.eventNames = function eventNames() {
    	  var names = []
    	    , events
    	    , name;

    	  if (this._eventsCount === 0) return names;

    	  for (name in (events = this._events)) {
    	    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
    	  }

    	  if (Object.getOwnPropertySymbols) {
    	    return names.concat(Object.getOwnPropertySymbols(events));
    	  }

    	  return names;
    	};

    	/**
    	 * Return the listeners registered for a given event.
    	 *
    	 * @param {String|Symbol} event The event name.
    	 * @param {Boolean} exists Only check if there are listeners.
    	 * @returns {Array|Boolean}
    	 * @api public
    	 */
    	EventEmitter.prototype.listeners = function listeners(event, exists) {
    	  var evt = prefix ? prefix + event : event
    	    , available = this._events[evt];

    	  if (exists) return !!available;
    	  if (!available) return [];
    	  if (available.fn) return [available.fn];

    	  for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {
    	    ee[i] = available[i].fn;
    	  }

    	  return ee;
    	};

    	/**
    	 * Calls each of the listeners registered for a given event.
    	 *
    	 * @param {String|Symbol} event The event name.
    	 * @returns {Boolean} `true` if the event had listeners, else `false`.
    	 * @api public
    	 */
    	EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
    	  var evt = prefix ? prefix + event : event;

    	  if (!this._events[evt]) return false;

    	  var listeners = this._events[evt]
    	    , len = arguments.length
    	    , args
    	    , i;

    	  if (listeners.fn) {
    	    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    	    switch (len) {
    	      case 1: return listeners.fn.call(listeners.context), true;
    	      case 2: return listeners.fn.call(listeners.context, a1), true;
    	      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
    	      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
    	      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
    	      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    	    }

    	    for (i = 1, args = new Array(len -1); i < len; i++) {
    	      args[i - 1] = arguments[i];
    	    }

    	    listeners.fn.apply(listeners.context, args);
    	  } else {
    	    var length = listeners.length
    	      , j;

    	    for (i = 0; i < length; i++) {
    	      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

    	      switch (len) {
    	        case 1: listeners[i].fn.call(listeners[i].context); break;
    	        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
    	        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
    	        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
    	        default:
    	          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
    	            args[j - 1] = arguments[j];
    	          }

    	          listeners[i].fn.apply(listeners[i].context, args);
    	      }
    	    }
    	  }

    	  return true;
    	};

    	/**
    	 * Add a listener for a given event.
    	 *
    	 * @param {String|Symbol} event The event name.
    	 * @param {Function} fn The listener function.
    	 * @param {Mixed} [context=this] The context to invoke the listener with.
    	 * @returns {EventEmitter} `this`.
    	 * @api public
    	 */
    	EventEmitter.prototype.on = function on(event, fn, context) {
    	  var listener = new EE(fn, context || this)
    	    , evt = prefix ? prefix + event : event;

    	  if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;
    	  else if (!this._events[evt].fn) this._events[evt].push(listener);
    	  else this._events[evt] = [this._events[evt], listener];

    	  return this;
    	};

    	/**
    	 * Add a one-time listener for a given event.
    	 *
    	 * @param {String|Symbol} event The event name.
    	 * @param {Function} fn The listener function.
    	 * @param {Mixed} [context=this] The context to invoke the listener with.
    	 * @returns {EventEmitter} `this`.
    	 * @api public
    	 */
    	EventEmitter.prototype.once = function once(event, fn, context) {
    	  var listener = new EE(fn, context || this, true)
    	    , evt = prefix ? prefix + event : event;

    	  if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;
    	  else if (!this._events[evt].fn) this._events[evt].push(listener);
    	  else this._events[evt] = [this._events[evt], listener];

    	  return this;
    	};

    	/**
    	 * Remove the listeners of a given event.
    	 *
    	 * @param {String|Symbol} event The event name.
    	 * @param {Function} fn Only remove the listeners that match this function.
    	 * @param {Mixed} context Only remove the listeners that have this context.
    	 * @param {Boolean} once Only remove one-time listeners.
    	 * @returns {EventEmitter} `this`.
    	 * @api public
    	 */
    	EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
    	  var evt = prefix ? prefix + event : event;

    	  if (!this._events[evt]) return this;
    	  if (!fn) {
    	    if (--this._eventsCount === 0) this._events = new Events();
    	    else delete this._events[evt];
    	    return this;
    	  }

    	  var listeners = this._events[evt];

    	  if (listeners.fn) {
    	    if (
    	         listeners.fn === fn
    	      && (!once || listeners.once)
    	      && (!context || listeners.context === context)
    	    ) {
    	      if (--this._eventsCount === 0) this._events = new Events();
    	      else delete this._events[evt];
    	    }
    	  } else {
    	    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
    	      if (
    	           listeners[i].fn !== fn
    	        || (once && !listeners[i].once)
    	        || (context && listeners[i].context !== context)
    	      ) {
    	        events.push(listeners[i]);
    	      }
    	    }

    	    //
    	    // Reset the array, or remove it completely if we have no more listeners.
    	    //
    	    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
    	    else if (--this._eventsCount === 0) this._events = new Events();
    	    else delete this._events[evt];
    	  }

    	  return this;
    	};

    	/**
    	 * Remove all listeners, or those of the specified event.
    	 *
    	 * @param {String|Symbol} [event] The event name.
    	 * @returns {EventEmitter} `this`.
    	 * @api public
    	 */
    	EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
    	  var evt;

    	  if (event) {
    	    evt = prefix ? prefix + event : event;
    	    if (this._events[evt]) {
    	      if (--this._eventsCount === 0) this._events = new Events();
    	      else delete this._events[evt];
    	    }
    	  } else {
    	    this._events = new Events();
    	    this._eventsCount = 0;
    	  }

    	  return this;
    	};

    	//
    	// Alias methods names because people roll like that.
    	//
    	EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    	EventEmitter.prototype.addListener = EventEmitter.prototype.on;

    	//
    	// This function doesn't apply anymore.
    	//
    	EventEmitter.prototype.setMaxListeners = function setMaxListeners() {
    	  return this;
    	};

    	//
    	// Expose the prefix.
    	//
    	EventEmitter.prefixed = prefix;

    	//
    	// Allow `EventEmitter` to be imported as module namespace.
    	//
    	EventEmitter.EventEmitter = EventEmitter;

    	//
    	// Expose the module.
    	//
    	if ('undefined' !== typeof module) {
    	  module.exports = EventEmitter;
    	}


    	/***/ }),
    	/* 55 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.matchText = exports.matchSpacing = exports.matchNewline = exports.matchBlot = exports.matchAttributor = exports.default = undefined;

    	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

    	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _extend2 = __webpack_require__(3);

    	var _extend3 = _interopRequireDefault(_extend2);

    	var _quillDelta = __webpack_require__(2);

    	var _quillDelta2 = _interopRequireDefault(_quillDelta);

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _quill = __webpack_require__(5);

    	var _quill2 = _interopRequireDefault(_quill);

    	var _logger = __webpack_require__(10);

    	var _logger2 = _interopRequireDefault(_logger);

    	var _module = __webpack_require__(9);

    	var _module2 = _interopRequireDefault(_module);

    	var _align = __webpack_require__(36);

    	var _background = __webpack_require__(37);

    	var _code = __webpack_require__(13);

    	var _code2 = _interopRequireDefault(_code);

    	var _color = __webpack_require__(26);

    	var _direction = __webpack_require__(38);

    	var _font = __webpack_require__(39);

    	var _size = __webpack_require__(40);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var debug = (0, _logger2.default)('quill:clipboard');

    	var DOM_KEY = '__ql-matcher';

    	var CLIPBOARD_CONFIG = [[Node.TEXT_NODE, matchText], [Node.TEXT_NODE, matchNewline], ['br', matchBreak], [Node.ELEMENT_NODE, matchNewline], [Node.ELEMENT_NODE, matchBlot], [Node.ELEMENT_NODE, matchSpacing], [Node.ELEMENT_NODE, matchAttributor], [Node.ELEMENT_NODE, matchStyles], ['li', matchIndent], ['b', matchAlias.bind(matchAlias, 'bold')], ['i', matchAlias.bind(matchAlias, 'italic')], ['style', matchIgnore]];

    	var ATTRIBUTE_ATTRIBUTORS = [_align.AlignAttribute, _direction.DirectionAttribute].reduce(function (memo, attr) {
    	  memo[attr.keyName] = attr;
    	  return memo;
    	}, {});

    	var STYLE_ATTRIBUTORS = [_align.AlignStyle, _background.BackgroundStyle, _color.ColorStyle, _direction.DirectionStyle, _font.FontStyle, _size.SizeStyle].reduce(function (memo, attr) {
    	  memo[attr.keyName] = attr;
    	  return memo;
    	}, {});

    	var Clipboard = function (_Module) {
    	  _inherits(Clipboard, _Module);

    	  function Clipboard(quill, options) {
    	    _classCallCheck(this, Clipboard);

    	    var _this = _possibleConstructorReturn(this, (Clipboard.__proto__ || Object.getPrototypeOf(Clipboard)).call(this, quill, options));

    	    _this.quill.root.addEventListener('paste', _this.onPaste.bind(_this));
    	    _this.container = _this.quill.addContainer('ql-clipboard');
    	    _this.container.setAttribute('contenteditable', true);
    	    _this.container.setAttribute('tabindex', -1);
    	    _this.matchers = [];
    	    CLIPBOARD_CONFIG.concat(_this.options.matchers).forEach(function (_ref) {
    	      var _ref2 = _slicedToArray(_ref, 2),
    	          selector = _ref2[0],
    	          matcher = _ref2[1];

    	      if (!options.matchVisual && matcher === matchSpacing) return;
    	      _this.addMatcher(selector, matcher);
    	    });
    	    return _this;
    	  }

    	  _createClass(Clipboard, [{
    	    key: 'addMatcher',
    	    value: function addMatcher(selector, matcher) {
    	      this.matchers.push([selector, matcher]);
    	    }
    	  }, {
    	    key: 'convert',
    	    value: function convert(html) {
    	      if (typeof html === 'string') {
    	        this.container.innerHTML = html.replace(/\>\r?\n +\</g, '><'); // Remove spaces between tags
    	        return this.convert();
    	      }
    	      var formats = this.quill.getFormat(this.quill.selection.savedRange.index);
    	      if (formats[_code2.default.blotName]) {
    	        var text = this.container.innerText;
    	        this.container.innerHTML = '';
    	        return new _quillDelta2.default().insert(text, _defineProperty({}, _code2.default.blotName, formats[_code2.default.blotName]));
    	      }

    	      var _prepareMatching = this.prepareMatching(),
    	          _prepareMatching2 = _slicedToArray(_prepareMatching, 2),
    	          elementMatchers = _prepareMatching2[0],
    	          textMatchers = _prepareMatching2[1];

    	      var delta = traverse(this.container, elementMatchers, textMatchers);
    	      // Remove trailing newline
    	      if (deltaEndsWith(delta, '\n') && delta.ops[delta.ops.length - 1].attributes == null) {
    	        delta = delta.compose(new _quillDelta2.default().retain(delta.length() - 1).delete(1));
    	      }
    	      debug.log('convert', this.container.innerHTML, delta);
    	      this.container.innerHTML = '';
    	      return delta;
    	    }
    	  }, {
    	    key: 'dangerouslyPasteHTML',
    	    value: function dangerouslyPasteHTML(index, html) {
    	      var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _quill2.default.sources.API;

    	      if (typeof index === 'string') {
    	        this.quill.setContents(this.convert(index), html);
    	        this.quill.setSelection(0, _quill2.default.sources.SILENT);
    	      } else {
    	        var paste = this.convert(html);
    	        this.quill.updateContents(new _quillDelta2.default().retain(index).concat(paste), source);
    	        this.quill.setSelection(index + paste.length(), _quill2.default.sources.SILENT);
    	      }
    	    }
    	  }, {
    	    key: 'onPaste',
    	    value: function onPaste(e) {
    	      var _this2 = this;

    	      if (e.defaultPrevented || !this.quill.isEnabled()) return;
    	      var range = this.quill.getSelection();
    	      var delta = new _quillDelta2.default().retain(range.index);
    	      var scrollTop = this.quill.scrollingContainer.scrollTop;
    	      this.container.focus();
    	      this.quill.selection.update(_quill2.default.sources.SILENT);
    	      setTimeout(function () {
    	        delta = delta.concat(_this2.convert()).delete(range.length);
    	        _this2.quill.updateContents(delta, _quill2.default.sources.USER);
    	        // range.length contributes to delta.length()
    	        _this2.quill.setSelection(delta.length() - range.length, _quill2.default.sources.SILENT);
    	        _this2.quill.scrollingContainer.scrollTop = scrollTop;
    	        _this2.quill.focus();
    	      }, 1);
    	    }
    	  }, {
    	    key: 'prepareMatching',
    	    value: function prepareMatching() {
    	      var _this3 = this;

    	      var elementMatchers = [],
    	          textMatchers = [];
    	      this.matchers.forEach(function (pair) {
    	        var _pair = _slicedToArray(pair, 2),
    	            selector = _pair[0],
    	            matcher = _pair[1];

    	        switch (selector) {
    	          case Node.TEXT_NODE:
    	            textMatchers.push(matcher);
    	            break;
    	          case Node.ELEMENT_NODE:
    	            elementMatchers.push(matcher);
    	            break;
    	          default:
    	            [].forEach.call(_this3.container.querySelectorAll(selector), function (node) {
    	              // TODO use weakmap
    	              node[DOM_KEY] = node[DOM_KEY] || [];
    	              node[DOM_KEY].push(matcher);
    	            });
    	            break;
    	        }
    	      });
    	      return [elementMatchers, textMatchers];
    	    }
    	  }]);

    	  return Clipboard;
    	}(_module2.default);

    	Clipboard.DEFAULTS = {
    	  matchers: [],
    	  matchVisual: true
    	};

    	function applyFormat(delta, format, value) {
    	  if ((typeof format === 'undefined' ? 'undefined' : _typeof(format)) === 'object') {
    	    return Object.keys(format).reduce(function (delta, key) {
    	      return applyFormat(delta, key, format[key]);
    	    }, delta);
    	  } else {
    	    return delta.reduce(function (delta, op) {
    	      if (op.attributes && op.attributes[format]) {
    	        return delta.push(op);
    	      } else {
    	        return delta.insert(op.insert, (0, _extend3.default)({}, _defineProperty({}, format, value), op.attributes));
    	      }
    	    }, new _quillDelta2.default());
    	  }
    	}

    	function computeStyle(node) {
    	  if (node.nodeType !== Node.ELEMENT_NODE) return {};
    	  var DOM_KEY = '__ql-computed-style';
    	  return node[DOM_KEY] || (node[DOM_KEY] = window.getComputedStyle(node));
    	}

    	function deltaEndsWith(delta, text) {
    	  var endText = "";
    	  for (var i = delta.ops.length - 1; i >= 0 && endText.length < text.length; --i) {
    	    var op = delta.ops[i];
    	    if (typeof op.insert !== 'string') break;
    	    endText = op.insert + endText;
    	  }
    	  return endText.slice(-1 * text.length) === text;
    	}

    	function isLine(node) {
    	  if (node.childNodes.length === 0) return false; // Exclude embed blocks
    	  var style = computeStyle(node);
    	  return ['block', 'list-item'].indexOf(style.display) > -1;
    	}

    	function traverse(node, elementMatchers, textMatchers) {
    	  // Post-order
    	  if (node.nodeType === node.TEXT_NODE) {
    	    return textMatchers.reduce(function (delta, matcher) {
    	      return matcher(node, delta);
    	    }, new _quillDelta2.default());
    	  } else if (node.nodeType === node.ELEMENT_NODE) {
    	    return [].reduce.call(node.childNodes || [], function (delta, childNode) {
    	      var childrenDelta = traverse(childNode, elementMatchers, textMatchers);
    	      if (childNode.nodeType === node.ELEMENT_NODE) {
    	        childrenDelta = elementMatchers.reduce(function (childrenDelta, matcher) {
    	          return matcher(childNode, childrenDelta);
    	        }, childrenDelta);
    	        childrenDelta = (childNode[DOM_KEY] || []).reduce(function (childrenDelta, matcher) {
    	          return matcher(childNode, childrenDelta);
    	        }, childrenDelta);
    	      }
    	      return delta.concat(childrenDelta);
    	    }, new _quillDelta2.default());
    	  } else {
    	    return new _quillDelta2.default();
    	  }
    	}

    	function matchAlias(format, node, delta) {
    	  return applyFormat(delta, format, true);
    	}

    	function matchAttributor(node, delta) {
    	  var attributes = _parchment2.default.Attributor.Attribute.keys(node);
    	  var classes = _parchment2.default.Attributor.Class.keys(node);
    	  var styles = _parchment2.default.Attributor.Style.keys(node);
    	  var formats = {};
    	  attributes.concat(classes).concat(styles).forEach(function (name) {
    	    var attr = _parchment2.default.query(name, _parchment2.default.Scope.ATTRIBUTE);
    	    if (attr != null) {
    	      formats[attr.attrName] = attr.value(node);
    	      if (formats[attr.attrName]) return;
    	    }
    	    attr = ATTRIBUTE_ATTRIBUTORS[name];
    	    if (attr != null && (attr.attrName === name || attr.keyName === name)) {
    	      formats[attr.attrName] = attr.value(node) || undefined;
    	    }
    	    attr = STYLE_ATTRIBUTORS[name];
    	    if (attr != null && (attr.attrName === name || attr.keyName === name)) {
    	      attr = STYLE_ATTRIBUTORS[name];
    	      formats[attr.attrName] = attr.value(node) || undefined;
    	    }
    	  });
    	  if (Object.keys(formats).length > 0) {
    	    delta = applyFormat(delta, formats);
    	  }
    	  return delta;
    	}

    	function matchBlot(node, delta) {
    	  var match = _parchment2.default.query(node);
    	  if (match == null) return delta;
    	  if (match.prototype instanceof _parchment2.default.Embed) {
    	    var embed = {};
    	    var value = match.value(node);
    	    if (value != null) {
    	      embed[match.blotName] = value;
    	      delta = new _quillDelta2.default().insert(embed, match.formats(node));
    	    }
    	  } else if (typeof match.formats === 'function') {
    	    delta = applyFormat(delta, match.blotName, match.formats(node));
    	  }
    	  return delta;
    	}

    	function matchBreak(node, delta) {
    	  if (!deltaEndsWith(delta, '\n')) {
    	    delta.insert('\n');
    	  }
    	  return delta;
    	}

    	function matchIgnore() {
    	  return new _quillDelta2.default();
    	}

    	function matchIndent(node, delta) {
    	  var match = _parchment2.default.query(node);
    	  if (match == null || match.blotName !== 'list-item' || !deltaEndsWith(delta, '\n')) {
    	    return delta;
    	  }
    	  var indent = -1,
    	      parent = node.parentNode;
    	  while (!parent.classList.contains('ql-clipboard')) {
    	    if ((_parchment2.default.query(parent) || {}).blotName === 'list') {
    	      indent += 1;
    	    }
    	    parent = parent.parentNode;
    	  }
    	  if (indent <= 0) return delta;
    	  return delta.compose(new _quillDelta2.default().retain(delta.length() - 1).retain(1, { indent: indent }));
    	}

    	function matchNewline(node, delta) {
    	  if (!deltaEndsWith(delta, '\n')) {
    	    if (isLine(node) || delta.length() > 0 && node.nextSibling && isLine(node.nextSibling)) {
    	      delta.insert('\n');
    	    }
    	  }
    	  return delta;
    	}

    	function matchSpacing(node, delta) {
    	  if (isLine(node) && node.nextElementSibling != null && !deltaEndsWith(delta, '\n\n')) {
    	    var nodeHeight = node.offsetHeight + parseFloat(computeStyle(node).marginTop) + parseFloat(computeStyle(node).marginBottom);
    	    if (node.nextElementSibling.offsetTop > node.offsetTop + nodeHeight * 1.5) {
    	      delta.insert('\n');
    	    }
    	  }
    	  return delta;
    	}

    	function matchStyles(node, delta) {
    	  var formats = {};
    	  var style = node.style || {};
    	  if (style.fontStyle && computeStyle(node).fontStyle === 'italic') {
    	    formats.italic = true;
    	  }
    	  if (style.fontWeight && (computeStyle(node).fontWeight.startsWith('bold') || parseInt(computeStyle(node).fontWeight) >= 700)) {
    	    formats.bold = true;
    	  }
    	  if (Object.keys(formats).length > 0) {
    	    delta = applyFormat(delta, formats);
    	  }
    	  if (parseFloat(style.textIndent || 0) > 0) {
    	    // Could be 0.5in
    	    delta = new _quillDelta2.default().insert('\t').concat(delta);
    	  }
    	  return delta;
    	}

    	function matchText(node, delta) {
    	  var text = node.data;
    	  // Word represents empty line with <o:p>&nbsp;</o:p>
    	  if (node.parentNode.tagName === 'O:P') {
    	    return delta.insert(text.trim());
    	  }
    	  if (text.trim().length === 0 && node.parentNode.classList.contains('ql-clipboard')) {
    	    return delta;
    	  }
    	  if (!computeStyle(node.parentNode).whiteSpace.startsWith('pre')) {
    	    // eslint-disable-next-line func-style
    	    var replacer = function replacer(collapse, match) {
    	      match = match.replace(/[^\u00a0]/g, ''); // \u00a0 is nbsp;
    	      return match.length < 1 && collapse ? ' ' : match;
    	    };
    	    text = text.replace(/\r\n/g, ' ').replace(/\n/g, ' ');
    	    text = text.replace(/\s\s+/g, replacer.bind(replacer, true)); // collapse whitespace
    	    if (node.previousSibling == null && isLine(node.parentNode) || node.previousSibling != null && isLine(node.previousSibling)) {
    	      text = text.replace(/^\s+/, replacer.bind(replacer, false));
    	    }
    	    if (node.nextSibling == null && isLine(node.parentNode) || node.nextSibling != null && isLine(node.nextSibling)) {
    	      text = text.replace(/\s+$/, replacer.bind(replacer, false));
    	    }
    	  }
    	  return delta.insert(text);
    	}

    	exports.default = Clipboard;
    	exports.matchAttributor = matchAttributor;
    	exports.matchBlot = matchBlot;
    	exports.matchNewline = matchNewline;
    	exports.matchSpacing = matchSpacing;
    	exports.matchText = matchText;

    	/***/ }),
    	/* 56 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _inline = __webpack_require__(6);

    	var _inline2 = _interopRequireDefault(_inline);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Bold = function (_Inline) {
    	  _inherits(Bold, _Inline);

    	  function Bold() {
    	    _classCallCheck(this, Bold);

    	    return _possibleConstructorReturn(this, (Bold.__proto__ || Object.getPrototypeOf(Bold)).apply(this, arguments));
    	  }

    	  _createClass(Bold, [{
    	    key: 'optimize',
    	    value: function optimize(context) {
    	      _get(Bold.prototype.__proto__ || Object.getPrototypeOf(Bold.prototype), 'optimize', this).call(this, context);
    	      if (this.domNode.tagName !== this.statics.tagName[0]) {
    	        this.replaceWith(this.statics.blotName);
    	      }
    	    }
    	  }], [{
    	    key: 'create',
    	    value: function create() {
    	      return _get(Bold.__proto__ || Object.getPrototypeOf(Bold), 'create', this).call(this);
    	    }
    	  }, {
    	    key: 'formats',
    	    value: function formats() {
    	      return true;
    	    }
    	  }]);

    	  return Bold;
    	}(_inline2.default);

    	Bold.blotName = 'bold';
    	Bold.tagName = ['STRONG', 'B'];

    	exports.default = Bold;

    	/***/ }),
    	/* 57 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.addControls = exports.default = undefined;

    	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _quillDelta = __webpack_require__(2);

    	var _quillDelta2 = _interopRequireDefault(_quillDelta);

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _quill = __webpack_require__(5);

    	var _quill2 = _interopRequireDefault(_quill);

    	var _logger = __webpack_require__(10);

    	var _logger2 = _interopRequireDefault(_logger);

    	var _module = __webpack_require__(9);

    	var _module2 = _interopRequireDefault(_module);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var debug = (0, _logger2.default)('quill:toolbar');

    	var Toolbar = function (_Module) {
    	  _inherits(Toolbar, _Module);

    	  function Toolbar(quill, options) {
    	    _classCallCheck(this, Toolbar);

    	    var _this = _possibleConstructorReturn(this, (Toolbar.__proto__ || Object.getPrototypeOf(Toolbar)).call(this, quill, options));

    	    if (Array.isArray(_this.options.container)) {
    	      var container = document.createElement('div');
    	      addControls(container, _this.options.container);
    	      quill.container.parentNode.insertBefore(container, quill.container);
    	      _this.container = container;
    	    } else if (typeof _this.options.container === 'string') {
    	      _this.container = document.querySelector(_this.options.container);
    	    } else {
    	      _this.container = _this.options.container;
    	    }
    	    if (!(_this.container instanceof HTMLElement)) {
    	      var _ret;

    	      return _ret = debug.error('Container required for toolbar', _this.options), _possibleConstructorReturn(_this, _ret);
    	    }
    	    _this.container.classList.add('ql-toolbar');
    	    _this.controls = [];
    	    _this.handlers = {};
    	    Object.keys(_this.options.handlers).forEach(function (format) {
    	      _this.addHandler(format, _this.options.handlers[format]);
    	    });
    	    [].forEach.call(_this.container.querySelectorAll('button, select'), function (input) {
    	      _this.attach(input);
    	    });
    	    _this.quill.on(_quill2.default.events.EDITOR_CHANGE, function (type, range) {
    	      if (type === _quill2.default.events.SELECTION_CHANGE) {
    	        _this.update(range);
    	      }
    	    });
    	    _this.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, function () {
    	      var _this$quill$selection = _this.quill.selection.getRange(),
    	          _this$quill$selection2 = _slicedToArray(_this$quill$selection, 1),
    	          range = _this$quill$selection2[0]; // quill.getSelection triggers update


    	      _this.update(range);
    	    });
    	    return _this;
    	  }

    	  _createClass(Toolbar, [{
    	    key: 'addHandler',
    	    value: function addHandler(format, handler) {
    	      this.handlers[format] = handler;
    	    }
    	  }, {
    	    key: 'attach',
    	    value: function attach(input) {
    	      var _this2 = this;

    	      var format = [].find.call(input.classList, function (className) {
    	        return className.indexOf('ql-') === 0;
    	      });
    	      if (!format) return;
    	      format = format.slice('ql-'.length);
    	      if (input.tagName === 'BUTTON') {
    	        input.setAttribute('type', 'button');
    	      }
    	      if (this.handlers[format] == null) {
    	        if (this.quill.scroll.whitelist != null && this.quill.scroll.whitelist[format] == null) {
    	          debug.warn('ignoring attaching to disabled format', format, input);
    	          return;
    	        }
    	        if (_parchment2.default.query(format) == null) {
    	          debug.warn('ignoring attaching to nonexistent format', format, input);
    	          return;
    	        }
    	      }
    	      var eventName = input.tagName === 'SELECT' ? 'change' : 'click';
    	      input.addEventListener(eventName, function (e) {
    	        var value = void 0;
    	        if (input.tagName === 'SELECT') {
    	          if (input.selectedIndex < 0) return;
    	          var selected = input.options[input.selectedIndex];
    	          if (selected.hasAttribute('selected')) {
    	            value = false;
    	          } else {
    	            value = selected.value || false;
    	          }
    	        } else {
    	          if (input.classList.contains('ql-active')) {
    	            value = false;
    	          } else {
    	            value = input.value || !input.hasAttribute('value');
    	          }
    	          e.preventDefault();
    	        }
    	        _this2.quill.focus();

    	        var _quill$selection$getR = _this2.quill.selection.getRange(),
    	            _quill$selection$getR2 = _slicedToArray(_quill$selection$getR, 1),
    	            range = _quill$selection$getR2[0];

    	        if (_this2.handlers[format] != null) {
    	          _this2.handlers[format].call(_this2, value);
    	        } else if (_parchment2.default.query(format).prototype instanceof _parchment2.default.Embed) {
    	          value = prompt('Enter ' + format);
    	          if (!value) return;
    	          _this2.quill.updateContents(new _quillDelta2.default().retain(range.index).delete(range.length).insert(_defineProperty({}, format, value)), _quill2.default.sources.USER);
    	        } else {
    	          _this2.quill.format(format, value, _quill2.default.sources.USER);
    	        }
    	        _this2.update(range);
    	      });
    	      // TODO use weakmap
    	      this.controls.push([format, input]);
    	    }
    	  }, {
    	    key: 'update',
    	    value: function update(range) {
    	      var formats = range == null ? {} : this.quill.getFormat(range);
    	      this.controls.forEach(function (pair) {
    	        var _pair = _slicedToArray(pair, 2),
    	            format = _pair[0],
    	            input = _pair[1];

    	        if (input.tagName === 'SELECT') {
    	          var option = void 0;
    	          if (range == null) {
    	            option = null;
    	          } else if (formats[format] == null) {
    	            option = input.querySelector('option[selected]');
    	          } else if (!Array.isArray(formats[format])) {
    	            var value = formats[format];
    	            if (typeof value === 'string') {
    	              value = value.replace(/\"/g, '\\"');
    	            }
    	            option = input.querySelector('option[value="' + value + '"]');
    	          }
    	          if (option == null) {
    	            input.value = ''; // TODO make configurable?
    	            input.selectedIndex = -1;
    	          } else {
    	            option.selected = true;
    	          }
    	        } else {
    	          if (range == null) {
    	            input.classList.remove('ql-active');
    	          } else if (input.hasAttribute('value')) {
    	            // both being null should match (default values)
    	            // '1' should match with 1 (headers)
    	            var isActive = formats[format] === input.getAttribute('value') || formats[format] != null && formats[format].toString() === input.getAttribute('value') || formats[format] == null && !input.getAttribute('value');
    	            input.classList.toggle('ql-active', isActive);
    	          } else {
    	            input.classList.toggle('ql-active', formats[format] != null);
    	          }
    	        }
    	      });
    	    }
    	  }]);

    	  return Toolbar;
    	}(_module2.default);

    	Toolbar.DEFAULTS = {};

    	function addButton(container, format, value) {
    	  var input = document.createElement('button');
    	  input.setAttribute('type', 'button');
    	  input.classList.add('ql-' + format);
    	  if (value != null) {
    	    input.value = value;
    	  }
    	  container.appendChild(input);
    	}

    	function addControls(container, groups) {
    	  if (!Array.isArray(groups[0])) {
    	    groups = [groups];
    	  }
    	  groups.forEach(function (controls) {
    	    var group = document.createElement('span');
    	    group.classList.add('ql-formats');
    	    controls.forEach(function (control) {
    	      if (typeof control === 'string') {
    	        addButton(group, control);
    	      } else {
    	        var format = Object.keys(control)[0];
    	        var value = control[format];
    	        if (Array.isArray(value)) {
    	          addSelect(group, format, value);
    	        } else {
    	          addButton(group, format, value);
    	        }
    	      }
    	    });
    	    container.appendChild(group);
    	  });
    	}

    	function addSelect(container, format, values) {
    	  var input = document.createElement('select');
    	  input.classList.add('ql-' + format);
    	  values.forEach(function (value) {
    	    var option = document.createElement('option');
    	    if (value !== false) {
    	      option.setAttribute('value', value);
    	    } else {
    	      option.setAttribute('selected', 'selected');
    	    }
    	    input.appendChild(option);
    	  });
    	  container.appendChild(input);
    	}

    	Toolbar.DEFAULTS = {
    	  container: null,
    	  handlers: {
    	    clean: function clean() {
    	      var _this3 = this;

    	      var range = this.quill.getSelection();
    	      if (range == null) return;
    	      if (range.length == 0) {
    	        var formats = this.quill.getFormat();
    	        Object.keys(formats).forEach(function (name) {
    	          // Clean functionality in existing apps only clean inline formats
    	          if (_parchment2.default.query(name, _parchment2.default.Scope.INLINE) != null) {
    	            _this3.quill.format(name, false);
    	          }
    	        });
    	      } else {
    	        this.quill.removeFormat(range, _quill2.default.sources.USER);
    	      }
    	    },
    	    direction: function direction(value) {
    	      var align = this.quill.getFormat()['align'];
    	      if (value === 'rtl' && align == null) {
    	        this.quill.format('align', 'right', _quill2.default.sources.USER);
    	      } else if (!value && align === 'right') {
    	        this.quill.format('align', false, _quill2.default.sources.USER);
    	      }
    	      this.quill.format('direction', value, _quill2.default.sources.USER);
    	    },
    	    indent: function indent(value) {
    	      var range = this.quill.getSelection();
    	      var formats = this.quill.getFormat(range);
    	      var indent = parseInt(formats.indent || 0);
    	      if (value === '+1' || value === '-1') {
    	        var modifier = value === '+1' ? 1 : -1;
    	        if (formats.direction === 'rtl') modifier *= -1;
    	        this.quill.format('indent', indent + modifier, _quill2.default.sources.USER);
    	      }
    	    },
    	    link: function link(value) {
    	      if (value === true) {
    	        value = prompt('Enter link URL:');
    	      }
    	      this.quill.format('link', value, _quill2.default.sources.USER);
    	    },
    	    list: function list(value) {
    	      var range = this.quill.getSelection();
    	      var formats = this.quill.getFormat(range);
    	      if (value === 'check') {
    	        if (formats['list'] === 'checked' || formats['list'] === 'unchecked') {
    	          this.quill.format('list', false, _quill2.default.sources.USER);
    	        } else {
    	          this.quill.format('list', 'unchecked', _quill2.default.sources.USER);
    	        }
    	      } else {
    	        this.quill.format('list', value, _quill2.default.sources.USER);
    	      }
    	    }
    	  }
    	};

    	exports.default = Toolbar;
    	exports.addControls = addControls;

    	/***/ }),
    	/* 58 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <polyline class=\"ql-even ql-stroke\" points=\"5 7 3 9 5 11\"></polyline> <polyline class=\"ql-even ql-stroke\" points=\"13 7 15 9 13 11\"></polyline> <line class=ql-stroke x1=10 x2=8 y1=5 y2=13></line> </svg>";

    	/***/ }),
    	/* 59 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _picker = __webpack_require__(28);

    	var _picker2 = _interopRequireDefault(_picker);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var ColorPicker = function (_Picker) {
    	  _inherits(ColorPicker, _Picker);

    	  function ColorPicker(select, label) {
    	    _classCallCheck(this, ColorPicker);

    	    var _this = _possibleConstructorReturn(this, (ColorPicker.__proto__ || Object.getPrototypeOf(ColorPicker)).call(this, select));

    	    _this.label.innerHTML = label;
    	    _this.container.classList.add('ql-color-picker');
    	    [].slice.call(_this.container.querySelectorAll('.ql-picker-item'), 0, 7).forEach(function (item) {
    	      item.classList.add('ql-primary');
    	    });
    	    return _this;
    	  }

    	  _createClass(ColorPicker, [{
    	    key: 'buildItem',
    	    value: function buildItem(option) {
    	      var item = _get(ColorPicker.prototype.__proto__ || Object.getPrototypeOf(ColorPicker.prototype), 'buildItem', this).call(this, option);
    	      item.style.backgroundColor = option.getAttribute('value') || '';
    	      return item;
    	    }
    	  }, {
    	    key: 'selectItem',
    	    value: function selectItem(item, trigger) {
    	      _get(ColorPicker.prototype.__proto__ || Object.getPrototypeOf(ColorPicker.prototype), 'selectItem', this).call(this, item, trigger);
    	      var colorLabel = this.label.querySelector('.ql-color-label');
    	      var value = item ? item.getAttribute('data-value') || '' : '';
    	      if (colorLabel) {
    	        if (colorLabel.tagName === 'line') {
    	          colorLabel.style.stroke = value;
    	        } else {
    	          colorLabel.style.fill = value;
    	        }
    	      }
    	    }
    	  }]);

    	  return ColorPicker;
    	}(_picker2.default);

    	exports.default = ColorPicker;

    	/***/ }),
    	/* 60 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _picker = __webpack_require__(28);

    	var _picker2 = _interopRequireDefault(_picker);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var IconPicker = function (_Picker) {
    	  _inherits(IconPicker, _Picker);

    	  function IconPicker(select, icons) {
    	    _classCallCheck(this, IconPicker);

    	    var _this = _possibleConstructorReturn(this, (IconPicker.__proto__ || Object.getPrototypeOf(IconPicker)).call(this, select));

    	    _this.container.classList.add('ql-icon-picker');
    	    [].forEach.call(_this.container.querySelectorAll('.ql-picker-item'), function (item) {
    	      item.innerHTML = icons[item.getAttribute('data-value') || ''];
    	    });
    	    _this.defaultItem = _this.container.querySelector('.ql-selected');
    	    _this.selectItem(_this.defaultItem);
    	    return _this;
    	  }

    	  _createClass(IconPicker, [{
    	    key: 'selectItem',
    	    value: function selectItem(item, trigger) {
    	      _get(IconPicker.prototype.__proto__ || Object.getPrototypeOf(IconPicker.prototype), 'selectItem', this).call(this, item, trigger);
    	      item = item || this.defaultItem;
    	      this.label.innerHTML = item.innerHTML;
    	    }
    	  }]);

    	  return IconPicker;
    	}(_picker2.default);

    	exports.default = IconPicker;

    	/***/ }),
    	/* 61 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	var Tooltip = function () {
    	  function Tooltip(quill, boundsContainer) {
    	    var _this = this;

    	    _classCallCheck(this, Tooltip);

    	    this.quill = quill;
    	    this.boundsContainer = boundsContainer || document.body;
    	    this.root = quill.addContainer('ql-tooltip');
    	    this.root.innerHTML = this.constructor.TEMPLATE;
    	    if (this.quill.root === this.quill.scrollingContainer) {
    	      this.quill.root.addEventListener('scroll', function () {
    	        _this.root.style.marginTop = -1 * _this.quill.root.scrollTop + 'px';
    	      });
    	    }
    	    this.hide();
    	  }

    	  _createClass(Tooltip, [{
    	    key: 'hide',
    	    value: function hide() {
    	      this.root.classList.add('ql-hidden');
    	    }
    	  }, {
    	    key: 'position',
    	    value: function position(reference) {
    	      var left = reference.left + reference.width / 2 - this.root.offsetWidth / 2;
    	      // root.scrollTop should be 0 if scrollContainer !== root
    	      var top = reference.bottom + this.quill.root.scrollTop;
    	      this.root.style.left = left + 'px';
    	      this.root.style.top = top + 'px';
    	      this.root.classList.remove('ql-flip');
    	      var containerBounds = this.boundsContainer.getBoundingClientRect();
    	      var rootBounds = this.root.getBoundingClientRect();
    	      var shift = 0;
    	      if (rootBounds.right > containerBounds.right) {
    	        shift = containerBounds.right - rootBounds.right;
    	        this.root.style.left = left + shift + 'px';
    	      }
    	      if (rootBounds.left < containerBounds.left) {
    	        shift = containerBounds.left - rootBounds.left;
    	        this.root.style.left = left + shift + 'px';
    	      }
    	      if (rootBounds.bottom > containerBounds.bottom) {
    	        var height = rootBounds.bottom - rootBounds.top;
    	        var verticalShift = reference.bottom - reference.top + height;
    	        this.root.style.top = top - verticalShift + 'px';
    	        this.root.classList.add('ql-flip');
    	      }
    	      return shift;
    	    }
    	  }, {
    	    key: 'show',
    	    value: function show() {
    	      this.root.classList.remove('ql-editing');
    	      this.root.classList.remove('ql-hidden');
    	    }
    	  }]);

    	  return Tooltip;
    	}();

    	exports.default = Tooltip;

    	/***/ }),
    	/* 62 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _extend = __webpack_require__(3);

    	var _extend2 = _interopRequireDefault(_extend);

    	var _emitter = __webpack_require__(8);

    	var _emitter2 = _interopRequireDefault(_emitter);

    	var _base = __webpack_require__(43);

    	var _base2 = _interopRequireDefault(_base);

    	var _link = __webpack_require__(27);

    	var _link2 = _interopRequireDefault(_link);

    	var _selection = __webpack_require__(15);

    	var _icons = __webpack_require__(41);

    	var _icons2 = _interopRequireDefault(_icons);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var TOOLBAR_CONFIG = [[{ header: ['1', '2', '3', false] }], ['bold', 'italic', 'underline', 'link'], [{ list: 'ordered' }, { list: 'bullet' }], ['clean']];

    	var SnowTheme = function (_BaseTheme) {
    	  _inherits(SnowTheme, _BaseTheme);

    	  function SnowTheme(quill, options) {
    	    _classCallCheck(this, SnowTheme);

    	    if (options.modules.toolbar != null && options.modules.toolbar.container == null) {
    	      options.modules.toolbar.container = TOOLBAR_CONFIG;
    	    }

    	    var _this = _possibleConstructorReturn(this, (SnowTheme.__proto__ || Object.getPrototypeOf(SnowTheme)).call(this, quill, options));

    	    _this.quill.container.classList.add('ql-snow');
    	    return _this;
    	  }

    	  _createClass(SnowTheme, [{
    	    key: 'extendToolbar',
    	    value: function extendToolbar(toolbar) {
    	      toolbar.container.classList.add('ql-snow');
    	      this.buildButtons([].slice.call(toolbar.container.querySelectorAll('button')), _icons2.default);
    	      this.buildPickers([].slice.call(toolbar.container.querySelectorAll('select')), _icons2.default);
    	      this.tooltip = new SnowTooltip(this.quill, this.options.bounds);
    	      if (toolbar.container.querySelector('.ql-link')) {
    	        this.quill.keyboard.addBinding({ key: 'K', shortKey: true }, function (range, context) {
    	          toolbar.handlers['link'].call(toolbar, !context.format.link);
    	        });
    	      }
    	    }
    	  }]);

    	  return SnowTheme;
    	}(_base2.default);

    	SnowTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {
    	  modules: {
    	    toolbar: {
    	      handlers: {
    	        link: function link(value) {
    	          if (value) {
    	            var range = this.quill.getSelection();
    	            if (range == null || range.length == 0) return;
    	            var preview = this.quill.getText(range);
    	            if (/^\S+@\S+\.\S+$/.test(preview) && preview.indexOf('mailto:') !== 0) {
    	              preview = 'mailto:' + preview;
    	            }
    	            var tooltip = this.quill.theme.tooltip;
    	            tooltip.edit('link', preview);
    	          } else {
    	            this.quill.format('link', false);
    	          }
    	        }
    	      }
    	    }
    	  }
    	});

    	var SnowTooltip = function (_BaseTooltip) {
    	  _inherits(SnowTooltip, _BaseTooltip);

    	  function SnowTooltip(quill, bounds) {
    	    _classCallCheck(this, SnowTooltip);

    	    var _this2 = _possibleConstructorReturn(this, (SnowTooltip.__proto__ || Object.getPrototypeOf(SnowTooltip)).call(this, quill, bounds));

    	    _this2.preview = _this2.root.querySelector('a.ql-preview');
    	    return _this2;
    	  }

    	  _createClass(SnowTooltip, [{
    	    key: 'listen',
    	    value: function listen() {
    	      var _this3 = this;

    	      _get(SnowTooltip.prototype.__proto__ || Object.getPrototypeOf(SnowTooltip.prototype), 'listen', this).call(this);
    	      this.root.querySelector('a.ql-action').addEventListener('click', function (event) {
    	        if (_this3.root.classList.contains('ql-editing')) {
    	          _this3.save();
    	        } else {
    	          _this3.edit('link', _this3.preview.textContent);
    	        }
    	        event.preventDefault();
    	      });
    	      this.root.querySelector('a.ql-remove').addEventListener('click', function (event) {
    	        if (_this3.linkRange != null) {
    	          var range = _this3.linkRange;
    	          _this3.restoreFocus();
    	          _this3.quill.formatText(range, 'link', false, _emitter2.default.sources.USER);
    	          delete _this3.linkRange;
    	        }
    	        event.preventDefault();
    	        _this3.hide();
    	      });
    	      this.quill.on(_emitter2.default.events.SELECTION_CHANGE, function (range, oldRange, source) {
    	        if (range == null) return;
    	        if (range.length === 0 && source === _emitter2.default.sources.USER) {
    	          var _quill$scroll$descend = _this3.quill.scroll.descendant(_link2.default, range.index),
    	              _quill$scroll$descend2 = _slicedToArray(_quill$scroll$descend, 2),
    	              link = _quill$scroll$descend2[0],
    	              offset = _quill$scroll$descend2[1];

    	          if (link != null) {
    	            _this3.linkRange = new _selection.Range(range.index - offset, link.length());
    	            var preview = _link2.default.formats(link.domNode);
    	            _this3.preview.textContent = preview;
    	            _this3.preview.setAttribute('href', preview);
    	            _this3.show();
    	            _this3.position(_this3.quill.getBounds(_this3.linkRange));
    	            return;
    	          }
    	        } else {
    	          delete _this3.linkRange;
    	        }
    	        _this3.hide();
    	      });
    	    }
    	  }, {
    	    key: 'show',
    	    value: function show() {
    	      _get(SnowTooltip.prototype.__proto__ || Object.getPrototypeOf(SnowTooltip.prototype), 'show', this).call(this);
    	      this.root.removeAttribute('data-mode');
    	    }
    	  }]);

    	  return SnowTooltip;
    	}(_base.BaseTooltip);

    	SnowTooltip.TEMPLATE = ['<a class="ql-preview" rel="noopener noreferrer" target="_blank" href="about:blank"></a>', '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">', '<a class="ql-action"></a>', '<a class="ql-remove"></a>'].join('');

    	exports.default = SnowTheme;

    	/***/ }),
    	/* 63 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _core = __webpack_require__(29);

    	var _core2 = _interopRequireDefault(_core);

    	var _align = __webpack_require__(36);

    	var _direction = __webpack_require__(38);

    	var _indent = __webpack_require__(64);

    	var _blockquote = __webpack_require__(65);

    	var _blockquote2 = _interopRequireDefault(_blockquote);

    	var _header = __webpack_require__(66);

    	var _header2 = _interopRequireDefault(_header);

    	var _list = __webpack_require__(67);

    	var _list2 = _interopRequireDefault(_list);

    	var _background = __webpack_require__(37);

    	var _color = __webpack_require__(26);

    	var _font = __webpack_require__(39);

    	var _size = __webpack_require__(40);

    	var _bold = __webpack_require__(56);

    	var _bold2 = _interopRequireDefault(_bold);

    	var _italic = __webpack_require__(68);

    	var _italic2 = _interopRequireDefault(_italic);

    	var _link = __webpack_require__(27);

    	var _link2 = _interopRequireDefault(_link);

    	var _script = __webpack_require__(69);

    	var _script2 = _interopRequireDefault(_script);

    	var _strike = __webpack_require__(70);

    	var _strike2 = _interopRequireDefault(_strike);

    	var _underline = __webpack_require__(71);

    	var _underline2 = _interopRequireDefault(_underline);

    	var _image = __webpack_require__(72);

    	var _image2 = _interopRequireDefault(_image);

    	var _video = __webpack_require__(73);

    	var _video2 = _interopRequireDefault(_video);

    	var _code = __webpack_require__(13);

    	var _code2 = _interopRequireDefault(_code);

    	var _formula = __webpack_require__(74);

    	var _formula2 = _interopRequireDefault(_formula);

    	var _syntax = __webpack_require__(75);

    	var _syntax2 = _interopRequireDefault(_syntax);

    	var _toolbar = __webpack_require__(57);

    	var _toolbar2 = _interopRequireDefault(_toolbar);

    	var _icons = __webpack_require__(41);

    	var _icons2 = _interopRequireDefault(_icons);

    	var _picker = __webpack_require__(28);

    	var _picker2 = _interopRequireDefault(_picker);

    	var _colorPicker = __webpack_require__(59);

    	var _colorPicker2 = _interopRequireDefault(_colorPicker);

    	var _iconPicker = __webpack_require__(60);

    	var _iconPicker2 = _interopRequireDefault(_iconPicker);

    	var _tooltip = __webpack_require__(61);

    	var _tooltip2 = _interopRequireDefault(_tooltip);

    	var _bubble = __webpack_require__(108);

    	var _bubble2 = _interopRequireDefault(_bubble);

    	var _snow = __webpack_require__(62);

    	var _snow2 = _interopRequireDefault(_snow);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	_core2.default.register({
    	  'attributors/attribute/direction': _direction.DirectionAttribute,

    	  'attributors/class/align': _align.AlignClass,
    	  'attributors/class/background': _background.BackgroundClass,
    	  'attributors/class/color': _color.ColorClass,
    	  'attributors/class/direction': _direction.DirectionClass,
    	  'attributors/class/font': _font.FontClass,
    	  'attributors/class/size': _size.SizeClass,

    	  'attributors/style/align': _align.AlignStyle,
    	  'attributors/style/background': _background.BackgroundStyle,
    	  'attributors/style/color': _color.ColorStyle,
    	  'attributors/style/direction': _direction.DirectionStyle,
    	  'attributors/style/font': _font.FontStyle,
    	  'attributors/style/size': _size.SizeStyle
    	}, true);

    	_core2.default.register({
    	  'formats/align': _align.AlignClass,
    	  'formats/direction': _direction.DirectionClass,
    	  'formats/indent': _indent.IndentClass,

    	  'formats/background': _background.BackgroundStyle,
    	  'formats/color': _color.ColorStyle,
    	  'formats/font': _font.FontClass,
    	  'formats/size': _size.SizeClass,

    	  'formats/blockquote': _blockquote2.default,
    	  'formats/code-block': _code2.default,
    	  'formats/header': _header2.default,
    	  'formats/list': _list2.default,

    	  'formats/bold': _bold2.default,
    	  'formats/code': _code.Code,
    	  'formats/italic': _italic2.default,
    	  'formats/link': _link2.default,
    	  'formats/script': _script2.default,
    	  'formats/strike': _strike2.default,
    	  'formats/underline': _underline2.default,

    	  'formats/image': _image2.default,
    	  'formats/video': _video2.default,

    	  'formats/list/item': _list.ListItem,

    	  'modules/formula': _formula2.default,
    	  'modules/syntax': _syntax2.default,
    	  'modules/toolbar': _toolbar2.default,

    	  'themes/bubble': _bubble2.default,
    	  'themes/snow': _snow2.default,

    	  'ui/icons': _icons2.default,
    	  'ui/picker': _picker2.default,
    	  'ui/icon-picker': _iconPicker2.default,
    	  'ui/color-picker': _colorPicker2.default,
    	  'ui/tooltip': _tooltip2.default
    	}, true);

    	exports.default = _core2.default;

    	/***/ }),
    	/* 64 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.IndentClass = undefined;

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var IdentAttributor = function (_Parchment$Attributor) {
    	  _inherits(IdentAttributor, _Parchment$Attributor);

    	  function IdentAttributor() {
    	    _classCallCheck(this, IdentAttributor);

    	    return _possibleConstructorReturn(this, (IdentAttributor.__proto__ || Object.getPrototypeOf(IdentAttributor)).apply(this, arguments));
    	  }

    	  _createClass(IdentAttributor, [{
    	    key: 'add',
    	    value: function add(node, value) {
    	      if (value === '+1' || value === '-1') {
    	        var indent = this.value(node) || 0;
    	        value = value === '+1' ? indent + 1 : indent - 1;
    	      }
    	      if (value === 0) {
    	        this.remove(node);
    	        return true;
    	      } else {
    	        return _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'add', this).call(this, node, value);
    	      }
    	    }
    	  }, {
    	    key: 'canAdd',
    	    value: function canAdd(node, value) {
    	      return _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'canAdd', this).call(this, node, value) || _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'canAdd', this).call(this, node, parseInt(value));
    	    }
    	  }, {
    	    key: 'value',
    	    value: function value(node) {
    	      return parseInt(_get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'value', this).call(this, node)) || undefined; // Don't return NaN
    	    }
    	  }]);

    	  return IdentAttributor;
    	}(_parchment2.default.Attributor.Class);

    	var IndentClass = new IdentAttributor('indent', 'ql-indent', {
    	  scope: _parchment2.default.Scope.BLOCK,
    	  whitelist: [1, 2, 3, 4, 5, 6, 7, 8]
    	});

    	exports.IndentClass = IndentClass;

    	/***/ }),
    	/* 65 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _block = __webpack_require__(4);

    	var _block2 = _interopRequireDefault(_block);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Blockquote = function (_Block) {
    	  _inherits(Blockquote, _Block);

    	  function Blockquote() {
    	    _classCallCheck(this, Blockquote);

    	    return _possibleConstructorReturn(this, (Blockquote.__proto__ || Object.getPrototypeOf(Blockquote)).apply(this, arguments));
    	  }

    	  return Blockquote;
    	}(_block2.default);

    	Blockquote.blotName = 'blockquote';
    	Blockquote.tagName = 'blockquote';

    	exports.default = Blockquote;

    	/***/ }),
    	/* 66 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _block = __webpack_require__(4);

    	var _block2 = _interopRequireDefault(_block);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Header = function (_Block) {
    	  _inherits(Header, _Block);

    	  function Header() {
    	    _classCallCheck(this, Header);

    	    return _possibleConstructorReturn(this, (Header.__proto__ || Object.getPrototypeOf(Header)).apply(this, arguments));
    	  }

    	  _createClass(Header, null, [{
    	    key: 'formats',
    	    value: function formats(domNode) {
    	      return this.tagName.indexOf(domNode.tagName) + 1;
    	    }
    	  }]);

    	  return Header;
    	}(_block2.default);

    	Header.blotName = 'header';
    	Header.tagName = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'];

    	exports.default = Header;

    	/***/ }),
    	/* 67 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.default = exports.ListItem = undefined;

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _block = __webpack_require__(4);

    	var _block2 = _interopRequireDefault(_block);

    	var _container = __webpack_require__(25);

    	var _container2 = _interopRequireDefault(_container);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var ListItem = function (_Block) {
    	  _inherits(ListItem, _Block);

    	  function ListItem() {
    	    _classCallCheck(this, ListItem);

    	    return _possibleConstructorReturn(this, (ListItem.__proto__ || Object.getPrototypeOf(ListItem)).apply(this, arguments));
    	  }

    	  _createClass(ListItem, [{
    	    key: 'format',
    	    value: function format(name, value) {
    	      if (name === List.blotName && !value) {
    	        this.replaceWith(_parchment2.default.create(this.statics.scope));
    	      } else {
    	        _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'format', this).call(this, name, value);
    	      }
    	    }
    	  }, {
    	    key: 'remove',
    	    value: function remove() {
    	      if (this.prev == null && this.next == null) {
    	        this.parent.remove();
    	      } else {
    	        _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'remove', this).call(this);
    	      }
    	    }
    	  }, {
    	    key: 'replaceWith',
    	    value: function replaceWith(name, value) {
    	      this.parent.isolate(this.offset(this.parent), this.length());
    	      if (name === this.parent.statics.blotName) {
    	        this.parent.replaceWith(name, value);
    	        return this;
    	      } else {
    	        this.parent.unwrap();
    	        return _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'replaceWith', this).call(this, name, value);
    	      }
    	    }
    	  }], [{
    	    key: 'formats',
    	    value: function formats(domNode) {
    	      return domNode.tagName === this.tagName ? undefined : _get(ListItem.__proto__ || Object.getPrototypeOf(ListItem), 'formats', this).call(this, domNode);
    	    }
    	  }]);

    	  return ListItem;
    	}(_block2.default);

    	ListItem.blotName = 'list-item';
    	ListItem.tagName = 'LI';

    	var List = function (_Container) {
    	  _inherits(List, _Container);

    	  _createClass(List, null, [{
    	    key: 'create',
    	    value: function create(value) {
    	      var tagName = value === 'ordered' ? 'OL' : 'UL';
    	      var node = _get(List.__proto__ || Object.getPrototypeOf(List), 'create', this).call(this, tagName);
    	      if (value === 'checked' || value === 'unchecked') {
    	        node.setAttribute('data-checked', value === 'checked');
    	      }
    	      return node;
    	    }
    	  }, {
    	    key: 'formats',
    	    value: function formats(domNode) {
    	      if (domNode.tagName === 'OL') return 'ordered';
    	      if (domNode.tagName === 'UL') {
    	        if (domNode.hasAttribute('data-checked')) {
    	          return domNode.getAttribute('data-checked') === 'true' ? 'checked' : 'unchecked';
    	        } else {
    	          return 'bullet';
    	        }
    	      }
    	      return undefined;
    	    }
    	  }]);

    	  function List(domNode) {
    	    _classCallCheck(this, List);

    	    var _this2 = _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).call(this, domNode));

    	    var listEventHandler = function listEventHandler(e) {
    	      if (e.target.parentNode !== domNode) return;
    	      var format = _this2.statics.formats(domNode);
    	      var blot = _parchment2.default.find(e.target);
    	      if (format === 'checked') {
    	        blot.format('list', 'unchecked');
    	      } else if (format === 'unchecked') {
    	        blot.format('list', 'checked');
    	      }
    	    };

    	    domNode.addEventListener('touchstart', listEventHandler);
    	    domNode.addEventListener('mousedown', listEventHandler);
    	    return _this2;
    	  }

    	  _createClass(List, [{
    	    key: 'format',
    	    value: function format(name, value) {
    	      if (this.children.length > 0) {
    	        this.children.tail.format(name, value);
    	      }
    	    }
    	  }, {
    	    key: 'formats',
    	    value: function formats() {
    	      // We don't inherit from FormatBlot
    	      return _defineProperty({}, this.statics.blotName, this.statics.formats(this.domNode));
    	    }
    	  }, {
    	    key: 'insertBefore',
    	    value: function insertBefore(blot, ref) {
    	      if (blot instanceof ListItem) {
    	        _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'insertBefore', this).call(this, blot, ref);
    	      } else {
    	        var index = ref == null ? this.length() : ref.offset(this);
    	        var after = this.split(index);
    	        after.parent.insertBefore(blot, after);
    	      }
    	    }
    	  }, {
    	    key: 'optimize',
    	    value: function optimize(context) {
    	      _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'optimize', this).call(this, context);
    	      var next = this.next;
    	      if (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && next.domNode.tagName === this.domNode.tagName && next.domNode.getAttribute('data-checked') === this.domNode.getAttribute('data-checked')) {
    	        next.moveChildren(this);
    	        next.remove();
    	      }
    	    }
    	  }, {
    	    key: 'replace',
    	    value: function replace(target) {
    	      if (target.statics.blotName !== this.statics.blotName) {
    	        var item = _parchment2.default.create(this.statics.defaultChild);
    	        target.moveChildren(item);
    	        this.appendChild(item);
    	      }
    	      _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'replace', this).call(this, target);
    	    }
    	  }]);

    	  return List;
    	}(_container2.default);

    	List.blotName = 'list';
    	List.scope = _parchment2.default.Scope.BLOCK_BLOT;
    	List.tagName = ['OL', 'UL'];
    	List.defaultChild = 'list-item';
    	List.allowedChildren = [ListItem];

    	exports.ListItem = ListItem;
    	exports.default = List;

    	/***/ }),
    	/* 68 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _bold = __webpack_require__(56);

    	var _bold2 = _interopRequireDefault(_bold);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Italic = function (_Bold) {
    	  _inherits(Italic, _Bold);

    	  function Italic() {
    	    _classCallCheck(this, Italic);

    	    return _possibleConstructorReturn(this, (Italic.__proto__ || Object.getPrototypeOf(Italic)).apply(this, arguments));
    	  }

    	  return Italic;
    	}(_bold2.default);

    	Italic.blotName = 'italic';
    	Italic.tagName = ['EM', 'I'];

    	exports.default = Italic;

    	/***/ }),
    	/* 69 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _inline = __webpack_require__(6);

    	var _inline2 = _interopRequireDefault(_inline);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Script = function (_Inline) {
    	  _inherits(Script, _Inline);

    	  function Script() {
    	    _classCallCheck(this, Script);

    	    return _possibleConstructorReturn(this, (Script.__proto__ || Object.getPrototypeOf(Script)).apply(this, arguments));
    	  }

    	  _createClass(Script, null, [{
    	    key: 'create',
    	    value: function create(value) {
    	      if (value === 'super') {
    	        return document.createElement('sup');
    	      } else if (value === 'sub') {
    	        return document.createElement('sub');
    	      } else {
    	        return _get(Script.__proto__ || Object.getPrototypeOf(Script), 'create', this).call(this, value);
    	      }
    	    }
    	  }, {
    	    key: 'formats',
    	    value: function formats(domNode) {
    	      if (domNode.tagName === 'SUB') return 'sub';
    	      if (domNode.tagName === 'SUP') return 'super';
    	      return undefined;
    	    }
    	  }]);

    	  return Script;
    	}(_inline2.default);

    	Script.blotName = 'script';
    	Script.tagName = ['SUB', 'SUP'];

    	exports.default = Script;

    	/***/ }),
    	/* 70 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _inline = __webpack_require__(6);

    	var _inline2 = _interopRequireDefault(_inline);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Strike = function (_Inline) {
    	  _inherits(Strike, _Inline);

    	  function Strike() {
    	    _classCallCheck(this, Strike);

    	    return _possibleConstructorReturn(this, (Strike.__proto__ || Object.getPrototypeOf(Strike)).apply(this, arguments));
    	  }

    	  return Strike;
    	}(_inline2.default);

    	Strike.blotName = 'strike';
    	Strike.tagName = 'S';

    	exports.default = Strike;

    	/***/ }),
    	/* 71 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _inline = __webpack_require__(6);

    	var _inline2 = _interopRequireDefault(_inline);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Underline = function (_Inline) {
    	  _inherits(Underline, _Inline);

    	  function Underline() {
    	    _classCallCheck(this, Underline);

    	    return _possibleConstructorReturn(this, (Underline.__proto__ || Object.getPrototypeOf(Underline)).apply(this, arguments));
    	  }

    	  return Underline;
    	}(_inline2.default);

    	Underline.blotName = 'underline';
    	Underline.tagName = 'U';

    	exports.default = Underline;

    	/***/ }),
    	/* 72 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _link = __webpack_require__(27);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var ATTRIBUTES = ['alt', 'height', 'width'];

    	var Image = function (_Parchment$Embed) {
    	  _inherits(Image, _Parchment$Embed);

    	  function Image() {
    	    _classCallCheck(this, Image);

    	    return _possibleConstructorReturn(this, (Image.__proto__ || Object.getPrototypeOf(Image)).apply(this, arguments));
    	  }

    	  _createClass(Image, [{
    	    key: 'format',
    	    value: function format(name, value) {
    	      if (ATTRIBUTES.indexOf(name) > -1) {
    	        if (value) {
    	          this.domNode.setAttribute(name, value);
    	        } else {
    	          this.domNode.removeAttribute(name);
    	        }
    	      } else {
    	        _get(Image.prototype.__proto__ || Object.getPrototypeOf(Image.prototype), 'format', this).call(this, name, value);
    	      }
    	    }
    	  }], [{
    	    key: 'create',
    	    value: function create(value) {
    	      var node = _get(Image.__proto__ || Object.getPrototypeOf(Image), 'create', this).call(this, value);
    	      if (typeof value === 'string') {
    	        node.setAttribute('src', this.sanitize(value));
    	      }
    	      return node;
    	    }
    	  }, {
    	    key: 'formats',
    	    value: function formats(domNode) {
    	      return ATTRIBUTES.reduce(function (formats, attribute) {
    	        if (domNode.hasAttribute(attribute)) {
    	          formats[attribute] = domNode.getAttribute(attribute);
    	        }
    	        return formats;
    	      }, {});
    	    }
    	  }, {
    	    key: 'match',
    	    value: function match(url) {
    	      return (/\.(jpe?g|gif|png)$/.test(url) || /^data:image\/.+;base64/.test(url)
    	      );
    	    }
    	  }, {
    	    key: 'sanitize',
    	    value: function sanitize(url) {
    	      return (0, _link.sanitize)(url, ['http', 'https', 'data']) ? url : '//:0';
    	    }
    	  }, {
    	    key: 'value',
    	    value: function value(domNode) {
    	      return domNode.getAttribute('src');
    	    }
    	  }]);

    	  return Image;
    	}(_parchment2.default.Embed);

    	Image.blotName = 'image';
    	Image.tagName = 'IMG';

    	exports.default = Image;

    	/***/ }),
    	/* 73 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _block = __webpack_require__(4);

    	var _link = __webpack_require__(27);

    	var _link2 = _interopRequireDefault(_link);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var ATTRIBUTES = ['height', 'width'];

    	var Video = function (_BlockEmbed) {
    	  _inherits(Video, _BlockEmbed);

    	  function Video() {
    	    _classCallCheck(this, Video);

    	    return _possibleConstructorReturn(this, (Video.__proto__ || Object.getPrototypeOf(Video)).apply(this, arguments));
    	  }

    	  _createClass(Video, [{
    	    key: 'format',
    	    value: function format(name, value) {
    	      if (ATTRIBUTES.indexOf(name) > -1) {
    	        if (value) {
    	          this.domNode.setAttribute(name, value);
    	        } else {
    	          this.domNode.removeAttribute(name);
    	        }
    	      } else {
    	        _get(Video.prototype.__proto__ || Object.getPrototypeOf(Video.prototype), 'format', this).call(this, name, value);
    	      }
    	    }
    	  }], [{
    	    key: 'create',
    	    value: function create(value) {
    	      var node = _get(Video.__proto__ || Object.getPrototypeOf(Video), 'create', this).call(this, value);
    	      node.setAttribute('frameborder', '0');
    	      node.setAttribute('allowfullscreen', true);
    	      node.setAttribute('src', this.sanitize(value));
    	      return node;
    	    }
    	  }, {
    	    key: 'formats',
    	    value: function formats(domNode) {
    	      return ATTRIBUTES.reduce(function (formats, attribute) {
    	        if (domNode.hasAttribute(attribute)) {
    	          formats[attribute] = domNode.getAttribute(attribute);
    	        }
    	        return formats;
    	      }, {});
    	    }
    	  }, {
    	    key: 'sanitize',
    	    value: function sanitize(url) {
    	      return _link2.default.sanitize(url);
    	    }
    	  }, {
    	    key: 'value',
    	    value: function value(domNode) {
    	      return domNode.getAttribute('src');
    	    }
    	  }]);

    	  return Video;
    	}(_block.BlockEmbed);

    	Video.blotName = 'video';
    	Video.className = 'ql-video';
    	Video.tagName = 'IFRAME';

    	exports.default = Video;

    	/***/ }),
    	/* 74 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.default = exports.FormulaBlot = undefined;

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _embed = __webpack_require__(35);

    	var _embed2 = _interopRequireDefault(_embed);

    	var _quill = __webpack_require__(5);

    	var _quill2 = _interopRequireDefault(_quill);

    	var _module = __webpack_require__(9);

    	var _module2 = _interopRequireDefault(_module);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var FormulaBlot = function (_Embed) {
    	  _inherits(FormulaBlot, _Embed);

    	  function FormulaBlot() {
    	    _classCallCheck(this, FormulaBlot);

    	    return _possibleConstructorReturn(this, (FormulaBlot.__proto__ || Object.getPrototypeOf(FormulaBlot)).apply(this, arguments));
    	  }

    	  _createClass(FormulaBlot, null, [{
    	    key: 'create',
    	    value: function create(value) {
    	      var node = _get(FormulaBlot.__proto__ || Object.getPrototypeOf(FormulaBlot), 'create', this).call(this, value);
    	      if (typeof value === 'string') {
    	        window.katex.render(value, node, {
    	          throwOnError: false,
    	          errorColor: '#f00'
    	        });
    	        node.setAttribute('data-value', value);
    	      }
    	      return node;
    	    }
    	  }, {
    	    key: 'value',
    	    value: function value(domNode) {
    	      return domNode.getAttribute('data-value');
    	    }
    	  }]);

    	  return FormulaBlot;
    	}(_embed2.default);

    	FormulaBlot.blotName = 'formula';
    	FormulaBlot.className = 'ql-formula';
    	FormulaBlot.tagName = 'SPAN';

    	var Formula = function (_Module) {
    	  _inherits(Formula, _Module);

    	  _createClass(Formula, null, [{
    	    key: 'register',
    	    value: function register() {
    	      _quill2.default.register(FormulaBlot, true);
    	    }
    	  }]);

    	  function Formula() {
    	    _classCallCheck(this, Formula);

    	    var _this2 = _possibleConstructorReturn(this, (Formula.__proto__ || Object.getPrototypeOf(Formula)).call(this));

    	    if (window.katex == null) {
    	      throw new Error('Formula module requires KaTeX.');
    	    }
    	    return _this2;
    	  }

    	  return Formula;
    	}(_module2.default);

    	exports.FormulaBlot = FormulaBlot;
    	exports.default = Formula;

    	/***/ }),
    	/* 75 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.default = exports.CodeToken = exports.CodeBlock = undefined;

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _quill = __webpack_require__(5);

    	var _quill2 = _interopRequireDefault(_quill);

    	var _module = __webpack_require__(9);

    	var _module2 = _interopRequireDefault(_module);

    	var _code = __webpack_require__(13);

    	var _code2 = _interopRequireDefault(_code);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var SyntaxCodeBlock = function (_CodeBlock) {
    	  _inherits(SyntaxCodeBlock, _CodeBlock);

    	  function SyntaxCodeBlock() {
    	    _classCallCheck(this, SyntaxCodeBlock);

    	    return _possibleConstructorReturn(this, (SyntaxCodeBlock.__proto__ || Object.getPrototypeOf(SyntaxCodeBlock)).apply(this, arguments));
    	  }

    	  _createClass(SyntaxCodeBlock, [{
    	    key: 'replaceWith',
    	    value: function replaceWith(block) {
    	      this.domNode.textContent = this.domNode.textContent;
    	      this.attach();
    	      _get(SyntaxCodeBlock.prototype.__proto__ || Object.getPrototypeOf(SyntaxCodeBlock.prototype), 'replaceWith', this).call(this, block);
    	    }
    	  }, {
    	    key: 'highlight',
    	    value: function highlight(_highlight) {
    	      var text = this.domNode.textContent;
    	      if (this.cachedText !== text) {
    	        if (text.trim().length > 0 || this.cachedText == null) {
    	          this.domNode.innerHTML = _highlight(text);
    	          this.domNode.normalize();
    	          this.attach();
    	        }
    	        this.cachedText = text;
    	      }
    	    }
    	  }]);

    	  return SyntaxCodeBlock;
    	}(_code2.default);

    	SyntaxCodeBlock.className = 'ql-syntax';

    	var CodeToken = new _parchment2.default.Attributor.Class('token', 'hljs', {
    	  scope: _parchment2.default.Scope.INLINE
    	});

    	var Syntax = function (_Module) {
    	  _inherits(Syntax, _Module);

    	  _createClass(Syntax, null, [{
    	    key: 'register',
    	    value: function register() {
    	      _quill2.default.register(CodeToken, true);
    	      _quill2.default.register(SyntaxCodeBlock, true);
    	    }
    	  }]);

    	  function Syntax(quill, options) {
    	    _classCallCheck(this, Syntax);

    	    var _this2 = _possibleConstructorReturn(this, (Syntax.__proto__ || Object.getPrototypeOf(Syntax)).call(this, quill, options));

    	    if (typeof _this2.options.highlight !== 'function') {
    	      throw new Error('Syntax module requires highlight.js. Please include the library on the page before Quill.');
    	    }
    	    var timer = null;
    	    _this2.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, function () {
    	      clearTimeout(timer);
    	      timer = setTimeout(function () {
    	        _this2.highlight();
    	        timer = null;
    	      }, _this2.options.interval);
    	    });
    	    _this2.highlight();
    	    return _this2;
    	  }

    	  _createClass(Syntax, [{
    	    key: 'highlight',
    	    value: function highlight() {
    	      var _this3 = this;

    	      if (this.quill.selection.composing) return;
    	      this.quill.update(_quill2.default.sources.USER);
    	      var range = this.quill.getSelection();
    	      this.quill.scroll.descendants(SyntaxCodeBlock).forEach(function (code) {
    	        code.highlight(_this3.options.highlight);
    	      });
    	      this.quill.update(_quill2.default.sources.SILENT);
    	      if (range != null) {
    	        this.quill.setSelection(range, _quill2.default.sources.SILENT);
    	      }
    	    }
    	  }]);

    	  return Syntax;
    	}(_module2.default);

    	Syntax.DEFAULTS = {
    	  highlight: function () {
    	    if (window.hljs == null) return null;
    	    return function (text) {
    	      var result = window.hljs.highlightAuto(text);
    	      return result.value;
    	    };
    	  }(),
    	  interval: 1000
    	};

    	exports.CodeBlock = SyntaxCodeBlock;
    	exports.CodeToken = CodeToken;
    	exports.default = Syntax;

    	/***/ }),
    	/* 76 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=13 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=9 y1=4 y2=4></line> </svg>";

    	/***/ }),
    	/* 77 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=14 x2=4 y1=14 y2=14></line> <line class=ql-stroke x1=12 x2=6 y1=4 y2=4></line> </svg>";

    	/***/ }),
    	/* 78 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=5 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=9 y1=4 y2=4></line> </svg>";

    	/***/ }),
    	/* 79 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=3 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=3 y1=4 y2=4></line> </svg>";

    	/***/ }),
    	/* 80 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <g class=\"ql-fill ql-color-label\"> <polygon points=\"6 6.868 6 6 5 6 5 7 5.942 7 6 6.868\"></polygon> <rect height=1 width=1 x=4 y=4></rect> <polygon points=\"6.817 5 6 5 6 6 6.38 6 6.817 5\"></polygon> <rect height=1 width=1 x=2 y=6></rect> <rect height=1 width=1 x=3 y=5></rect> <rect height=1 width=1 x=4 y=7></rect> <polygon points=\"4 11.439 4 11 3 11 3 12 3.755 12 4 11.439\"></polygon> <rect height=1 width=1 x=2 y=12></rect> <rect height=1 width=1 x=2 y=9></rect> <rect height=1 width=1 x=2 y=15></rect> <polygon points=\"4.63 10 4 10 4 11 4.192 11 4.63 10\"></polygon> <rect height=1 width=1 x=3 y=8></rect> <path d=M10.832,4.2L11,4.582V4H10.708A1.948,1.948,0,0,1,10.832,4.2Z></path> <path d=M7,4.582L7.168,4.2A1.929,1.929,0,0,1,7.292,4H7V4.582Z></path> <path d=M8,13H7.683l-0.351.8a1.933,1.933,0,0,1-.124.2H8V13Z></path> <rect height=1 width=1 x=12 y=2></rect> <rect height=1 width=1 x=11 y=3></rect> <path d=M9,3H8V3.282A1.985,1.985,0,0,1,9,3Z></path> <rect height=1 width=1 x=2 y=3></rect> <rect height=1 width=1 x=6 y=2></rect> <rect height=1 width=1 x=3 y=2></rect> <rect height=1 width=1 x=5 y=3></rect> <rect height=1 width=1 x=9 y=2></rect> <rect height=1 width=1 x=15 y=14></rect> <polygon points=\"13.447 10.174 13.469 10.225 13.472 10.232 13.808 11 14 11 14 10 13.37 10 13.447 10.174\"></polygon> <rect height=1 width=1 x=13 y=7></rect> <rect height=1 width=1 x=15 y=5></rect> <rect height=1 width=1 x=14 y=6></rect> <rect height=1 width=1 x=15 y=8></rect> <rect height=1 width=1 x=14 y=9></rect> <path d=M3.775,14H3v1H4V14.314A1.97,1.97,0,0,1,3.775,14Z></path> <rect height=1 width=1 x=14 y=3></rect> <polygon points=\"12 6.868 12 6 11.62 6 12 6.868\"></polygon> <rect height=1 width=1 x=15 y=2></rect> <rect height=1 width=1 x=12 y=5></rect> <rect height=1 width=1 x=13 y=4></rect> <polygon points=\"12.933 9 13 9 13 8 12.495 8 12.933 9\"></polygon> <rect height=1 width=1 x=9 y=14></rect> <rect height=1 width=1 x=8 y=15></rect> <path d=M6,14.926V15H7V14.316A1.993,1.993,0,0,1,6,14.926Z></path> <rect height=1 width=1 x=5 y=15></rect> <path d=M10.668,13.8L10.317,13H10v1h0.792A1.947,1.947,0,0,1,10.668,13.8Z></path> <rect height=1 width=1 x=11 y=15></rect> <path d=M14.332,12.2a1.99,1.99,0,0,1,.166.8H15V12H14.245Z></path> <rect height=1 width=1 x=14 y=15></rect> <rect height=1 width=1 x=15 y=11></rect> </g> <polyline class=ql-stroke points=\"5.5 13 9 5 12.5 13\"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=11 y2=11></line> </svg>";

    	/***/ }),
    	/* 81 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <rect class=\"ql-fill ql-stroke\" height=3 width=3 x=4 y=5></rect> <rect class=\"ql-fill ql-stroke\" height=3 width=3 x=11 y=5></rect> <path class=\"ql-even ql-fill ql-stroke\" d=M7,8c0,4.031-3,5-3,5></path> <path class=\"ql-even ql-fill ql-stroke\" d=M14,8c0,4.031-3,5-3,5></path> </svg>";

    	/***/ }),
    	/* 82 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-stroke d=M5,4H9.5A2.5,2.5,0,0,1,12,6.5v0A2.5,2.5,0,0,1,9.5,9H5A0,0,0,0,1,5,9V4A0,0,0,0,1,5,4Z></path> <path class=ql-stroke d=M5,9h5.5A2.5,2.5,0,0,1,13,11.5v0A2.5,2.5,0,0,1,10.5,14H5a0,0,0,0,1,0,0V9A0,0,0,0,1,5,9Z></path> </svg>";

    	/***/ }),
    	/* 83 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg class=\"\" viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=5 x2=13 y1=3 y2=3></line> <line class=ql-stroke x1=6 x2=9.35 y1=12 y2=3></line> <line class=ql-stroke x1=11 x2=15 y1=11 y2=15></line> <line class=ql-stroke x1=15 x2=11 y1=11 y2=15></line> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=7 x=2 y=14></rect> </svg>";

    	/***/ }),
    	/* 84 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=\"ql-color-label ql-stroke ql-transparent\" x1=3 x2=15 y1=15 y2=15></line> <polyline class=ql-stroke points=\"5.5 11 9 3 12.5 11\"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=9 y2=9></line> </svg>";

    	/***/ }),
    	/* 85 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <polygon class=\"ql-stroke ql-fill\" points=\"3 11 5 9 3 7 3 11\"></polygon> <line class=\"ql-stroke ql-fill\" x1=15 x2=11 y1=4 y2=4></line> <path class=ql-fill d=M11,3a3,3,0,0,0,0,6h1V3H11Z></path> <rect class=ql-fill height=11 width=1 x=11 y=4></rect> <rect class=ql-fill height=11 width=1 x=13 y=4></rect> </svg>";

    	/***/ }),
    	/* 86 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <polygon class=\"ql-stroke ql-fill\" points=\"15 12 13 10 15 8 15 12\"></polygon> <line class=\"ql-stroke ql-fill\" x1=9 x2=5 y1=4 y2=4></line> <path class=ql-fill d=M5,3A3,3,0,0,0,5,9H6V3H5Z></path> <rect class=ql-fill height=11 width=1 x=5 y=4></rect> <rect class=ql-fill height=11 width=1 x=7 y=4></rect> </svg>";

    	/***/ }),
    	/* 87 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M14,16H4a1,1,0,0,1,0-2H14A1,1,0,0,1,14,16Z /> <path class=ql-fill d=M14,4H4A1,1,0,0,1,4,2H14A1,1,0,0,1,14,4Z /> <rect class=ql-fill x=3 y=6 width=12 height=6 rx=1 ry=1 /> </svg>";

    	/***/ }),
    	/* 88 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M13,16H5a1,1,0,0,1,0-2h8A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H5A1,1,0,0,1,5,2h8A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=2 y=6 width=14 height=6 rx=1 ry=1 /> </svg>";

    	/***/ }),
    	/* 89 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15,8H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,8Z /> <path class=ql-fill d=M15,12H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,12Z /> <path class=ql-fill d=M15,16H5a1,1,0,0,1,0-2H15A1,1,0,0,1,15,16Z /> <path class=ql-fill d=M15,4H5A1,1,0,0,1,5,2H15A1,1,0,0,1,15,4Z /> <rect class=ql-fill x=2 y=6 width=8 height=6 rx=1 ry=1 /> </svg>";

    	/***/ }),
    	/* 90 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M5,8H3A1,1,0,0,1,3,6H5A1,1,0,0,1,5,8Z /> <path class=ql-fill d=M5,12H3a1,1,0,0,1,0-2H5A1,1,0,0,1,5,12Z /> <path class=ql-fill d=M13,16H3a1,1,0,0,1,0-2H13A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H3A1,1,0,0,1,3,2H13A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=8 y=6 width=8 height=6 rx=1 ry=1 transform=\"translate(24 18) rotate(-180)\"/> </svg>";

    	/***/ }),
    	/* 91 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M11.759,2.482a2.561,2.561,0,0,0-3.53.607A7.656,7.656,0,0,0,6.8,6.2C6.109,9.188,5.275,14.677,4.15,14.927a1.545,1.545,0,0,0-1.3-.933A0.922,0.922,0,0,0,2,15.036S1.954,16,4.119,16s3.091-2.691,3.7-5.553c0.177-.826.36-1.726,0.554-2.6L8.775,6.2c0.381-1.421.807-2.521,1.306-2.676a1.014,1.014,0,0,0,1.02.56A0.966,0.966,0,0,0,11.759,2.482Z></path> <rect class=ql-fill height=1.6 rx=0.8 ry=0.8 width=5 x=5.15 y=6.2></rect> <path class=ql-fill d=M13.663,12.027a1.662,1.662,0,0,1,.266-0.276q0.193,0.069.456,0.138a2.1,2.1,0,0,0,.535.069,1.075,1.075,0,0,0,.767-0.3,1.044,1.044,0,0,0,.314-0.8,0.84,0.84,0,0,0-.238-0.619,0.8,0.8,0,0,0-.594-0.239,1.154,1.154,0,0,0-.781.3,4.607,4.607,0,0,0-.781,1q-0.091.15-.218,0.346l-0.246.38c-0.068-.288-0.137-0.582-0.212-0.885-0.459-1.847-2.494-.984-2.941-0.8-0.482.2-.353,0.647-0.094,0.529a0.869,0.869,0,0,1,1.281.585c0.217,0.751.377,1.436,0.527,2.038a5.688,5.688,0,0,1-.362.467,2.69,2.69,0,0,1-.264.271q-0.221-.08-0.471-0.147a2.029,2.029,0,0,0-.522-0.066,1.079,1.079,0,0,0-.768.3A1.058,1.058,0,0,0,9,15.131a0.82,0.82,0,0,0,.832.852,1.134,1.134,0,0,0,.787-0.3,5.11,5.11,0,0,0,.776-0.993q0.141-.219.215-0.34c0.046-.076.122-0.194,0.223-0.346a2.786,2.786,0,0,0,.918,1.726,2.582,2.582,0,0,0,2.376-.185c0.317-.181.212-0.565,0-0.494A0.807,0.807,0,0,1,14.176,15a5.159,5.159,0,0,1-.913-2.446l0,0Q13.487,12.24,13.663,12.027Z></path> </svg>";

    	/***/ }),
    	/* 92 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewBox=\"0 0 18 18\"> <path class=ql-fill d=M10,4V14a1,1,0,0,1-2,0V10H3v4a1,1,0,0,1-2,0V4A1,1,0,0,1,3,4V8H8V4a1,1,0,0,1,2,0Zm6.06787,9.209H14.98975V7.59863a.54085.54085,0,0,0-.605-.60547h-.62744a1.01119,1.01119,0,0,0-.748.29688L11.645,8.56641a.5435.5435,0,0,0-.022.8584l.28613.30762a.53861.53861,0,0,0,.84717.0332l.09912-.08789a1.2137,1.2137,0,0,0,.2417-.35254h.02246s-.01123.30859-.01123.60547V13.209H12.041a.54085.54085,0,0,0-.605.60547v.43945a.54085.54085,0,0,0,.605.60547h4.02686a.54085.54085,0,0,0,.605-.60547v-.43945A.54085.54085,0,0,0,16.06787,13.209Z /> </svg>";

    	/***/ }),
    	/* 93 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewBox=\"0 0 18 18\"> <path class=ql-fill d=M16.73975,13.81445v.43945a.54085.54085,0,0,1-.605.60547H11.855a.58392.58392,0,0,1-.64893-.60547V14.0127c0-2.90527,3.39941-3.42187,3.39941-4.55469a.77675.77675,0,0,0-.84717-.78125,1.17684,1.17684,0,0,0-.83594.38477c-.2749.26367-.561.374-.85791.13184l-.4292-.34082c-.30811-.24219-.38525-.51758-.1543-.81445a2.97155,2.97155,0,0,1,2.45361-1.17676,2.45393,2.45393,0,0,1,2.68408,2.40918c0,2.45312-3.1792,2.92676-3.27832,3.93848h2.79443A.54085.54085,0,0,1,16.73975,13.81445ZM9,3A.99974.99974,0,0,0,8,4V8H3V4A1,1,0,0,0,1,4V14a1,1,0,0,0,2,0V10H8v4a1,1,0,0,0,2,0V4A.99974.99974,0,0,0,9,3Z /> </svg>";

    	/***/ }),
    	/* 94 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=13 y1=4 y2=4></line> <line class=ql-stroke x1=5 x2=11 y1=14 y2=14></line> <line class=ql-stroke x1=8 x2=10 y1=14 y2=4></line> </svg>";

    	/***/ }),
    	/* 95 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <rect class=ql-stroke height=10 width=12 x=3 y=4></rect> <circle class=ql-fill cx=6 cy=7 r=1></circle> <polyline class=\"ql-even ql-fill\" points=\"5 12 5 11 7 9 8 10 11 7 13 9 13 12 5 12\"></polyline> </svg>";

    	/***/ }),
    	/* 96 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=\"ql-fill ql-stroke\" points=\"3 7 3 11 5 9 3 7\"></polyline> </svg>";

    	/***/ }),
    	/* 97 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points=\"5 7 5 11 3 9 5 7\"></polyline> </svg>";

    	/***/ }),
    	/* 98 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=11 y1=7 y2=11></line> <path class=\"ql-even ql-stroke\" d=M8.9,4.577a3.476,3.476,0,0,1,.36,4.679A3.476,3.476,0,0,1,4.577,8.9C3.185,7.5,2.035,6.4,4.217,4.217S7.5,3.185,8.9,4.577Z></path> <path class=\"ql-even ql-stroke\" d=M13.423,9.1a3.476,3.476,0,0,0-4.679-.36,3.476,3.476,0,0,0,.36,4.679c1.392,1.392,2.5,2.542,4.679.36S14.815,10.5,13.423,9.1Z></path> </svg>";

    	/***/ }),
    	/* 99 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=7 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=7 x2=15 y1=14 y2=14></line> <line class=\"ql-stroke ql-thin\" x1=2.5 x2=4.5 y1=5.5 y2=5.5></line> <path class=ql-fill d=M3.5,6A0.5,0.5,0,0,1,3,5.5V3.085l-0.276.138A0.5,0.5,0,0,1,2.053,3c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,4,2.5v3A0.5,0.5,0,0,1,3.5,6Z></path> <path class=\"ql-stroke ql-thin\" d=M4.5,10.5h-2c0-.234,1.85-1.076,1.85-2.234A0.959,0.959,0,0,0,2.5,8.156></path> <path class=\"ql-stroke ql-thin\" d=M2.5,14.846a0.959,0.959,0,0,0,1.85-.109A0.7,0.7,0,0,0,3.75,14a0.688,0.688,0,0,0,.6-0.736,0.959,0.959,0,0,0-1.85-.109></path> </svg>";

    	/***/ }),
    	/* 100 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=6 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=6 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=6 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=3 y1=4 y2=4></line> <line class=ql-stroke x1=3 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=3 y1=14 y2=14></line> </svg>";

    	/***/ }),
    	/* 101 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg class=\"\" viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=9 x2=15 y1=4 y2=4></line> <polyline class=ql-stroke points=\"3 4 4 5 6 3\"></polyline> <line class=ql-stroke x1=9 x2=15 y1=14 y2=14></line> <polyline class=ql-stroke points=\"3 14 4 15 6 13\"></polyline> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points=\"3 9 4 10 6 8\"></polyline> </svg>";

    	/***/ }),
    	/* 102 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15.5,15H13.861a3.858,3.858,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.921,1.921,0,0,0,12.021,11.7a0.50013,0.50013,0,1,0,.957.291h0a0.914,0.914,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.076-1.16971,1.86982-1.93971,2.43082A1.45639,1.45639,0,0,0,12,15.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,15Z /> <path class=ql-fill d=M9.65,5.241a1,1,0,0,0-1.409.108L6,7.964,3.759,5.349A1,1,0,0,0,2.192,6.59178Q2.21541,6.6213,2.241,6.649L4.684,9.5,2.241,12.35A1,1,0,0,0,3.71,13.70722q0.02557-.02768.049-0.05722L6,11.036,8.241,13.65a1,1,0,1,0,1.567-1.24277Q9.78459,12.3777,9.759,12.35L7.316,9.5,9.759,6.651A1,1,0,0,0,9.65,5.241Z /> </svg>";

    	/***/ }),
    	/* 103 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15.5,7H13.861a4.015,4.015,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.922,1.922,0,0,0,12.021,3.7a0.5,0.5,0,1,0,.957.291,0.917,0.917,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.077-1.164,1.925-1.934,2.486A1.423,1.423,0,0,0,12,7.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,7Z /> <path class=ql-fill d=M9.651,5.241a1,1,0,0,0-1.41.108L6,7.964,3.759,5.349a1,1,0,1,0-1.519,1.3L4.683,9.5,2.241,12.35a1,1,0,1,0,1.519,1.3L6,11.036,8.241,13.65a1,1,0,0,0,1.519-1.3L7.317,9.5,9.759,6.651A1,1,0,0,0,9.651,5.241Z /> </svg>";

    	/***/ }),
    	/* 104 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=\"ql-stroke ql-thin\" x1=15.5 x2=2.5 y1=8.5 y2=9.5></line> <path class=ql-fill d=M9.007,8C6.542,7.791,6,7.519,6,6.5,6,5.792,7.283,5,9,5c1.571,0,2.765.679,2.969,1.309a1,1,0,0,0,1.9-.617C13.356,4.106,11.354,3,9,3,6.2,3,4,4.538,4,6.5a3.2,3.2,0,0,0,.5,1.843Z></path> <path class=ql-fill d=M8.984,10C11.457,10.208,12,10.479,12,11.5c0,0.708-1.283,1.5-3,1.5-1.571,0-2.765-.679-2.969-1.309a1,1,0,1,0-1.9.617C4.644,13.894,6.646,15,9,15c2.8,0,5-1.538,5-3.5a3.2,3.2,0,0,0-.5-1.843Z></path> </svg>";

    	/***/ }),
    	/* 105 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-stroke d=M5,3V9a4.012,4.012,0,0,0,4,4H9a4.012,4.012,0,0,0,4-4V3></path> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=12 x=3 y=15></rect> </svg>";

    	/***/ }),
    	/* 106 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <rect class=ql-stroke height=12 width=12 x=3 y=3></rect> <rect class=ql-fill height=12 width=1 x=5 y=3></rect> <rect class=ql-fill height=12 width=1 x=12 y=3></rect> <rect class=ql-fill height=2 width=8 x=5 y=8></rect> <rect class=ql-fill height=1 width=3 x=3 y=5></rect> <rect class=ql-fill height=1 width=3 x=3 y=7></rect> <rect class=ql-fill height=1 width=3 x=3 y=10></rect> <rect class=ql-fill height=1 width=3 x=3 y=12></rect> <rect class=ql-fill height=1 width=3 x=12 y=5></rect> <rect class=ql-fill height=1 width=3 x=12 y=7></rect> <rect class=ql-fill height=1 width=3 x=12 y=10></rect> <rect class=ql-fill height=1 width=3 x=12 y=12></rect> </svg>";

    	/***/ }),
    	/* 107 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <polygon class=ql-stroke points=\"7 11 9 13 11 11 7 11\"></polygon> <polygon class=ql-stroke points=\"7 7 9 5 11 7 7 7\"></polygon> </svg>";

    	/***/ }),
    	/* 108 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.default = exports.BubbleTooltip = undefined;

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _extend = __webpack_require__(3);

    	var _extend2 = _interopRequireDefault(_extend);

    	var _emitter = __webpack_require__(8);

    	var _emitter2 = _interopRequireDefault(_emitter);

    	var _base = __webpack_require__(43);

    	var _base2 = _interopRequireDefault(_base);

    	var _selection = __webpack_require__(15);

    	var _icons = __webpack_require__(41);

    	var _icons2 = _interopRequireDefault(_icons);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var TOOLBAR_CONFIG = [['bold', 'italic', 'link'], [{ header: 1 }, { header: 2 }, 'blockquote']];

    	var BubbleTheme = function (_BaseTheme) {
    	  _inherits(BubbleTheme, _BaseTheme);

    	  function BubbleTheme(quill, options) {
    	    _classCallCheck(this, BubbleTheme);

    	    if (options.modules.toolbar != null && options.modules.toolbar.container == null) {
    	      options.modules.toolbar.container = TOOLBAR_CONFIG;
    	    }

    	    var _this = _possibleConstructorReturn(this, (BubbleTheme.__proto__ || Object.getPrototypeOf(BubbleTheme)).call(this, quill, options));

    	    _this.quill.container.classList.add('ql-bubble');
    	    return _this;
    	  }

    	  _createClass(BubbleTheme, [{
    	    key: 'extendToolbar',
    	    value: function extendToolbar(toolbar) {
    	      this.tooltip = new BubbleTooltip(this.quill, this.options.bounds);
    	      this.tooltip.root.appendChild(toolbar.container);
    	      this.buildButtons([].slice.call(toolbar.container.querySelectorAll('button')), _icons2.default);
    	      this.buildPickers([].slice.call(toolbar.container.querySelectorAll('select')), _icons2.default);
    	    }
    	  }]);

    	  return BubbleTheme;
    	}(_base2.default);

    	BubbleTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {
    	  modules: {
    	    toolbar: {
    	      handlers: {
    	        link: function link(value) {
    	          if (!value) {
    	            this.quill.format('link', false);
    	          } else {
    	            this.quill.theme.tooltip.edit();
    	          }
    	        }
    	      }
    	    }
    	  }
    	});

    	var BubbleTooltip = function (_BaseTooltip) {
    	  _inherits(BubbleTooltip, _BaseTooltip);

    	  function BubbleTooltip(quill, bounds) {
    	    _classCallCheck(this, BubbleTooltip);

    	    var _this2 = _possibleConstructorReturn(this, (BubbleTooltip.__proto__ || Object.getPrototypeOf(BubbleTooltip)).call(this, quill, bounds));

    	    _this2.quill.on(_emitter2.default.events.EDITOR_CHANGE, function (type, range, oldRange, source) {
    	      if (type !== _emitter2.default.events.SELECTION_CHANGE) return;
    	      if (range != null && range.length > 0 && source === _emitter2.default.sources.USER) {
    	        _this2.show();
    	        // Lock our width so we will expand beyond our offsetParent boundaries
    	        _this2.root.style.left = '0px';
    	        _this2.root.style.width = '';
    	        _this2.root.style.width = _this2.root.offsetWidth + 'px';
    	        var lines = _this2.quill.getLines(range.index, range.length);
    	        if (lines.length === 1) {
    	          _this2.position(_this2.quill.getBounds(range));
    	        } else {
    	          var lastLine = lines[lines.length - 1];
    	          var index = _this2.quill.getIndex(lastLine);
    	          var length = Math.min(lastLine.length() - 1, range.index + range.length - index);
    	          var _bounds = _this2.quill.getBounds(new _selection.Range(index, length));
    	          _this2.position(_bounds);
    	        }
    	      } else if (document.activeElement !== _this2.textbox && _this2.quill.hasFocus()) {
    	        _this2.hide();
    	      }
    	    });
    	    return _this2;
    	  }

    	  _createClass(BubbleTooltip, [{
    	    key: 'listen',
    	    value: function listen() {
    	      var _this3 = this;

    	      _get(BubbleTooltip.prototype.__proto__ || Object.getPrototypeOf(BubbleTooltip.prototype), 'listen', this).call(this);
    	      this.root.querySelector('.ql-close').addEventListener('click', function () {
    	        _this3.root.classList.remove('ql-editing');
    	      });
    	      this.quill.on(_emitter2.default.events.SCROLL_OPTIMIZE, function () {
    	        // Let selection be restored by toolbar handlers before repositioning
    	        setTimeout(function () {
    	          if (_this3.root.classList.contains('ql-hidden')) return;
    	          var range = _this3.quill.getSelection();
    	          if (range != null) {
    	            _this3.position(_this3.quill.getBounds(range));
    	          }
    	        }, 1);
    	      });
    	    }
    	  }, {
    	    key: 'cancel',
    	    value: function cancel() {
    	      this.show();
    	    }
    	  }, {
    	    key: 'position',
    	    value: function position(reference) {
    	      var shift = _get(BubbleTooltip.prototype.__proto__ || Object.getPrototypeOf(BubbleTooltip.prototype), 'position', this).call(this, reference);
    	      var arrow = this.root.querySelector('.ql-tooltip-arrow');
    	      arrow.style.marginLeft = '';
    	      if (shift === 0) return shift;
    	      arrow.style.marginLeft = -1 * shift - arrow.offsetWidth / 2 + 'px';
    	    }
    	  }]);

    	  return BubbleTooltip;
    	}(_base.BaseTooltip);

    	BubbleTooltip.TEMPLATE = ['<span class="ql-tooltip-arrow"></span>', '<div class="ql-tooltip-editor">', '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">', '<a class="ql-close"></a>', '</div>'].join('');

    	exports.BubbleTooltip = BubbleTooltip;
    	exports.default = BubbleTheme;

    	/***/ }),
    	/* 109 */
    	/***/ (function(module, exports, __webpack_require__) {

    	module.exports = __webpack_require__(63);


    	/***/ })
    	/******/ ])["default"];
    	});
    	});

    	var Quill = unwrapExports(quill);

    	function quill$1(node, options) {
    	  const quill = new Quill(node, {
    	    modules: {
    	      toolbar: [
    	        [{ header: [1, 2, 3, false] }],
    	        ["bold", "italic", "underline", "strike"],
    	        ["link", "code-block"]
    	      ]
    	    },
    	    placeholder: "Type something...",
    	    theme: "snow", // or 'bubble'
    	    ...options
    	  });
    	  const container = node.getElementsByClassName("ql-editor")[0];

    	  quill.on("text-change", function(delta, oldDelta, source) {
    	    node.dispatchEvent(
    	      new CustomEvent("text-change", {
    	        detail: {
    	          html: container.innerHTML,
    	          text: quill.getText()
    	        }
    	      })
    	    );
    	  });
    	}

    	exports.quill = quill$1;

    	Object.defineProperty(exports, '__esModule', { value: true });

    })));
    });

    /* src\components\reporter\Create.svelte generated by Svelte v3.48.0 */

    const { console: console_1 } = globals;
    const file$6 = "src\\components\\reporter\\Create.svelte";

    // (117:43) {:else}
    function create_else_block_1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Publish articles");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1.name,
    		type: "else",
    		source: "(117:43) {:else}",
    		ctx
    	});

    	return block;
    }

    // (117:2) {#if updateContext == true}
    function create_if_block_11(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Update article");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_11.name,
    		type: "if",
    		source: "(117:2) {#if updateContext == true}",
    		ctx
    	});

    	return block;
    }

    // (121:2) <TextField     on:change={(e) => titleCheck(e)}     on:input={(e) => titleCheck(e)}     on:keydown={(e) => titleCheck(e)}     placeholder="Title"     id="title"     outlined     >
    function create_default_slot_7$3(ctx) {
    	let t_value = Config.text.reporterActions.publishStory.titlePlaceholder + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$3.name,
    		type: "slot",
    		source: "(121:2) <TextField     on:change={(e) => titleCheck(e)}     on:input={(e) => titleCheck(e)}     on:keydown={(e) => titleCheck(e)}     placeholder=\\\"Title\\\"     id=\\\"title\\\"     outlined     >",
    		ctx
    	});

    	return block;
    }

    // (132:2) <TextField     on:change={(e) => imageUrlCheck(e)}     on:input={(e) => imageUrlCheck(e)}     on:keydown={(e) => imageUrlCheck(e)}     placeholder="Image URL"     id="image"     outlined     >
    function create_default_slot_6$3(ctx) {
    	let t_value = Config.text.reporterActions.publishStory.imagePlaceholder + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$3.name,
    		type: "slot",
    		source: "(132:2) <TextField     on:change={(e) => imageUrlCheck(e)}     on:input={(e) => imageUrlCheck(e)}     on:keydown={(e) => imageUrlCheck(e)}     placeholder=\\\"Image URL\\\"     id=\\\"image\\\"     outlined     >",
    		ctx
    	});

    	return block;
    }

    // (145:5) {#if !validUrl}
    function create_if_block_10(ctx) {
    	let t_value = Config.text.reporterActions.publishStory.wrongImageFormat + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10.name,
    		type: "if",
    		source: "(145:5) {#if !validUrl}",
    		ctx
    	});

    	return block;
    }

    // (161:13) {:else}
    function create_else_block$1(ctx) {
    	let t_value = Config.text.reporterActions.publishStory.publish + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(161:13) {:else}",
    		ctx
    	});

    	return block;
    }

    // (160:4) {#if updateContext}
    function create_if_block_9(ctx) {
    	let t_value = Config.text.reporterActions.publishStory.update + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9.name,
    		type: "if",
    		source: "(160:4) {#if updateContext}",
    		ctx
    	});

    	return block;
    }

    // (156:2) <Button     disabled={!validBody || !validTitle || !validUrl}     on:click={publishArticle}     class="green white-text"     >
    function create_default_slot_5$3(ctx) {
    	let if_block_anchor;

    	function select_block_type_1(ctx, dirty) {
    		if (/*updateContext*/ ctx[1]) return create_if_block_9;
    		return create_else_block$1;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$3.name,
    		type: "slot",
    		source: "(156:2) <Button     disabled={!validBody || !validTitle || !validUrl}     on:click={publishArticle}     class=\\\"green white-text\\\"     >",
    		ctx
    	});

    	return block;
    }

    // (165:2) {#if !updateContext}
    function create_if_block_8(ctx) {
    	let button;
    	let current;

    	button = new Button({
    			props: {
    				disabled: !/*validBody*/ ctx[7] || !/*validTitle*/ ctx[8] || !/*validUrl*/ ctx[6],
    				$$slots: { default: [create_default_slot_4$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button.$on("click", /*click_handler*/ ctx[25]);

    	const block = {
    		c: function create() {
    			create_component(button.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(button, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button_changes = {};
    			if (dirty[0] & /*validBody, validTitle, validUrl*/ 448) button_changes.disabled = !/*validBody*/ ctx[7] || !/*validTitle*/ ctx[8] || !/*validUrl*/ ctx[6];

    			if (dirty[1] & /*$$scope*/ 8) {
    				button_changes.$$scope = { dirty, ctx };
    			}

    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(button, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8.name,
    		type: "if",
    		source: "(165:2) {#if !updateContext}",
    		ctx
    	});

    	return block;
    }

    // (165:22) <Button      disabled={!validBody || !validTitle || !validUrl}      on:click={() => (active = true)}      >
    function create_default_slot_4$3(ctx) {
    	let t_value = Config.text.reporterActions.publishStory.preview + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$3.name,
    		type: "slot",
    		source: "(165:22) <Button      disabled={!validBody || !validTitle || !validUrl}      on:click={() => (active = true)}      >",
    		ctx
    	});

    	return block;
    }

    // (171:2) {#if updateContext}
    function create_if_block_7(ctx) {
    	let button;
    	let current;

    	button = new Button({
    			props: {
    				$$slots: { default: [create_default_slot_3$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button.$on("click", function () {
    		if (is_function(/*close*/ ctx[3])) /*close*/ ctx[3].apply(this, arguments);
    	});

    	const block = {
    		c: function create() {
    			create_component(button.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(button, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const button_changes = {};

    			if (dirty[1] & /*$$scope*/ 8) {
    				button_changes.$$scope = { dirty, ctx };
    			}

    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(button, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7.name,
    		type: "if",
    		source: "(171:2) {#if updateContext}",
    		ctx
    	});

    	return block;
    }

    // (171:21) <Button on:click={close}      >
    function create_default_slot_3$4(ctx) {
    	let t_value = Config.text.reporterActions.publishStory.discardChanges + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$4.name,
    		type: "slot",
    		source: "(171:21) <Button on:click={close}      >",
    		ctx
    	});

    	return block;
    }

    // (184:2) {#if Config.articles.showImage}
    function create_if_block_5(ctx) {
    	let if_block_anchor;
    	let if_block = /*imageValue*/ ctx[5] && create_if_block_6(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (/*imageValue*/ ctx[5]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_6(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5.name,
    		type: "if",
    		source: "(184:2) {#if Config.articles.showImage}",
    		ctx
    	});

    	return block;
    }

    // (185:3) {#if imageValue}
    function create_if_block_6(ctx) {
    	let div;
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			div = element("div");
    			img = element("img");
    			attr_dev(img, "width", "100%");
    			if (!src_url_equal(img.src, img_src_value = /*imageValue*/ ctx[5])) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "Story image");
    			add_location(img, file$6, 186, 5, 5397);
    			attr_dev(div, "class", "main_article_image");
    			add_location(div, file$6, 184, 19, 5306);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, img);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*imageValue*/ 32 && !src_url_equal(img.src, img_src_value = /*imageValue*/ ctx[5])) {
    				attr_dev(img, "src", img_src_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6.name,
    		type: "if",
    		source: "(185:3) {#if imageValue}",
    		ctx
    	});

    	return block;
    }

    // (192:2) {#if Config.articles.showTitle}
    function create_if_block_4$1(ctx) {
    	let h4;
    	let t;

    	const block = {
    		c: function create() {
    			h4 = element("h4");
    			t = text(/*titleValue*/ ctx[4]);
    			attr_dev(h4, "class", "mt-2");
    			add_location(h4, file$6, 192, 3, 5525);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h4, anchor);
    			append_dev(h4, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*titleValue*/ 16) set_data_dev(t, /*titleValue*/ ctx[4]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$1.name,
    		type: "if",
    		source: "(192:2) {#if Config.articles.showTitle}",
    		ctx
    	});

    	return block;
    }

    // (198:2) {#if Config.articles.showPublisher || Config.articles.showDate}
    function create_if_block$2(ctx) {
    	let p;
    	let small;
    	let if_block0_anchor;
    	let if_block0 = Config.articles.showPublisher && create_if_block_2$2(ctx);
    	let if_block1 = Config.articles.showDate && create_if_block_1$2(ctx);

    	const block = {
    		c: function create() {
    			p = element("p");
    			small = element("small");
    			if (if_block0) if_block0.c();
    			if_block0_anchor = empty();
    			if (if_block1) if_block1.c();
    			add_location(small, file$6, 199, 4, 5662);
    			add_location(p, file$6, 198, 3, 5653);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, small);
    			if (if_block0) if_block0.m(small, null);
    			append_dev(small, if_block0_anchor);
    			if (if_block1) if_block1.m(small, null);
    		},
    		p: function update(ctx, dirty) {
    			if (Config.articles.showPublisher) if_block0.p(ctx, dirty);
    			if (Config.articles.showDate) if_block1.p(ctx, dirty);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(198:2) {#if Config.articles.showPublisher || Config.articles.showDate}",
    		ctx
    	});

    	return block;
    }

    // (201:6) {#if Config.articles.showPublisher}
    function create_if_block_2$2(ctx) {
    	let t0_value = Config.text.articles.writtenBy + "";
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let if_block = Config.articles.showPublisher && Config.articles.showDate && create_if_block_3$2(ctx);

    	const block = {
    		c: function create() {
    			t0 = text(t0_value);
    			t1 = space();
    			t2 = text(/*playerName*/ ctx[2]);
    			t3 = space();
    			if (if_block) if_block.c();
    			t4 = space();
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, t3, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, t4, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*playerName*/ 4) set_data_dev(t2, /*playerName*/ ctx[2]);
    			if (Config.articles.showPublisher && Config.articles.showDate) if_block.p(ctx, dirty);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(t3);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(t4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$2.name,
    		type: "if",
    		source: "(201:6) {#if Config.articles.showPublisher}",
    		ctx
    	});

    	return block;
    }

    // (204:6) {#if Config.articles.showPublisher && Config.articles.showDate}
    function create_if_block_3$2(ctx) {
    	let t_value = Config.text.articles.on + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$2.name,
    		type: "if",
    		source: "(204:6) {#if Config.articles.showPublisher && Config.articles.showDate}",
    		ctx
    	});

    	return block;
    }

    // (206:10) {#if Config.articles.showDate}
    function create_if_block_1$2(ctx) {
    	let t_value = moment(new Date()).format('MMMM Do YYYY') + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$2.name,
    		type: "if",
    		source: "(206:10) {#if Config.articles.showDate}",
    		ctx
    	});

    	return block;
    }

    // (217:2) <Button on:click={publishArticle} class="green white-text"     >
    function create_default_slot_2$3(ctx) {
    	let t_value = Config.text.reporterActions.publishStory.publish + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$3.name,
    		type: "slot",
    		source: "(217:2) <Button on:click={publishArticle} class=\\\"green white-text\\\"     >",
    		ctx
    	});

    	return block;
    }

    // (221:2) <Button on:click={() => hidePreview()}     >
    function create_default_slot_1$5(ctx) {
    	let t_value = Config.text.reporterActions.publishStory.cancel + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$5.name,
    		type: "slot",
    		source: "(221:2) <Button on:click={() => hidePreview()}     >",
    		ctx
    	});

    	return block;
    }

    // (178:0) <Dialog   bind:active   on:introstart={showPreview}   class="pa-4 preview-story-dialog"  >
    function create_default_slot$5(ctx) {
    	let div1;
    	let t0;
    	let t1;
    	let t2;
    	let div0;
    	let t3;
    	let div2;
    	let button0;
    	let t4;
    	let button1;
    	let current;
    	let if_block0 = Config.articles.showImage && create_if_block_5(ctx);
    	let if_block1 = Config.articles.showTitle && create_if_block_4$1(ctx);
    	let if_block2 = (Config.articles.showPublisher || Config.articles.showDate) && create_if_block$2(ctx);

    	button0 = new Button({
    			props: {
    				class: "green white-text",
    				$$slots: { default: [create_default_slot_2$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button0.$on("click", /*publishArticle*/ ctx[10]);

    	button1 = new Button({
    			props: {
    				$$slots: { default: [create_default_slot_1$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button1.$on("click", /*click_handler_1*/ ctx[26]);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			t2 = space();
    			div0 = element("div");
    			t3 = space();
    			div2 = element("div");
    			create_component(button0.$$.fragment);
    			t4 = space();
    			create_component(button1.$$.fragment);
    			attr_dev(div0, "id", "preview-story-body");
    			add_location(div0, file$6, 212, 2, 6028);
    			attr_dev(div1, "class", "preview-content");
    			add_location(div1, file$6, 182, 1, 5221);
    			attr_dev(div2, "class", "action-buttons");
    			add_location(div2, file$6, 215, 1, 6073);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			if (if_block0) if_block0.m(div1, null);
    			append_dev(div1, t0);
    			if (if_block1) if_block1.m(div1, null);
    			append_dev(div1, t1);
    			if (if_block2) if_block2.m(div1, null);
    			append_dev(div1, t2);
    			append_dev(div1, div0);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div2, anchor);
    			mount_component(button0, div2, null);
    			append_dev(div2, t4);
    			mount_component(button1, div2, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (Config.articles.showImage) if_block0.p(ctx, dirty);
    			if (Config.articles.showTitle) if_block1.p(ctx, dirty);
    			if (Config.articles.showPublisher || Config.articles.showDate) if_block2.p(ctx, dirty);
    			const button0_changes = {};

    			if (dirty[1] & /*$$scope*/ 8) {
    				button0_changes.$$scope = { dirty, ctx };
    			}

    			button0.$set(button0_changes);
    			const button1_changes = {};

    			if (dirty[1] & /*$$scope*/ 8) {
    				button1_changes.$$scope = { dirty, ctx };
    			}

    			button1.$set(button1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button0.$$.fragment, local);
    			transition_in(button1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button0.$$.fragment, local);
    			transition_out(button1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div2);
    			destroy_component(button0);
    			destroy_component(button1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$5.name,
    		type: "slot",
    		source: "(178:0) <Dialog   bind:active   on:introstart={showPreview}   class=\\\"pa-4 preview-story-dialog\\\"  >",
    		ctx
    	});

    	return block;
    }

    function create_fragment$6(ctx) {
    	let div1;
    	let h4;
    	let t0;
    	let br;
    	let t1;
    	let form;
    	let textfield0;
    	let t2;
    	let textfield1;
    	let t3;
    	let p;
    	let small;
    	let t4;
    	let div0;
    	let t5;
    	let button;
    	let t6;
    	let t7;
    	let t8;
    	let dialog;
    	let updating_active;
    	let current;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*updateContext*/ ctx[1] == true) return create_if_block_11;
    		return create_else_block_1;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block0 = current_block_type(ctx);

    	textfield0 = new TextField({
    			props: {
    				placeholder: "Title",
    				id: "title",
    				outlined: true,
    				$$slots: { default: [create_default_slot_7$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	textfield0.$on("change", /*change_handler*/ ctx[18]);
    	textfield0.$on("input", /*input_handler*/ ctx[19]);
    	textfield0.$on("keydown", /*keydown_handler*/ ctx[20]);

    	textfield1 = new TextField({
    			props: {
    				placeholder: "Image URL",
    				id: "image",
    				outlined: true,
    				$$slots: { default: [create_default_slot_6$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	textfield1.$on("change", /*change_handler_1*/ ctx[21]);
    	textfield1.$on("input", /*input_handler_1*/ ctx[22]);
    	textfield1.$on("keydown", /*keydown_handler_1*/ ctx[23]);
    	let if_block1 = !/*validUrl*/ ctx[6] && create_if_block_10(ctx);

    	button = new Button({
    			props: {
    				disabled: !/*validBody*/ ctx[7] || !/*validTitle*/ ctx[8] || !/*validUrl*/ ctx[6],
    				class: "green white-text",
    				$$slots: { default: [create_default_slot_5$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button.$on("click", /*publishArticle*/ ctx[10]);
    	let if_block2 = !/*updateContext*/ ctx[1] && create_if_block_8(ctx);
    	let if_block3 = /*updateContext*/ ctx[1] && create_if_block_7(ctx);

    	function dialog_active_binding(value) {
    		/*dialog_active_binding*/ ctx[27](value);
    	}

    	let dialog_props = {
    		class: "pa-4 preview-story-dialog",
    		$$slots: { default: [create_default_slot$5] },
    		$$scope: { ctx }
    	};

    	if (/*active*/ ctx[0] !== void 0) {
    		dialog_props.active = /*active*/ ctx[0];
    	}

    	dialog = new Dialog({ props: dialog_props, $$inline: true });
    	binding_callbacks.push(() => bind(dialog, 'active', dialog_active_binding));
    	dialog.$on("introstart", /*showPreview*/ ctx[14]);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			h4 = element("h4");
    			if_block0.c();
    			t0 = space();
    			br = element("br");
    			t1 = space();
    			form = element("form");
    			create_component(textfield0.$$.fragment);
    			t2 = space();
    			create_component(textfield1.$$.fragment);
    			t3 = space();
    			p = element("p");
    			small = element("small");
    			if (if_block1) if_block1.c();
    			t4 = space();
    			div0 = element("div");
    			t5 = space();
    			create_component(button.$$.fragment);
    			t6 = space();
    			if (if_block2) if_block2.c();
    			t7 = space();
    			if (if_block3) if_block3.c();
    			t8 = space();
    			create_component(dialog.$$.fragment);
    			add_location(h4, file$6, 115, 1, 3549);
    			add_location(br, file$6, 118, 1, 3637);
    			add_location(small, file$6, 143, 3, 4238);
    			attr_dev(p, "class", "error-text");
    			add_location(p, file$6, 142, 2, 4211);
    			attr_dev(div0, "class", "editor mb-2 svelte-1k6kowq");
    			add_location(div0, file$6, 150, 2, 4370);
    			attr_dev(form, "id", "form");
    			add_location(form, file$6, 119, 1, 3646);
    			attr_dev(div1, "class", "pt-4 container svelte-1k6kowq");
    			add_location(div1, file$6, 114, 0, 3518);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, h4);
    			if_block0.m(h4, null);
    			append_dev(div1, t0);
    			append_dev(div1, br);
    			append_dev(div1, t1);
    			append_dev(div1, form);
    			mount_component(textfield0, form, null);
    			append_dev(form, t2);
    			mount_component(textfield1, form, null);
    			append_dev(form, t3);
    			append_dev(form, p);
    			append_dev(p, small);
    			if (if_block1) if_block1.m(small, null);
    			append_dev(form, t4);
    			append_dev(form, div0);
    			append_dev(form, t5);
    			mount_component(button, form, null);
    			append_dev(form, t6);
    			if (if_block2) if_block2.m(form, null);
    			append_dev(form, t7);
    			if (if_block3) if_block3.m(form, null);
    			insert_dev(target, t8, anchor);
    			mount_component(dialog, target, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(index_umd.quill.call(null, div0, /*options*/ ctx[9])),
    					listen_dev(div0, "text-change", /*text_change_handler*/ ctx[24], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(h4, null);
    				}
    			}

    			const textfield0_changes = {};

    			if (dirty[1] & /*$$scope*/ 8) {
    				textfield0_changes.$$scope = { dirty, ctx };
    			}

    			textfield0.$set(textfield0_changes);
    			const textfield1_changes = {};

    			if (dirty[1] & /*$$scope*/ 8) {
    				textfield1_changes.$$scope = { dirty, ctx };
    			}

    			textfield1.$set(textfield1_changes);

    			if (!/*validUrl*/ ctx[6]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_10(ctx);
    					if_block1.c();
    					if_block1.m(small, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			const button_changes = {};
    			if (dirty[0] & /*validBody, validTitle, validUrl*/ 448) button_changes.disabled = !/*validBody*/ ctx[7] || !/*validTitle*/ ctx[8] || !/*validUrl*/ ctx[6];

    			if (dirty[0] & /*updateContext*/ 2 | dirty[1] & /*$$scope*/ 8) {
    				button_changes.$$scope = { dirty, ctx };
    			}

    			button.$set(button_changes);

    			if (!/*updateContext*/ ctx[1]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty[0] & /*updateContext*/ 2) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_8(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(form, t7);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			if (/*updateContext*/ ctx[1]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);

    					if (dirty[0] & /*updateContext*/ 2) {
    						transition_in(if_block3, 1);
    					}
    				} else {
    					if_block3 = create_if_block_7(ctx);
    					if_block3.c();
    					transition_in(if_block3, 1);
    					if_block3.m(form, null);
    				}
    			} else if (if_block3) {
    				group_outros();

    				transition_out(if_block3, 1, 1, () => {
    					if_block3 = null;
    				});

    				check_outros();
    			}

    			const dialog_changes = {};

    			if (dirty[0] & /*playerName, titleValue, imageValue*/ 52 | dirty[1] & /*$$scope*/ 8) {
    				dialog_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_active && dirty[0] & /*active*/ 1) {
    				updating_active = true;
    				dialog_changes.active = /*active*/ ctx[0];
    				add_flush_callback(() => updating_active = false);
    			}

    			dialog.$set(dialog_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textfield0.$$.fragment, local);
    			transition_in(textfield1.$$.fragment, local);
    			transition_in(button.$$.fragment, local);
    			transition_in(if_block2);
    			transition_in(if_block3);
    			transition_in(dialog.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textfield0.$$.fragment, local);
    			transition_out(textfield1.$$.fragment, local);
    			transition_out(button.$$.fragment, local);
    			transition_out(if_block2);
    			transition_out(if_block3);
    			transition_out(dialog.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if_block0.d();
    			destroy_component(textfield0);
    			destroy_component(textfield1);
    			if (if_block1) if_block1.d();
    			destroy_component(button);
    			if (if_block2) if_block2.d();
    			if (if_block3) if_block3.d();
    			if (detaching) detach_dev(t8);
    			destroy_component(dialog, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function isImage(url) {
    	return (/\.(jpg|jpeg|png|webp|avif|gif|svg)$/).test(url);
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Create', slots, []);
    	let { updateContext } = $$props;
    	let { stories } = $$props;
    	let { updateId } = $$props;
    	let { active } = $$props;
    	let { playerName } = $$props;

    	let { close = () => {
    		
    	} } = $$props;

    	const options = {
    		modules: { toolbar: Config.publishArticleControls },
    		placeholder: Config.text.reporterActions.publishStory.textareaPlaceholder,
    		theme: 'snow'
    	};

    	let titleInput;
    	let imageInput;
    	let bodyInput;
    	let titleValue = '';
    	let imageValue = '';
    	let bodyValue = '';
    	let story;
    	let validUrl = true;
    	let validBody = false;
    	let validTitle = false;

    	onMount(() => {
    		titleInput = document.querySelector('#title');
    		imageInput = document.querySelector('#image');
    		bodyInput = document.querySelector('.ql-editor');

    		if (updateContext === true) {
    			addStoryToForm(updateId);
    		}
    	});

    	function addStoryToForm(id) {
    		const story = stories.find(story => story.id === id);

    		if (story && titleInput && imageInput && bodyInput) {
    			titleInput.value = story.title;
    			imageInput.value = story.image;
    			bodyInput.innerHTML = story.body;
    			$$invalidate(4, titleValue = story.title);
    			$$invalidate(5, imageValue = story.image);
    			bodyValue = story.body;
    			$$invalidate(8, validTitle = true);
    			$$invalidate(7, validBody = true);
    			$$invalidate(6, validUrl = true);
    			titleInput.focus();
    		} else {
    			console.log('Could not find story to update');
    		}
    	}

    	function publishArticle() {
    		// Close preview
    		$$invalidate(0, active = false);

    		if (purify.isSupported) {
    			if (titleValue && bodyValue) {
    				story = {
    					id: updateId,
    					type: 'news',
    					image: imageValue,
    					title: titleValue,
    					body: bodyValue,
    					date: moment(new Date()).format('MMMM Do YYYY')
    				};

    				if (updateContext === true) {
    					fetchNui('updateStory', story);
    					close();
    				} else {
    					fetchNui('publishStory', story);
    				}
    			}
    		} else {
    			console.log('DOMPurify is not supported.');
    		}
    	}

    	function imageUrlCheck(e) {
    		$$invalidate(5, imageValue = purify.sanitize(e.target.value));
    		$$invalidate(6, validUrl = isImage(imageValue) || imageValue === '' ? true : false);
    	}

    	function titleCheck(e) {
    		$$invalidate(4, titleValue = purify.sanitize(e.target.value));
    		$$invalidate(8, validTitle = titleValue.length ? true : false);
    	}

    	function correctBodyValue(e) {
    		bodyValue = purify.sanitize(e.detail.html);

    		// If everything gets deleted from the textarea, <p><br></p> will still be left. Reset the value to ''
    		if (bodyValue === '<p><br></p>') {
    			bodyValue = undefined;
    		}

    		$$invalidate(7, validBody = (bodyValue === null || bodyValue === void 0
    		? void 0
    		: bodyValue.length)
    		? true
    		: false);
    	}

    	function showPreview() {
    		const previewStoryBody = document.querySelector('#preview-story-body');

    		if (bodyInput && previewStoryBody) {
    			previewStoryBody.innerHTML = bodyInput.innerHTML;
    		}
    	}

    	function hidePreview() {
    		$$invalidate(0, active = false);
    	}

    	const writable_props = ['updateContext', 'stories', 'updateId', 'active', 'playerName', 'close'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<Create> was created with unknown prop '${key}'`);
    	});

    	const change_handler = e => titleCheck(e);
    	const input_handler = e => titleCheck(e);
    	const keydown_handler = e => titleCheck(e);
    	const change_handler_1 = e => imageUrlCheck(e);
    	const input_handler_1 = e => imageUrlCheck(e);
    	const keydown_handler_1 = e => imageUrlCheck(e);
    	const text_change_handler = e => correctBodyValue(e);
    	const click_handler = () => $$invalidate(0, active = true);
    	const click_handler_1 = () => hidePreview();

    	function dialog_active_binding(value) {
    		active = value;
    		$$invalidate(0, active);
    	}

    	$$self.$$set = $$props => {
    		if ('updateContext' in $$props) $$invalidate(1, updateContext = $$props.updateContext);
    		if ('stories' in $$props) $$invalidate(16, stories = $$props.stories);
    		if ('updateId' in $$props) $$invalidate(17, updateId = $$props.updateId);
    		if ('active' in $$props) $$invalidate(0, active = $$props.active);
    		if ('playerName' in $$props) $$invalidate(2, playerName = $$props.playerName);
    		if ('close' in $$props) $$invalidate(3, close = $$props.close);
    	};

    	$$self.$capture_state = () => ({
    		Config,
    		DOMPurify: purify,
    		moment,
    		TextField,
    		Button,
    		Dialog,
    		quill: index_umd.quill,
    		fetchNui,
    		onMount,
    		updateContext,
    		stories,
    		updateId,
    		active,
    		playerName,
    		close,
    		options,
    		titleInput,
    		imageInput,
    		bodyInput,
    		titleValue,
    		imageValue,
    		bodyValue,
    		story,
    		validUrl,
    		validBody,
    		validTitle,
    		addStoryToForm,
    		publishArticle,
    		isImage,
    		imageUrlCheck,
    		titleCheck,
    		correctBodyValue,
    		showPreview,
    		hidePreview
    	});

    	$$self.$inject_state = $$props => {
    		if ('updateContext' in $$props) $$invalidate(1, updateContext = $$props.updateContext);
    		if ('stories' in $$props) $$invalidate(16, stories = $$props.stories);
    		if ('updateId' in $$props) $$invalidate(17, updateId = $$props.updateId);
    		if ('active' in $$props) $$invalidate(0, active = $$props.active);
    		if ('playerName' in $$props) $$invalidate(2, playerName = $$props.playerName);
    		if ('close' in $$props) $$invalidate(3, close = $$props.close);
    		if ('titleInput' in $$props) titleInput = $$props.titleInput;
    		if ('imageInput' in $$props) imageInput = $$props.imageInput;
    		if ('bodyInput' in $$props) bodyInput = $$props.bodyInput;
    		if ('titleValue' in $$props) $$invalidate(4, titleValue = $$props.titleValue);
    		if ('imageValue' in $$props) $$invalidate(5, imageValue = $$props.imageValue);
    		if ('bodyValue' in $$props) bodyValue = $$props.bodyValue;
    		if ('story' in $$props) story = $$props.story;
    		if ('validUrl' in $$props) $$invalidate(6, validUrl = $$props.validUrl);
    		if ('validBody' in $$props) $$invalidate(7, validBody = $$props.validBody);
    		if ('validTitle' in $$props) $$invalidate(8, validTitle = $$props.validTitle);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		active,
    		updateContext,
    		playerName,
    		close,
    		titleValue,
    		imageValue,
    		validUrl,
    		validBody,
    		validTitle,
    		options,
    		publishArticle,
    		imageUrlCheck,
    		titleCheck,
    		correctBodyValue,
    		showPreview,
    		hidePreview,
    		stories,
    		updateId,
    		change_handler,
    		input_handler,
    		keydown_handler,
    		change_handler_1,
    		input_handler_1,
    		keydown_handler_1,
    		text_change_handler,
    		click_handler,
    		click_handler_1,
    		dialog_active_binding
    	];
    }

    class Create extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$6,
    			create_fragment$6,
    			safe_not_equal,
    			{
    				updateContext: 1,
    				stories: 16,
    				updateId: 17,
    				active: 0,
    				playerName: 2,
    				close: 3
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Create",
    			options,
    			id: create_fragment$6.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*updateContext*/ ctx[1] === undefined && !('updateContext' in props)) {
    			console_1.warn("<Create> was created without expected prop 'updateContext'");
    		}

    		if (/*stories*/ ctx[16] === undefined && !('stories' in props)) {
    			console_1.warn("<Create> was created without expected prop 'stories'");
    		}

    		if (/*updateId*/ ctx[17] === undefined && !('updateId' in props)) {
    			console_1.warn("<Create> was created without expected prop 'updateId'");
    		}

    		if (/*active*/ ctx[0] === undefined && !('active' in props)) {
    			console_1.warn("<Create> was created without expected prop 'active'");
    		}

    		if (/*playerName*/ ctx[2] === undefined && !('playerName' in props)) {
    			console_1.warn("<Create> was created without expected prop 'playerName'");
    		}
    	}

    	get updateContext() {
    		throw new Error("<Create>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set updateContext(value) {
    		throw new Error("<Create>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get stories() {
    		throw new Error("<Create>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set stories(value) {
    		throw new Error("<Create>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get updateId() {
    		throw new Error("<Create>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set updateId(value) {
    		throw new Error("<Create>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get active() {
    		throw new Error("<Create>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set active(value) {
    		throw new Error("<Create>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get playerName() {
    		throw new Error("<Create>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set playerName(value) {
    		throw new Error("<Create>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get close() {
    		throw new Error("<Create>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set close(value) {
    		throw new Error("<Create>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    // Material Design Icons v6.8.96
    var mdiDeleteForever = "M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19M8.46,11.88L9.87,10.47L12,12.59L14.12,10.47L15.53,11.88L13.41,14L15.53,16.12L14.12,17.53L12,15.41L9.88,17.53L8.47,16.12L10.59,14L8.46,11.88M15.5,4L14.5,3H9.5L8.5,4H5V6H19V4H15.5Z";
    var mdiFileEdit = "M6 2C4.9 2 4 2.9 4 4V20C4 21.1 4.9 22 6 22H10V20.1L20 10.1V8L14 2H6M13 3.5L18.5 9H13V3.5M20.1 13C20 13 19.8 13.1 19.7 13.2L18.7 14.2L20.8 16.3L21.8 15.3C22 15.1 22 14.7 21.8 14.5L20.5 13.2C20.4 13.1 20.3 13 20.1 13M18.1 14.8L12 20.9V23H14.1L20.2 16.9L18.1 14.8Z";
    var mdiPencil = "M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z";
    var mdiStar = "M12,17.27L18.18,21L16.54,13.97L22,9.24L14.81,8.62L12,2L9.19,8.62L2,9.24L7.45,13.97L5.82,21L12,17.27Z";

    /* src\components\reporter\Delete.svelte generated by Svelte v3.48.0 */
    const file$5 = "src\\components\\reporter\\Delete.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[10] = list[i];
    	return child_ctx;
    }

    // (33:4) <DataTableCell>
    function create_default_slot_20(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Id");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_20.name,
    		type: "slot",
    		source: "(33:4) <DataTableCell>",
    		ctx
    	});

    	return block;
    }

    // (34:4) <DataTableCell>
    function create_default_slot_19(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Title");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_19.name,
    		type: "slot",
    		source: "(34:4) <DataTableCell>",
    		ctx
    	});

    	return block;
    }

    // (35:4) <DataTableCell numeric>
    function create_default_slot_18(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Date");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_18.name,
    		type: "slot",
    		source: "(35:4) <DataTableCell numeric>",
    		ctx
    	});

    	return block;
    }

    // (36:4) <DataTableCell numeric>
    function create_default_slot_17(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Delete");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_17.name,
    		type: "slot",
    		source: "(36:4) <DataTableCell numeric>",
    		ctx
    	});

    	return block;
    }

    // (32:3) <DataTableRow>
    function create_default_slot_16(ctx) {
    	let datatablecell0;
    	let t0;
    	let datatablecell1;
    	let t1;
    	let datatablecell2;
    	let t2;
    	let datatablecell3;
    	let current;

    	datatablecell0 = new DataTableCell({
    			props: {
    				$$slots: { default: [create_default_slot_20] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	datatablecell1 = new DataTableCell({
    			props: {
    				$$slots: { default: [create_default_slot_19] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	datatablecell2 = new DataTableCell({
    			props: {
    				numeric: true,
    				$$slots: { default: [create_default_slot_18] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	datatablecell3 = new DataTableCell({
    			props: {
    				numeric: true,
    				$$slots: { default: [create_default_slot_17] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(datatablecell0.$$.fragment);
    			t0 = space();
    			create_component(datatablecell1.$$.fragment);
    			t1 = space();
    			create_component(datatablecell2.$$.fragment);
    			t2 = space();
    			create_component(datatablecell3.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(datatablecell0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(datatablecell1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(datatablecell2, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(datatablecell3, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const datatablecell0_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				datatablecell0_changes.$$scope = { dirty, ctx };
    			}

    			datatablecell0.$set(datatablecell0_changes);
    			const datatablecell1_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				datatablecell1_changes.$$scope = { dirty, ctx };
    			}

    			datatablecell1.$set(datatablecell1_changes);
    			const datatablecell2_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				datatablecell2_changes.$$scope = { dirty, ctx };
    			}

    			datatablecell2.$set(datatablecell2_changes);
    			const datatablecell3_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				datatablecell3_changes.$$scope = { dirty, ctx };
    			}

    			datatablecell3.$set(datatablecell3_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(datatablecell0.$$.fragment, local);
    			transition_in(datatablecell1.$$.fragment, local);
    			transition_in(datatablecell2.$$.fragment, local);
    			transition_in(datatablecell3.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(datatablecell0.$$.fragment, local);
    			transition_out(datatablecell1.$$.fragment, local);
    			transition_out(datatablecell2.$$.fragment, local);
    			transition_out(datatablecell3.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(datatablecell0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(datatablecell1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(datatablecell2, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(datatablecell3, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_16.name,
    		type: "slot",
    		source: "(32:3) <DataTableRow>",
    		ctx
    	});

    	return block;
    }

    // (31:2) <DataTableHead>
    function create_default_slot_15(ctx) {
    	let datatablerow;
    	let current;

    	datatablerow = new DataTableRow({
    			props: {
    				$$slots: { default: [create_default_slot_16] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(datatablerow.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(datatablerow, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const datatablerow_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				datatablerow_changes.$$scope = { dirty, ctx };
    			}

    			datatablerow.$set(datatablerow_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(datatablerow.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(datatablerow.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(datatablerow, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_15.name,
    		type: "slot",
    		source: "(31:2) <DataTableHead>",
    		ctx
    	});

    	return block;
    }

    // (42:5) <DataTableCell>
    function create_default_slot_14$1(ctx) {
    	let t_value = /*story*/ ctx[10].id + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*stories*/ 1 && t_value !== (t_value = /*story*/ ctx[10].id + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_14$1.name,
    		type: "slot",
    		source: "(42:5) <DataTableCell>",
    		ctx
    	});

    	return block;
    }

    // (43:5) <DataTableCell>
    function create_default_slot_13$1(ctx) {
    	let t_value = /*story*/ ctx[10].title + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*stories*/ 1 && t_value !== (t_value = /*story*/ ctx[10].title + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_13$1.name,
    		type: "slot",
    		source: "(43:5) <DataTableCell>",
    		ctx
    	});

    	return block;
    }

    // (44:5) <DataTableCell numeric>
    function create_default_slot_12$1(ctx) {
    	let t_value = /*story*/ ctx[10].date + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*stories*/ 1 && t_value !== (t_value = /*story*/ ctx[10].date + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_12$1.name,
    		type: "slot",
    		source: "(44:5) <DataTableCell numeric>",
    		ctx
    	});

    	return block;
    }

    // (46:7) <Button on:click={() => open(story.id)}         >
    function create_default_slot_11$1(ctx) {
    	let icon;
    	let current;

    	icon = new Icon({
    			props: { path: mdiDeleteForever },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11$1.name,
    		type: "slot",
    		source: "(46:7) <Button on:click={() => open(story.id)}         >",
    		ctx
    	});

    	return block;
    }

    // (45:5) <DataTableCell numeric        >
    function create_default_slot_10$1(ctx) {
    	let button;
    	let current;

    	function click_handler() {
    		return /*click_handler*/ ctx[4](/*story*/ ctx[10]);
    	}

    	button = new Button({
    			props: {
    				$$slots: { default: [create_default_slot_11$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button.$on("click", click_handler);

    	const block = {
    		c: function create() {
    			create_component(button.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(button, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const button_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				button_changes.$$scope = { dirty, ctx };
    			}

    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(button, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10$1.name,
    		type: "slot",
    		source: "(45:5) <DataTableCell numeric        >",
    		ctx
    	});

    	return block;
    }

    // (41:4) <DataTableRow id={story.id}>
    function create_default_slot_9$1(ctx) {
    	let datatablecell0;
    	let t0;
    	let datatablecell1;
    	let t1;
    	let datatablecell2;
    	let t2;
    	let datatablecell3;
    	let t3;
    	let current;

    	datatablecell0 = new DataTableCell({
    			props: {
    				$$slots: { default: [create_default_slot_14$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	datatablecell1 = new DataTableCell({
    			props: {
    				$$slots: { default: [create_default_slot_13$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	datatablecell2 = new DataTableCell({
    			props: {
    				numeric: true,
    				$$slots: { default: [create_default_slot_12$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	datatablecell3 = new DataTableCell({
    			props: {
    				numeric: true,
    				$$slots: { default: [create_default_slot_10$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(datatablecell0.$$.fragment);
    			t0 = space();
    			create_component(datatablecell1.$$.fragment);
    			t1 = space();
    			create_component(datatablecell2.$$.fragment);
    			t2 = space();
    			create_component(datatablecell3.$$.fragment);
    			t3 = space();
    		},
    		m: function mount(target, anchor) {
    			mount_component(datatablecell0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(datatablecell1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(datatablecell2, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(datatablecell3, target, anchor);
    			insert_dev(target, t3, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const datatablecell0_changes = {};

    			if (dirty & /*$$scope, stories*/ 8193) {
    				datatablecell0_changes.$$scope = { dirty, ctx };
    			}

    			datatablecell0.$set(datatablecell0_changes);
    			const datatablecell1_changes = {};

    			if (dirty & /*$$scope, stories*/ 8193) {
    				datatablecell1_changes.$$scope = { dirty, ctx };
    			}

    			datatablecell1.$set(datatablecell1_changes);
    			const datatablecell2_changes = {};

    			if (dirty & /*$$scope, stories*/ 8193) {
    				datatablecell2_changes.$$scope = { dirty, ctx };
    			}

    			datatablecell2.$set(datatablecell2_changes);
    			const datatablecell3_changes = {};

    			if (dirty & /*$$scope, stories*/ 8193) {
    				datatablecell3_changes.$$scope = { dirty, ctx };
    			}

    			datatablecell3.$set(datatablecell3_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(datatablecell0.$$.fragment, local);
    			transition_in(datatablecell1.$$.fragment, local);
    			transition_in(datatablecell2.$$.fragment, local);
    			transition_in(datatablecell3.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(datatablecell0.$$.fragment, local);
    			transition_out(datatablecell1.$$.fragment, local);
    			transition_out(datatablecell2.$$.fragment, local);
    			transition_out(datatablecell3.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(datatablecell0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(datatablecell1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(datatablecell2, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(datatablecell3, detaching);
    			if (detaching) detach_dev(t3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9$1.name,
    		type: "slot",
    		source: "(41:4) <DataTableRow id={story.id}>",
    		ctx
    	});

    	return block;
    }

    // (40:3) {#each stories as story}
    function create_each_block$2(ctx) {
    	let datatablerow;
    	let current;

    	datatablerow = new DataTableRow({
    			props: {
    				id: /*story*/ ctx[10].id,
    				$$slots: { default: [create_default_slot_9$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(datatablerow.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(datatablerow, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const datatablerow_changes = {};
    			if (dirty & /*stories*/ 1) datatablerow_changes.id = /*story*/ ctx[10].id;

    			if (dirty & /*$$scope, stories*/ 8193) {
    				datatablerow_changes.$$scope = { dirty, ctx };
    			}

    			datatablerow.$set(datatablerow_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(datatablerow.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(datatablerow.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(datatablerow, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(40:3) {#each stories as story}",
    		ctx
    	});

    	return block;
    }

    // (39:2) <DataTableBody>
    function create_default_slot_8$1(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value = /*stories*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*stories, open, mdiDeleteForever*/ 5) {
    				each_value = /*stories*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$2(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$2(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$1.name,
    		type: "slot",
    		source: "(39:2) <DataTableBody>",
    		ctx
    	});

    	return block;
    }

    // (30:1) <DataTable class="datatable">
    function create_default_slot_7$2(ctx) {
    	let datatablehead;
    	let t;
    	let datatablebody;
    	let current;

    	datatablehead = new DataTableHead({
    			props: {
    				$$slots: { default: [create_default_slot_15] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	datatablebody = new DataTableBody({
    			props: {
    				$$slots: { default: [create_default_slot_8$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(datatablehead.$$.fragment);
    			t = space();
    			create_component(datatablebody.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(datatablehead, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(datatablebody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const datatablehead_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				datatablehead_changes.$$scope = { dirty, ctx };
    			}

    			datatablehead.$set(datatablehead_changes);
    			const datatablebody_changes = {};

    			if (dirty & /*$$scope, stories*/ 8193) {
    				datatablebody_changes.$$scope = { dirty, ctx };
    			}

    			datatablebody.$set(datatablebody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(datatablehead.$$.fragment, local);
    			transition_in(datatablebody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(datatablehead.$$.fragment, local);
    			transition_out(datatablebody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(datatablehead, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(datatablebody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$2.name,
    		type: "slot",
    		source: "(30:1) <DataTable class=\\\"datatable\\\">",
    		ctx
    	});

    	return block;
    }

    // (58:2) <CardTitle>
    function create_default_slot_6$2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Delete story?");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$2.name,
    		type: "slot",
    		source: "(58:2) <CardTitle>",
    		ctx
    	});

    	return block;
    }

    // (59:2) <CardText>
    function create_default_slot_5$2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Are you sure you want to delete the story? This can't be undone.");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$2.name,
    		type: "slot",
    		source: "(59:2) <CardText>",
    		ctx
    	});

    	return block;
    }

    // (63:3) <Button on:click={() => close(true)} text class="red-text"      >
    function create_default_slot_4$2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Delete");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$2.name,
    		type: "slot",
    		source: "(63:3) <Button on:click={() => close(true)} text class=\\\"red-text\\\"      >",
    		ctx
    	});

    	return block;
    }

    // (66:3) <Button on:click={() => close(false)} text>
    function create_default_slot_3$3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Cancel");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$3.name,
    		type: "slot",
    		source: "(66:3) <Button on:click={() => close(false)} text>",
    		ctx
    	});

    	return block;
    }

    // (62:2) <CardActions>
    function create_default_slot_2$2(ctx) {
    	let button0;
    	let t;
    	let button1;
    	let current;

    	button0 = new Button({
    			props: {
    				text: true,
    				class: "red-text",
    				$$slots: { default: [create_default_slot_4$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button0.$on("click", /*click_handler_1*/ ctx[5]);

    	button1 = new Button({
    			props: {
    				text: true,
    				$$slots: { default: [create_default_slot_3$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button1.$on("click", /*click_handler_2*/ ctx[6]);

    	const block = {
    		c: function create() {
    			create_component(button0.$$.fragment);
    			t = space();
    			create_component(button1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(button0, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(button1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button0_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				button0_changes.$$scope = { dirty, ctx };
    			}

    			button0.$set(button0_changes);
    			const button1_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				button1_changes.$$scope = { dirty, ctx };
    			}

    			button1.$set(button1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button0.$$.fragment, local);
    			transition_in(button1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button0.$$.fragment, local);
    			transition_out(button1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(button0, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(button1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$2.name,
    		type: "slot",
    		source: "(62:2) <CardActions>",
    		ctx
    	});

    	return block;
    }

    // (57:1) <Card>
    function create_default_slot_1$4(ctx) {
    	let cardtitle;
    	let t0;
    	let cardtext;
    	let t1;
    	let cardactions;
    	let current;

    	cardtitle = new CardTitle({
    			props: {
    				$$slots: { default: [create_default_slot_6$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cardtext = new CardText({
    			props: {
    				$$slots: { default: [create_default_slot_5$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cardactions = new CardActions({
    			props: {
    				$$slots: { default: [create_default_slot_2$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(cardtitle.$$.fragment);
    			t0 = space();
    			create_component(cardtext.$$.fragment);
    			t1 = space();
    			create_component(cardactions.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(cardtitle, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(cardtext, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(cardactions, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cardtitle_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				cardtitle_changes.$$scope = { dirty, ctx };
    			}

    			cardtitle.$set(cardtitle_changes);
    			const cardtext_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				cardtext_changes.$$scope = { dirty, ctx };
    			}

    			cardtext.$set(cardtext_changes);
    			const cardactions_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				cardactions_changes.$$scope = { dirty, ctx };
    			}

    			cardactions.$set(cardactions_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cardtitle.$$.fragment, local);
    			transition_in(cardtext.$$.fragment, local);
    			transition_in(cardactions.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cardtitle.$$.fragment, local);
    			transition_out(cardtext.$$.fragment, local);
    			transition_out(cardactions.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cardtitle, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(cardtext, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(cardactions, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$4.name,
    		type: "slot",
    		source: "(57:1) <Card>",
    		ctx
    	});

    	return block;
    }

    // (56:0) <Dialog persistent bind:active>
    function create_default_slot$4(ctx) {
    	let card;
    	let current;

    	card = new Card({
    			props: {
    				$$slots: { default: [create_default_slot_1$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(card.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(card, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const card_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				card_changes.$$scope = { dirty, ctx };
    			}

    			card.$set(card_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(card.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(card.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(card, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$4.name,
    		type: "slot",
    		source: "(56:0) <Dialog persistent bind:active>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$5(ctx) {
    	let div;
    	let datatable;
    	let t;
    	let dialog;
    	let updating_active;
    	let current;

    	datatable = new DataTable({
    			props: {
    				class: "datatable",
    				$$slots: { default: [create_default_slot_7$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	function dialog_active_binding(value) {
    		/*dialog_active_binding*/ ctx[7](value);
    	}

    	let dialog_props = {
    		persistent: true,
    		$$slots: { default: [create_default_slot$4] },
    		$$scope: { ctx }
    	};

    	if (/*active*/ ctx[1] !== void 0) {
    		dialog_props.active = /*active*/ ctx[1];
    	}

    	dialog = new Dialog({ props: dialog_props, $$inline: true });
    	binding_callbacks.push(() => bind(dialog, 'active', dialog_active_binding));

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(datatable.$$.fragment);
    			t = space();
    			create_component(dialog.$$.fragment);
    			attr_dev(div, "class", "container pt-4 svelte-1s66dwn");
    			add_location(div, file$5, 28, 0, 831);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(datatable, div, null);
    			insert_dev(target, t, anchor);
    			mount_component(dialog, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const datatable_changes = {};

    			if (dirty & /*$$scope, stories*/ 8193) {
    				datatable_changes.$$scope = { dirty, ctx };
    			}

    			datatable.$set(datatable_changes);
    			const dialog_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				dialog_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_active && dirty & /*active*/ 2) {
    				updating_active = true;
    				dialog_changes.active = /*active*/ ctx[1];
    				add_flush_callback(() => updating_active = false);
    			}

    			dialog.$set(dialog_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(datatable.$$.fragment, local);
    			transition_in(dialog.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(datatable.$$.fragment, local);
    			transition_out(dialog.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(datatable);
    			if (detaching) detach_dev(t);
    			destroy_component(dialog, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Delete', slots, []);
    	let { stories } = $$props;
    	let payload = {};
    	let active = false;
    	let deleteId = null;

    	function open(id) {
    		$$invalidate(1, active = true);
    		deleteId = id;
    	}

    	function close(remove) {
    		$$invalidate(1, active = false);

    		if (remove === false) {
    			return;
    		}

    		// Made to an object to be more flexible for further implementation if desired
    		payload = { id: deleteId };

    		fetchNui('deleteStory', payload);
    		deleteId = null;
    		payload = {};
    	}

    	const writable_props = ['stories'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Delete> was created with unknown prop '${key}'`);
    	});

    	const click_handler = story => open(story.id);
    	const click_handler_1 = () => close(true);
    	const click_handler_2 = () => close(false);

    	function dialog_active_binding(value) {
    		active = value;
    		$$invalidate(1, active);
    	}

    	$$self.$$set = $$props => {
    		if ('stories' in $$props) $$invalidate(0, stories = $$props.stories);
    	};

    	$$self.$capture_state = () => ({
    		DataTable,
    		DataTableHead,
    		DataTableRow,
    		DataTableCell,
    		DataTableBody,
    		Icon,
    		Button,
    		Dialog,
    		Card,
    		CardTitle,
    		CardText,
    		CardActions,
    		mdiDeleteForever,
    		fetchNui,
    		stories,
    		payload,
    		active,
    		deleteId,
    		open,
    		close
    	});

    	$$self.$inject_state = $$props => {
    		if ('stories' in $$props) $$invalidate(0, stories = $$props.stories);
    		if ('payload' in $$props) payload = $$props.payload;
    		if ('active' in $$props) $$invalidate(1, active = $$props.active);
    		if ('deleteId' in $$props) deleteId = $$props.deleteId;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		stories,
    		active,
    		open,
    		close,
    		click_handler,
    		click_handler_1,
    		click_handler_2,
    		dialog_active_binding
    	];
    }

    class Delete extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$5, create_fragment$5, safe_not_equal, { stories: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Delete",
    			options,
    			id: create_fragment$5.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*stories*/ ctx[0] === undefined && !('stories' in props)) {
    			console.warn("<Delete> was created without expected prop 'stories'");
    		}
    	}

    	get stories() {
    		throw new Error("<Delete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set stories(value) {
    		throw new Error("<Delete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\reporter\Update.svelte generated by Svelte v3.48.0 */
    const file$4 = "src\\components\\reporter\\Update.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[9] = list[i];
    	return child_ctx;
    }

    // (26:4) <DataTableCell>
    function create_default_slot_14(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Id");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_14.name,
    		type: "slot",
    		source: "(26:4) <DataTableCell>",
    		ctx
    	});

    	return block;
    }

    // (27:4) <DataTableCell>
    function create_default_slot_13(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Title");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_13.name,
    		type: "slot",
    		source: "(27:4) <DataTableCell>",
    		ctx
    	});

    	return block;
    }

    // (28:4) <DataTableCell numeric>
    function create_default_slot_12(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Date");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_12.name,
    		type: "slot",
    		source: "(28:4) <DataTableCell numeric>",
    		ctx
    	});

    	return block;
    }

    // (29:4) <DataTableCell numeric>
    function create_default_slot_11(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Update");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11.name,
    		type: "slot",
    		source: "(29:4) <DataTableCell numeric>",
    		ctx
    	});

    	return block;
    }

    // (25:3) <DataTableRow>
    function create_default_slot_10(ctx) {
    	let datatablecell0;
    	let t0;
    	let datatablecell1;
    	let t1;
    	let datatablecell2;
    	let t2;
    	let datatablecell3;
    	let current;

    	datatablecell0 = new DataTableCell({
    			props: {
    				$$slots: { default: [create_default_slot_14] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	datatablecell1 = new DataTableCell({
    			props: {
    				$$slots: { default: [create_default_slot_13] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	datatablecell2 = new DataTableCell({
    			props: {
    				numeric: true,
    				$$slots: { default: [create_default_slot_12] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	datatablecell3 = new DataTableCell({
    			props: {
    				numeric: true,
    				$$slots: { default: [create_default_slot_11] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(datatablecell0.$$.fragment);
    			t0 = space();
    			create_component(datatablecell1.$$.fragment);
    			t1 = space();
    			create_component(datatablecell2.$$.fragment);
    			t2 = space();
    			create_component(datatablecell3.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(datatablecell0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(datatablecell1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(datatablecell2, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(datatablecell3, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const datatablecell0_changes = {};

    			if (dirty & /*$$scope*/ 4096) {
    				datatablecell0_changes.$$scope = { dirty, ctx };
    			}

    			datatablecell0.$set(datatablecell0_changes);
    			const datatablecell1_changes = {};

    			if (dirty & /*$$scope*/ 4096) {
    				datatablecell1_changes.$$scope = { dirty, ctx };
    			}

    			datatablecell1.$set(datatablecell1_changes);
    			const datatablecell2_changes = {};

    			if (dirty & /*$$scope*/ 4096) {
    				datatablecell2_changes.$$scope = { dirty, ctx };
    			}

    			datatablecell2.$set(datatablecell2_changes);
    			const datatablecell3_changes = {};

    			if (dirty & /*$$scope*/ 4096) {
    				datatablecell3_changes.$$scope = { dirty, ctx };
    			}

    			datatablecell3.$set(datatablecell3_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(datatablecell0.$$.fragment, local);
    			transition_in(datatablecell1.$$.fragment, local);
    			transition_in(datatablecell2.$$.fragment, local);
    			transition_in(datatablecell3.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(datatablecell0.$$.fragment, local);
    			transition_out(datatablecell1.$$.fragment, local);
    			transition_out(datatablecell2.$$.fragment, local);
    			transition_out(datatablecell3.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(datatablecell0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(datatablecell1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(datatablecell2, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(datatablecell3, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10.name,
    		type: "slot",
    		source: "(25:3) <DataTableRow>",
    		ctx
    	});

    	return block;
    }

    // (24:2) <DataTableHead>
    function create_default_slot_9(ctx) {
    	let datatablerow;
    	let current;

    	datatablerow = new DataTableRow({
    			props: {
    				$$slots: { default: [create_default_slot_10] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(datatablerow.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(datatablerow, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const datatablerow_changes = {};

    			if (dirty & /*$$scope*/ 4096) {
    				datatablerow_changes.$$scope = { dirty, ctx };
    			}

    			datatablerow.$set(datatablerow_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(datatablerow.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(datatablerow.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(datatablerow, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9.name,
    		type: "slot",
    		source: "(24:2) <DataTableHead>",
    		ctx
    	});

    	return block;
    }

    // (35:5) <DataTableCell>
    function create_default_slot_8(ctx) {
    	let t_value = /*story*/ ctx[9].id + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*stories*/ 1 && t_value !== (t_value = /*story*/ ctx[9].id + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8.name,
    		type: "slot",
    		source: "(35:5) <DataTableCell>",
    		ctx
    	});

    	return block;
    }

    // (36:5) <DataTableCell>
    function create_default_slot_7$1(ctx) {
    	let t_value = /*story*/ ctx[9].title + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*stories*/ 1 && t_value !== (t_value = /*story*/ ctx[9].title + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$1.name,
    		type: "slot",
    		source: "(36:5) <DataTableCell>",
    		ctx
    	});

    	return block;
    }

    // (37:5) <DataTableCell numeric>
    function create_default_slot_6$1(ctx) {
    	let t_value = /*story*/ ctx[9].date + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*stories*/ 1 && t_value !== (t_value = /*story*/ ctx[9].date + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$1.name,
    		type: "slot",
    		source: "(37:5) <DataTableCell numeric>",
    		ctx
    	});

    	return block;
    }

    // (39:7) <Button on:click={() => showForm(story.id)}         >
    function create_default_slot_5$1(ctx) {
    	let icon;
    	let current;

    	icon = new Icon({
    			props: { path: mdiFileEdit },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$1.name,
    		type: "slot",
    		source: "(39:7) <Button on:click={() => showForm(story.id)}         >",
    		ctx
    	});

    	return block;
    }

    // (38:5) <DataTableCell numeric        >
    function create_default_slot_4$1(ctx) {
    	let button;
    	let current;

    	function click_handler() {
    		return /*click_handler*/ ctx[7](/*story*/ ctx[9]);
    	}

    	button = new Button({
    			props: {
    				$$slots: { default: [create_default_slot_5$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button.$on("click", click_handler);

    	const block = {
    		c: function create() {
    			create_component(button.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(button, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const button_changes = {};

    			if (dirty & /*$$scope*/ 4096) {
    				button_changes.$$scope = { dirty, ctx };
    			}

    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(button, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$1.name,
    		type: "slot",
    		source: "(38:5) <DataTableCell numeric        >",
    		ctx
    	});

    	return block;
    }

    // (34:4) <DataTableRow>
    function create_default_slot_3$2(ctx) {
    	let datatablecell0;
    	let t0;
    	let datatablecell1;
    	let t1;
    	let datatablecell2;
    	let t2;
    	let datatablecell3;
    	let t3;
    	let current;

    	datatablecell0 = new DataTableCell({
    			props: {
    				$$slots: { default: [create_default_slot_8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	datatablecell1 = new DataTableCell({
    			props: {
    				$$slots: { default: [create_default_slot_7$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	datatablecell2 = new DataTableCell({
    			props: {
    				numeric: true,
    				$$slots: { default: [create_default_slot_6$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	datatablecell3 = new DataTableCell({
    			props: {
    				numeric: true,
    				$$slots: { default: [create_default_slot_4$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(datatablecell0.$$.fragment);
    			t0 = space();
    			create_component(datatablecell1.$$.fragment);
    			t1 = space();
    			create_component(datatablecell2.$$.fragment);
    			t2 = space();
    			create_component(datatablecell3.$$.fragment);
    			t3 = space();
    		},
    		m: function mount(target, anchor) {
    			mount_component(datatablecell0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(datatablecell1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(datatablecell2, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(datatablecell3, target, anchor);
    			insert_dev(target, t3, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const datatablecell0_changes = {};

    			if (dirty & /*$$scope, stories*/ 4097) {
    				datatablecell0_changes.$$scope = { dirty, ctx };
    			}

    			datatablecell0.$set(datatablecell0_changes);
    			const datatablecell1_changes = {};

    			if (dirty & /*$$scope, stories*/ 4097) {
    				datatablecell1_changes.$$scope = { dirty, ctx };
    			}

    			datatablecell1.$set(datatablecell1_changes);
    			const datatablecell2_changes = {};

    			if (dirty & /*$$scope, stories*/ 4097) {
    				datatablecell2_changes.$$scope = { dirty, ctx };
    			}

    			datatablecell2.$set(datatablecell2_changes);
    			const datatablecell3_changes = {};

    			if (dirty & /*$$scope, stories*/ 4097) {
    				datatablecell3_changes.$$scope = { dirty, ctx };
    			}

    			datatablecell3.$set(datatablecell3_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(datatablecell0.$$.fragment, local);
    			transition_in(datatablecell1.$$.fragment, local);
    			transition_in(datatablecell2.$$.fragment, local);
    			transition_in(datatablecell3.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(datatablecell0.$$.fragment, local);
    			transition_out(datatablecell1.$$.fragment, local);
    			transition_out(datatablecell2.$$.fragment, local);
    			transition_out(datatablecell3.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(datatablecell0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(datatablecell1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(datatablecell2, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(datatablecell3, detaching);
    			if (detaching) detach_dev(t3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$2.name,
    		type: "slot",
    		source: "(34:4) <DataTableRow>",
    		ctx
    	});

    	return block;
    }

    // (33:3) {#each stories as story}
    function create_each_block$1(ctx) {
    	let datatablerow;
    	let current;

    	datatablerow = new DataTableRow({
    			props: {
    				$$slots: { default: [create_default_slot_3$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(datatablerow.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(datatablerow, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const datatablerow_changes = {};

    			if (dirty & /*$$scope, stories*/ 4097) {
    				datatablerow_changes.$$scope = { dirty, ctx };
    			}

    			datatablerow.$set(datatablerow_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(datatablerow.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(datatablerow.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(datatablerow, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(33:3) {#each stories as story}",
    		ctx
    	});

    	return block;
    }

    // (32:2) <DataTableBody>
    function create_default_slot_2$1(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value = /*stories*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*showForm, stories, mdiFileEdit*/ 33) {
    				each_value = /*stories*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$1.name,
    		type: "slot",
    		source: "(32:2) <DataTableBody>",
    		ctx
    	});

    	return block;
    }

    // (23:1) <DataTable class="datatable">
    function create_default_slot_1$3(ctx) {
    	let datatablehead;
    	let t;
    	let datatablebody;
    	let current;

    	datatablehead = new DataTableHead({
    			props: {
    				$$slots: { default: [create_default_slot_9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	datatablebody = new DataTableBody({
    			props: {
    				$$slots: { default: [create_default_slot_2$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(datatablehead.$$.fragment);
    			t = space();
    			create_component(datatablebody.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(datatablehead, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(datatablebody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const datatablehead_changes = {};

    			if (dirty & /*$$scope*/ 4096) {
    				datatablehead_changes.$$scope = { dirty, ctx };
    			}

    			datatablehead.$set(datatablehead_changes);
    			const datatablebody_changes = {};

    			if (dirty & /*$$scope, stories*/ 4097) {
    				datatablebody_changes.$$scope = { dirty, ctx };
    			}

    			datatablebody.$set(datatablebody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(datatablehead.$$.fragment, local);
    			transition_in(datatablebody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(datatablehead.$$.fragment, local);
    			transition_out(datatablebody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(datatablehead, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(datatablebody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$3.name,
    		type: "slot",
    		source: "(23:1) <DataTable class=\\\"datatable\\\">",
    		ctx
    	});

    	return block;
    }

    // (49:0) <Dialog persistent bind:active>
    function create_default_slot$3(ctx) {
    	let create;
    	let current;

    	create = new Create({
    			props: {
    				updateContext: /*updateContext*/ ctx[1],
    				stories: /*stories*/ ctx[0],
    				updateId: /*updateId*/ ctx[3],
    				active: /*active*/ ctx[2],
    				close: /*close*/ ctx[6],
    				playerName: /*playerName*/ ctx[4]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create$1() {
    			create_component(create.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(create, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const create_changes = {};
    			if (dirty & /*updateContext*/ 2) create_changes.updateContext = /*updateContext*/ ctx[1];
    			if (dirty & /*stories*/ 1) create_changes.stories = /*stories*/ ctx[0];
    			if (dirty & /*updateId*/ 8) create_changes.updateId = /*updateId*/ ctx[3];
    			if (dirty & /*active*/ 4) create_changes.active = /*active*/ ctx[2];
    			create.$set(create_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(create.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(create.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(create, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$3.name,
    		type: "slot",
    		source: "(49:0) <Dialog persistent bind:active>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$4(ctx) {
    	let div;
    	let datatable;
    	let t;
    	let dialog;
    	let updating_active;
    	let current;

    	datatable = new DataTable({
    			props: {
    				class: "datatable",
    				$$slots: { default: [create_default_slot_1$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	function dialog_active_binding(value) {
    		/*dialog_active_binding*/ ctx[8](value);
    	}

    	let dialog_props = {
    		persistent: true,
    		$$slots: { default: [create_default_slot$3] },
    		$$scope: { ctx }
    	};

    	if (/*active*/ ctx[2] !== void 0) {
    		dialog_props.active = /*active*/ ctx[2];
    	}

    	dialog = new Dialog({ props: dialog_props, $$inline: true });
    	binding_callbacks.push(() => bind(dialog, 'active', dialog_active_binding));

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(datatable.$$.fragment);
    			t = space();
    			create_component(dialog.$$.fragment);
    			attr_dev(div, "class", "container pt-4 svelte-1s66dwn");
    			add_location(div, file$4, 21, 0, 632);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(datatable, div, null);
    			insert_dev(target, t, anchor);
    			mount_component(dialog, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const datatable_changes = {};

    			if (dirty & /*$$scope, stories*/ 4097) {
    				datatable_changes.$$scope = { dirty, ctx };
    			}

    			datatable.$set(datatable_changes);
    			const dialog_changes = {};

    			if (dirty & /*$$scope, updateContext, stories, updateId, active*/ 4111) {
    				dialog_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_active && dirty & /*active*/ 4) {
    				updating_active = true;
    				dialog_changes.active = /*active*/ ctx[2];
    				add_flush_callback(() => updating_active = false);
    			}

    			dialog.$set(dialog_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(datatable.$$.fragment, local);
    			transition_in(dialog.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(datatable.$$.fragment, local);
    			transition_out(dialog.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(datatable);
    			if (detaching) detach_dev(t);
    			destroy_component(dialog, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Update', slots, []);
    	let { stories } = $$props;
    	let updateContext = true;
    	let active = false;
    	let updateId = null;
    	let playerName;

    	function showForm(articleId) {
    		$$invalidate(2, active = true);
    		$$invalidate(3, updateId = articleId);
    	}

    	let close = () => {
    		$$invalidate(2, active = false);
    		$$invalidate(1, updateContext = updateContext ? false : true);
    	};

    	const writable_props = ['stories'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Update> was created with unknown prop '${key}'`);
    	});

    	const click_handler = story => showForm(story.id);

    	function dialog_active_binding(value) {
    		active = value;
    		$$invalidate(2, active);
    	}

    	$$self.$$set = $$props => {
    		if ('stories' in $$props) $$invalidate(0, stories = $$props.stories);
    	};

    	$$self.$capture_state = () => ({
    		DataTable,
    		DataTableHead,
    		DataTableRow,
    		DataTableCell,
    		DataTableBody,
    		Icon,
    		Button,
    		Dialog,
    		mdiFileEdit,
    		Create,
    		stories,
    		updateContext,
    		active,
    		updateId,
    		playerName,
    		showForm,
    		close
    	});

    	$$self.$inject_state = $$props => {
    		if ('stories' in $$props) $$invalidate(0, stories = $$props.stories);
    		if ('updateContext' in $$props) $$invalidate(1, updateContext = $$props.updateContext);
    		if ('active' in $$props) $$invalidate(2, active = $$props.active);
    		if ('updateId' in $$props) $$invalidate(3, updateId = $$props.updateId);
    		if ('playerName' in $$props) $$invalidate(4, playerName = $$props.playerName);
    		if ('close' in $$props) $$invalidate(6, close = $$props.close);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		stories,
    		updateContext,
    		active,
    		updateId,
    		playerName,
    		showForm,
    		close,
    		click_handler,
    		dialog_active_binding
    	];
    }

    class Update extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, { stories: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Update",
    			options,
    			id: create_fragment$4.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*stories*/ ctx[0] === undefined && !('stories' in props)) {
    			console.warn("<Update> was created without expected prop 'stories'");
    		}
    	}

    	get stories() {
    		throw new Error("<Update>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set stories(value) {
    		throw new Error("<Update>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\pages\Reporter.svelte generated by Svelte v3.48.0 */
    const file$3 = "src\\pages\\Reporter.svelte";

    // (21:1) {:else}
    function create_else_block(ctx) {
    	let div;
    	let expansionpanels;
    	let current;

    	expansionpanels = new ExpansionPanels({
    			props: {
    				multiple: true,
    				$$slots: { default: [create_default_slot$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(expansionpanels.$$.fragment);
    			attr_dev(div, "class", "mt-2");
    			add_location(div, file$3, 21, 2, 930);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(expansionpanels, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const expansionpanels_changes = {};

    			if (dirty & /*$$scope, stories, playerName*/ 261) {
    				expansionpanels_changes.$$scope = { dirty, ctx };
    			}

    			expansionpanels.$set(expansionpanels_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(expansionpanels.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(expansionpanels.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(expansionpanels);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(21:1) {:else}",
    		ctx
    	});

    	return block;
    }

    // (19:1) {#if !isReporter || (!reporterPermissions.canPublish && !reporterPermissions.canEdit && !reporterPermissions.canDelete)}
    function create_if_block$1(ctx) {
    	let p;

    	const block = {
    		c: function create() {
    			p = element("p");
    			p.textContent = `${Config.text.reporterActions.noPermissions}`;
    			add_location(p, file$3, 19, 2, 866);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(19:1) {#if !isReporter || (!reporterPermissions.canPublish && !reporterPermissions.canEdit && !reporterPermissions.canDelete)}",
    		ctx
    	});

    	return block;
    }

    // (24:4) {#if reporterPermissions.canPublish}
    function create_if_block_3$1(ctx) {
    	let expansionpanel;
    	let current;

    	expansionpanel = new ExpansionPanel({
    			props: {
    				class: "publishStory",
    				$$slots: {
    					header: [create_header_slot_2],
    					default: [create_default_slot_3$1]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(expansionpanel.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(expansionpanel, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const expansionpanel_changes = {};

    			if (dirty & /*$$scope, stories, playerName*/ 261) {
    				expansionpanel_changes.$$scope = { dirty, ctx };
    			}

    			expansionpanel.$set(expansionpanel_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(expansionpanel.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(expansionpanel.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(expansionpanel, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$1.name,
    		type: "if",
    		source: "(24:4) {#if reporterPermissions.canPublish}",
    		ctx
    	});

    	return block;
    }

    // (25:5) <ExpansionPanel class="publishStory">
    function create_default_slot_3$1(ctx) {
    	let create;
    	let current;

    	create = new Create({
    			props: {
    				updateContext: /*updateContext*/ ctx[3],
    				stories: /*stories*/ ctx[0],
    				updateId: /*updateId*/ ctx[4],
    				active: /*active*/ ctx[5],
    				playerName: /*playerName*/ ctx[2]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create$1() {
    			create_component(create.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(create, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const create_changes = {};
    			if (dirty & /*stories*/ 1) create_changes.stories = /*stories*/ ctx[0];
    			if (dirty & /*playerName*/ 4) create_changes.playerName = /*playerName*/ ctx[2];
    			create.$set(create_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(create.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(create.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(create, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$1.name,
    		type: "slot",
    		source: "(25:5) <ExpansionPanel class=\\\"publishStory\\\">",
    		ctx
    	});

    	return block;
    }

    // (26:6) 
    function create_header_slot_2(ctx) {
    	let span;
    	let icon;
    	let t_value = Config.text.reporterActions.publishNewStory + "";
    	let t;
    	let current;

    	icon = new Icon({
    			props: { path: mdiPencil, class: "mr-2" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			span = element("span");
    			create_component(icon.$$.fragment);
    			t = text(t_value);
    			attr_dev(span, "slot", "header");
    			attr_dev(span, "class", "pt-1");
    			add_location(span, file$3, 25, 6, 1073);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			mount_component(icon, span, null);
    			append_dev(span, t);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			destroy_component(icon);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_header_slot_2.name,
    		type: "slot",
    		source: "(26:6) ",
    		ctx
    	});

    	return block;
    }

    // (33:4) {#if reporterPermissions.canEdit}
    function create_if_block_2$1(ctx) {
    	let expansionpanel;
    	let current;

    	expansionpanel = new ExpansionPanel({
    			props: {
    				$$slots: {
    					header: [create_header_slot_1],
    					default: [create_default_slot_2]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(expansionpanel.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(expansionpanel, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const expansionpanel_changes = {};

    			if (dirty & /*$$scope, stories*/ 257) {
    				expansionpanel_changes.$$scope = { dirty, ctx };
    			}

    			expansionpanel.$set(expansionpanel_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(expansionpanel.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(expansionpanel.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(expansionpanel, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(33:4) {#if reporterPermissions.canEdit}",
    		ctx
    	});

    	return block;
    }

    // (34:5) <ExpansionPanel>
    function create_default_slot_2(ctx) {
    	let update;
    	let current;

    	update = new Update({
    			props: { stories: /*stories*/ ctx[0] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(update.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(update, target, anchor);
    			current = true;
    		},
    		p: function update$1(ctx, dirty) {
    			const update_changes = {};
    			if (dirty & /*stories*/ 1) update_changes.stories = /*stories*/ ctx[0];
    			update.$set(update_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(update.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(update.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(update, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2.name,
    		type: "slot",
    		source: "(34:5) <ExpansionPanel>",
    		ctx
    	});

    	return block;
    }

    // (35:6) 
    function create_header_slot_1(ctx) {
    	let span;
    	let icon;
    	let t_value = Config.text.reporterActions.updateStories + "";
    	let t;
    	let current;

    	icon = new Icon({
    			props: { path: mdiFileEdit, class: "mr-2" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			span = element("span");
    			create_component(icon.$$.fragment);
    			t = text(t_value);
    			attr_dev(span, "slot", "header");
    			attr_dev(span, "class", "pt-1");
    			add_location(span, file$3, 34, 6, 1405);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			mount_component(icon, span, null);
    			append_dev(span, t);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			destroy_component(icon);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_header_slot_1.name,
    		type: "slot",
    		source: "(35:6) ",
    		ctx
    	});

    	return block;
    }

    // (42:4) {#if reporterPermissions.canDelete}
    function create_if_block_1$1(ctx) {
    	let expansionpanel;
    	let current;

    	expansionpanel = new ExpansionPanel({
    			props: {
    				$$slots: {
    					header: [create_header_slot],
    					default: [create_default_slot_1$2]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(expansionpanel.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(expansionpanel, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const expansionpanel_changes = {};

    			if (dirty & /*$$scope, stories*/ 257) {
    				expansionpanel_changes.$$scope = { dirty, ctx };
    			}

    			expansionpanel.$set(expansionpanel_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(expansionpanel.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(expansionpanel.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(expansionpanel, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(42:4) {#if reporterPermissions.canDelete}",
    		ctx
    	});

    	return block;
    }

    // (43:5) <ExpansionPanel>
    function create_default_slot_1$2(ctx) {
    	let delete_1;
    	let current;

    	delete_1 = new Delete({
    			props: { stories: /*stories*/ ctx[0] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(delete_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(delete_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const delete_1_changes = {};
    			if (dirty & /*stories*/ 1) delete_1_changes.stories = /*stories*/ ctx[0];
    			delete_1.$set(delete_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(delete_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(delete_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(delete_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$2.name,
    		type: "slot",
    		source: "(43:5) <ExpansionPanel>",
    		ctx
    	});

    	return block;
    }

    // (44:6) 
    function create_header_slot(ctx) {
    	let span;
    	let icon;
    	let t_value = Config.text.reporterActions.deleteStories + "";
    	let t;
    	let current;

    	icon = new Icon({
    			props: { path: mdiDeleteForever, class: "mr-2" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			span = element("span");
    			create_component(icon.$$.fragment);
    			t = text(t_value);
    			attr_dev(span, "slot", "header");
    			attr_dev(span, "class", "pt-1");
    			add_location(span, file$3, 43, 6, 1690);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			mount_component(icon, span, null);
    			append_dev(span, t);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			destroy_component(icon);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_header_slot.name,
    		type: "slot",
    		source: "(44:6) ",
    		ctx
    	});

    	return block;
    }

    // (23:3) <ExpansionPanels multiple>
    function create_default_slot$2(ctx) {
    	let t0;
    	let t1;
    	let if_block2_anchor;
    	let current;
    	let if_block0 = /*reporterPermissions*/ ctx[6].canPublish && create_if_block_3$1(ctx);
    	let if_block1 = /*reporterPermissions*/ ctx[6].canEdit && create_if_block_2$1(ctx);
    	let if_block2 = /*reporterPermissions*/ ctx[6].canDelete && create_if_block_1$1(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			if_block2_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, if_block2_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*reporterPermissions*/ ctx[6].canPublish) if_block0.p(ctx, dirty);
    			if (/*reporterPermissions*/ ctx[6].canEdit) if_block1.p(ctx, dirty);
    			if (/*reporterPermissions*/ ctx[6].canDelete) if_block2.p(ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(if_block2);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(if_block2_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$2.name,
    		type: "slot",
    		source: "(23:3) <ExpansionPanels multiple>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$3(ctx) {
    	let div;
    	let h4;
    	let t1;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	const if_block_creators = [create_if_block$1, create_else_block];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (!/*isReporter*/ ctx[1] || !/*reporterPermissions*/ ctx[6].canPublish && !/*reporterPermissions*/ ctx[6].canEdit && !/*reporterPermissions*/ ctx[6].canDelete) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			h4 = element("h4");
    			h4.textContent = `${Config.text.reporterActions.title}`;
    			t1 = space();
    			if_block.c();
    			add_location(h4, file$3, 17, 1, 695);
    			attr_dev(div, "class", "pa-4");
    			add_location(div, file$3, 16, 0, 674);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h4);
    			append_dev(div, t1);
    			if_blocks[current_block_type_index].m(div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(div, null);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if_blocks[current_block_type_index].d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Reporter', slots, []);
    	let { stories } = $$props;
    	let { reporterLevel } = $$props;
    	let { isReporter } = $$props;
    	let { playerName } = $$props;
    	let updateContext = false;
    	let updateId = undefined;
    	let active = false;
    	const reporterPermissions = Config.reporter.find(permissions => permissions.grade === reporterLevel);
    	const writable_props = ['stories', 'reporterLevel', 'isReporter', 'playerName'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Reporter> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('stories' in $$props) $$invalidate(0, stories = $$props.stories);
    		if ('reporterLevel' in $$props) $$invalidate(7, reporterLevel = $$props.reporterLevel);
    		if ('isReporter' in $$props) $$invalidate(1, isReporter = $$props.isReporter);
    		if ('playerName' in $$props) $$invalidate(2, playerName = $$props.playerName);
    	};

    	$$self.$capture_state = () => ({
    		ExpansionPanel,
    		ExpansionPanels,
    		Icon,
    		Create,
    		mdiPencil,
    		mdiFileEdit,
    		mdiDeleteForever,
    		Delete,
    		Update,
    		Config,
    		stories,
    		reporterLevel,
    		isReporter,
    		playerName,
    		updateContext,
    		updateId,
    		active,
    		reporterPermissions
    	});

    	$$self.$inject_state = $$props => {
    		if ('stories' in $$props) $$invalidate(0, stories = $$props.stories);
    		if ('reporterLevel' in $$props) $$invalidate(7, reporterLevel = $$props.reporterLevel);
    		if ('isReporter' in $$props) $$invalidate(1, isReporter = $$props.isReporter);
    		if ('playerName' in $$props) $$invalidate(2, playerName = $$props.playerName);
    		if ('updateContext' in $$props) $$invalidate(3, updateContext = $$props.updateContext);
    		if ('updateId' in $$props) $$invalidate(4, updateId = $$props.updateId);
    		if ('active' in $$props) $$invalidate(5, active = $$props.active);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		stories,
    		isReporter,
    		playerName,
    		updateContext,
    		updateId,
    		active,
    		reporterPermissions,
    		reporterLevel
    	];
    }

    class Reporter extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$3, create_fragment$3, safe_not_equal, {
    			stories: 0,
    			reporterLevel: 7,
    			isReporter: 1,
    			playerName: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Reporter",
    			options,
    			id: create_fragment$3.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*stories*/ ctx[0] === undefined && !('stories' in props)) {
    			console.warn("<Reporter> was created without expected prop 'stories'");
    		}

    		if (/*reporterLevel*/ ctx[7] === undefined && !('reporterLevel' in props)) {
    			console.warn("<Reporter> was created without expected prop 'reporterLevel'");
    		}

    		if (/*isReporter*/ ctx[1] === undefined && !('isReporter' in props)) {
    			console.warn("<Reporter> was created without expected prop 'isReporter'");
    		}

    		if (/*playerName*/ ctx[2] === undefined && !('playerName' in props)) {
    			console.warn("<Reporter> was created without expected prop 'playerName'");
    		}
    	}

    	get stories() {
    		throw new Error("<Reporter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set stories(value) {
    		throw new Error("<Reporter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get reporterLevel() {
    		throw new Error("<Reporter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set reporterLevel(value) {
    		throw new Error("<Reporter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isReporter() {
    		throw new Error("<Reporter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isReporter(value) {
    		throw new Error("<Reporter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get playerName() {
    		throw new Error("<Reporter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set playerName(value) {
    		throw new Error("<Reporter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\pages\PrisonSentences.svelte generated by Svelte v3.48.0 */
    const file$2 = "src\\pages\\PrisonSentences.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[1] = list[i];
    	return child_ctx;
    }

    // (10:3) {#each sentences as sentence}
    function create_each_block(ctx) {
    	let p;
    	let strong0;
    	let t0_value = /*sentence*/ ctx[1].jailed_player + "";
    	let t0;
    	let t1;
    	let strong1;
    	let t2_value = /*sentence*/ ctx[1].jailed_time + "";
    	let t2;
    	let t3;
    	let t4_value = (Number(/*sentence*/ ctx[1].jailed_time) > 1 ? 's' : '') + "";
    	let t4;
    	let t5;
    	let br;
    	let t6;
    	let small;
    	let t7_value = /*sentence*/ ctx[1].date + "";
    	let t7;
    	let t8;

    	const block = {
    		c: function create() {
    			p = element("p");
    			strong0 = element("strong");
    			t0 = text(t0_value);
    			t1 = text(" has been sentenced\r\n\t\t\t\t\tto\r\n\t\t\t\t\t");
    			strong1 = element("strong");
    			t2 = text(t2_value);
    			t3 = text(" month");
    			t4 = text(t4_value);
    			t5 = text("\r\n\t\t\t\t\tin Bolingbroke Penitentiary.");
    			br = element("br");
    			t6 = space();
    			small = element("small");
    			t7 = text(t7_value);
    			t8 = space();
    			add_location(strong0, file$2, 10, 5, 288);
    			add_location(strong1, file$2, 12, 5, 364);
    			add_location(br, file$2, 19, 33, 537);
    			add_location(small, file$2, 20, 5, 550);
    			attr_dev(p, "class", "mb-10");
    			add_location(p, file$2, 9, 32, 264);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, strong0);
    			append_dev(strong0, t0);
    			append_dev(p, t1);
    			append_dev(p, strong1);
    			append_dev(strong1, t2);
    			append_dev(strong1, t3);
    			append_dev(strong1, t4);
    			append_dev(p, t5);
    			append_dev(p, br);
    			append_dev(p, t6);
    			append_dev(p, small);
    			append_dev(small, t7);
    			append_dev(p, t8);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*sentences*/ 1 && t0_value !== (t0_value = /*sentence*/ ctx[1].jailed_player + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*sentences*/ 1 && t2_value !== (t2_value = /*sentence*/ ctx[1].jailed_time + "")) set_data_dev(t2, t2_value);
    			if (dirty & /*sentences*/ 1 && t4_value !== (t4_value = (Number(/*sentence*/ ctx[1].jailed_time) > 1 ? 's' : '') + "")) set_data_dev(t4, t4_value);
    			if (dirty & /*sentences*/ 1 && t7_value !== (t7_value = /*sentence*/ ctx[1].date + "")) set_data_dev(t7, t7_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(10:3) {#each sentences as sentence}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$2(ctx) {
    	let div3;
    	let h4;
    	let t1;
    	let div2;
    	let div0;
    	let t2;
    	let div1;
    	let img;
    	let img_src_value;
    	let t3;
    	let center;
    	let small;
    	let i;
    	let each_value = /*sentences*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			h4 = element("h4");
    			h4.textContent = `${Config.text.prisonSentences.title}`;
    			t1 = space();
    			div2 = element("div");
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t2 = space();
    			div1 = element("div");
    			img = element("img");
    			t3 = space();
    			center = element("center");
    			small = element("small");
    			i = element("i");
    			i.textContent = `${Config.prisonSentences.imageCaption}`;
    			add_location(h4, file$2, 5, 1, 115);
    			attr_dev(div0, "class", "sentences svelte-1k2yccv");
    			add_location(div0, file$2, 8, 2, 207);
    			if (!src_url_equal(img.src, img_src_value = Config.prisonSentences.imageUrl)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "Prison sentences image");
    			add_location(img, file$2, 26, 3, 690);
    			add_location(i, file$2, 30, 18, 798);
    			add_location(small, file$2, 30, 11, 791);
    			add_location(center, file$2, 30, 3, 783);
    			attr_dev(div1, "class", "image svelte-1k2yccv");
    			add_location(div1, file$2, 24, 2, 616);
    			attr_dev(div2, "class", "sentences-container mt-10 svelte-1k2yccv");
    			add_location(div2, file$2, 7, 1, 164);
    			attr_dev(div3, "class", "pa-4");
    			add_location(div3, file$2, 4, 0, 94);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, h4);
    			append_dev(div3, t1);
    			append_dev(div3, div2);
    			append_dev(div2, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			append_dev(div1, img);
    			append_dev(div1, t3);
    			append_dev(div1, center);
    			append_dev(center, small);
    			append_dev(small, i);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*sentences, Number*/ 1) {
    				each_value = /*sentences*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div0, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('PrisonSentences', slots, []);
    	let { sentences } = $$props;
    	const writable_props = ['sentences'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<PrisonSentences> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('sentences' in $$props) $$invalidate(0, sentences = $$props.sentences);
    	};

    	$$self.$capture_state = () => ({ Config, sentences });

    	$$self.$inject_state = $$props => {
    		if ('sentences' in $$props) $$invalidate(0, sentences = $$props.sentences);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [sentences];
    }

    class PrisonSentences extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, { sentences: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "PrisonSentences",
    			options,
    			id: create_fragment$2.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*sentences*/ ctx[0] === undefined && !('sentences' in props)) {
    			console.warn("<PrisonSentences> was created without expected prop 'sentences'");
    		}
    	}

    	get sentences() {
    		throw new Error("<PrisonSentences>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set sentences(value) {
    		throw new Error("<PrisonSentences>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\Content.svelte generated by Svelte v3.48.0 */
    const file$1 = "src\\components\\Content.svelte";

    // (17:1) 
    function create_title_slot(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = `${Config.newspaperTitle}`;
    			attr_dev(span, "slot", "title");
    			add_location(span, file$1, 16, 1, 521);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_title_slot.name,
    		type: "slot",
    		source: "(17:1) ",
    		ctx
    	});

    	return block;
    }

    // (21:4) <Tab>
    function create_default_slot_7(ctx) {
    	let t_value = Config.text.tabs.newspaper + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7.name,
    		type: "slot",
    		source: "(21:4) <Tab>",
    		ctx
    	});

    	return block;
    }

    // (22:4) {#if Config.tabs.showPrisonSentences}
    function create_if_block_4(ctx) {
    	let tab;
    	let current;

    	tab = new Tab({
    			props: {
    				$$slots: { default: [create_default_slot_6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(tab.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(tab, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const tab_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				tab_changes.$$scope = { dirty, ctx };
    			}

    			tab.$set(tab_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tab.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tab.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(tab, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4.name,
    		type: "if",
    		source: "(22:4) {#if Config.tabs.showPrisonSentences}",
    		ctx
    	});

    	return block;
    }

    // (22:41) <Tab        >
    function create_default_slot_6(ctx) {
    	let t_value = Config.text.tabs.prisonSentences + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6.name,
    		type: "slot",
    		source: "(22:41) <Tab        >",
    		ctx
    	});

    	return block;
    }

    // (25:4) {#if isReporter && reporterOnDuty}
    function create_if_block_3(ctx) {
    	let tab;
    	let current;

    	tab = new Tab({
    			props: {
    				$$slots: { default: [create_default_slot_5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(tab.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(tab, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const tab_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				tab_changes.$$scope = { dirty, ctx };
    			}

    			tab.$set(tab_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tab.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tab.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(tab, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(25:4) {#if isReporter && reporterOnDuty}",
    		ctx
    	});

    	return block;
    }

    // (25:38) <Tab        >
    function create_default_slot_5(ctx) {
    	let icon;
    	let span;
    	let current;
    	icon = new Icon({ props: { path: mdiStar }, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    			span = element("span");
    			span.textContent = `${Config.text.tabs.reporterActions}`;
    			attr_dev(span, "class", "ml-2");
    			add_location(span, file$1, 25, 30, 898);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			insert_dev(target, span, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5.name,
    		type: "slot",
    		source: "(25:38) <Tab        >",
    		ctx
    	});

    	return block;
    }

    // (20:3) 
    function create_tabs_slot(ctx) {
    	let div;
    	let tab;
    	let t0;
    	let t1;
    	let current;

    	tab = new Tab({
    			props: {
    				$$slots: { default: [create_default_slot_7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	let if_block0 = Config.tabs.showPrisonSentences && create_if_block_4(ctx);
    	let if_block1 = /*isReporter*/ ctx[1] && /*reporterOnDuty*/ ctx[2] && create_if_block_3(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(tab.$$.fragment);
    			t0 = space();
    			if (if_block0) if_block0.c();
    			t1 = space();
    			if (if_block1) if_block1.c();
    			attr_dev(div, "slot", "tabs");
    			add_location(div, file$1, 19, 3, 652);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(tab, div, null);
    			append_dev(div, t0);
    			if (if_block0) if_block0.m(div, null);
    			append_dev(div, t1);
    			if (if_block1) if_block1.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const tab_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				tab_changes.$$scope = { dirty, ctx };
    			}

    			tab.$set(tab_changes);
    			if (Config.tabs.showPrisonSentences) if_block0.p(ctx, dirty);

    			if (/*isReporter*/ ctx[1] && /*reporterOnDuty*/ ctx[2]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*isReporter, reporterOnDuty*/ 6) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_3(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div, null);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tab.$$.fragment, local);
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tab.$$.fragment, local);
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(tab);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_tabs_slot.name,
    		type: "slot",
    		source: "(20:3) ",
    		ctx
    	});

    	return block;
    }

    // (18:1) 
    function create_extension_slot(ctx) {
    	let div;
    	let tabs;
    	let updating_value;
    	let current;

    	function tabs_value_binding(value) {
    		/*tabs_value_binding*/ ctx[7](value);
    	}

    	let tabs_props = {
    		class: "green-text",
    		fixedTabs: true,
    		$$slots: { tabs: [create_tabs_slot] },
    		$$scope: { ctx }
    	};

    	if (/*value*/ ctx[6] !== void 0) {
    		tabs_props.value = /*value*/ ctx[6];
    	}

    	tabs = new Tabs({ props: tabs_props, $$inline: true });
    	binding_callbacks.push(() => bind(tabs, 'value', tabs_value_binding));

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(tabs.$$.fragment);
    			attr_dev(div, "slot", "extension");
    			add_location(div, file$1, 17, 1, 575);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(tabs, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const tabs_changes = {};

    			if (dirty & /*$$scope, isReporter, reporterOnDuty*/ 262) {
    				tabs_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty & /*value*/ 64) {
    				updating_value = true;
    				tabs_changes.value = /*value*/ ctx[6];
    				add_flush_callback(() => updating_value = false);
    			}

    			tabs.$set(tabs_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tabs.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tabs.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(tabs);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_extension_slot.name,
    		type: "slot",
    		source: "(18:1) ",
    		ctx
    	});

    	return block;
    }

    // (36:1) <WindowItem>
    function create_default_slot_4(ctx) {
    	let news;
    	let current;

    	news = new News({
    			props: { stories: /*stories*/ ctx[0] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(news.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(news, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const news_changes = {};
    			if (dirty & /*stories*/ 1) news_changes.stories = /*stories*/ ctx[0];
    			news.$set(news_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(news.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(news.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(news, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4.name,
    		type: "slot",
    		source: "(36:1) <WindowItem>",
    		ctx
    	});

    	return block;
    }

    // (39:1) {#if Config.tabs.showPrisonSentences}
    function create_if_block_2(ctx) {
    	let windowitem;
    	let current;

    	windowitem = new WindowItem({
    			props: {
    				$$slots: { default: [create_default_slot_3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(windowitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(windowitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const windowitem_changes = {};

    			if (dirty & /*$$scope, sentences*/ 272) {
    				windowitem_changes.$$scope = { dirty, ctx };
    			}

    			windowitem.$set(windowitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(windowitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(windowitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(windowitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(39:1) {#if Config.tabs.showPrisonSentences}",
    		ctx
    	});

    	return block;
    }

    // (40:2) <WindowItem>
    function create_default_slot_3(ctx) {
    	let prisonsentences;
    	let current;

    	prisonsentences = new PrisonSentences({
    			props: { sentences: /*sentences*/ ctx[4] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prisonsentences.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prisonsentences, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const prisonsentences_changes = {};
    			if (dirty & /*sentences*/ 16) prisonsentences_changes.sentences = /*sentences*/ ctx[4];
    			prisonsentences.$set(prisonsentences_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prisonsentences.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prisonsentences.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prisonsentences, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3.name,
    		type: "slot",
    		source: "(40:2) <WindowItem>",
    		ctx
    	});

    	return block;
    }

    // (44:1) {#if Config.tabs.showCityNews}
    function create_if_block_1(ctx) {
    	let windowitem;
    	let current;
    	windowitem = new WindowItem({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(windowitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(windowitem, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(windowitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(windowitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(windowitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(44:1) {#if Config.tabs.showCityNews}",
    		ctx
    	});

    	return block;
    }

    // (49:1) {#if isReporter}
    function create_if_block(ctx) {
    	let windowitem;
    	let current;

    	windowitem = new WindowItem({
    			props: {
    				$$slots: { default: [create_default_slot_1$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(windowitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(windowitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const windowitem_changes = {};

    			if (dirty & /*$$scope, stories, reporterLevel, isReporter, playerName*/ 299) {
    				windowitem_changes.$$scope = { dirty, ctx };
    			}

    			windowitem.$set(windowitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(windowitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(windowitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(windowitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(49:1) {#if isReporter}",
    		ctx
    	});

    	return block;
    }

    // (50:2) <WindowItem>
    function create_default_slot_1$1(ctx) {
    	let reporter;
    	let current;

    	reporter = new Reporter({
    			props: {
    				stories: /*stories*/ ctx[0],
    				reporterLevel: /*reporterLevel*/ ctx[3],
    				isReporter: /*isReporter*/ ctx[1],
    				playerName: /*playerName*/ ctx[5]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(reporter.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(reporter, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const reporter_changes = {};
    			if (dirty & /*stories*/ 1) reporter_changes.stories = /*stories*/ ctx[0];
    			if (dirty & /*reporterLevel*/ 8) reporter_changes.reporterLevel = /*reporterLevel*/ ctx[3];
    			if (dirty & /*isReporter*/ 2) reporter_changes.isReporter = /*isReporter*/ ctx[1];
    			if (dirty & /*playerName*/ 32) reporter_changes.playerName = /*playerName*/ ctx[5];
    			reporter.$set(reporter_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(reporter.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(reporter.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(reporter, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$1.name,
    		type: "slot",
    		source: "(50:2) <WindowItem>",
    		ctx
    	});

    	return block;
    }

    // (35:0) <Window {value}>
    function create_default_slot$1(ctx) {
    	let windowitem;
    	let t0;
    	let t1;
    	let t2;
    	let if_block2_anchor;
    	let current;

    	windowitem = new WindowItem({
    			props: {
    				$$slots: { default: [create_default_slot_4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	let if_block0 = Config.tabs.showPrisonSentences && create_if_block_2(ctx);
    	let if_block1 = Config.tabs.showCityNews && create_if_block_1(ctx);
    	let if_block2 = /*isReporter*/ ctx[1] && create_if_block(ctx);

    	const block = {
    		c: function create() {
    			create_component(windowitem.$$.fragment);
    			t0 = space();
    			if (if_block0) if_block0.c();
    			t1 = space();
    			if (if_block1) if_block1.c();
    			t2 = space();
    			if (if_block2) if_block2.c();
    			if_block2_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			mount_component(windowitem, target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, if_block2_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const windowitem_changes = {};

    			if (dirty & /*$$scope, stories*/ 257) {
    				windowitem_changes.$$scope = { dirty, ctx };
    			}

    			windowitem.$set(windowitem_changes);
    			if (Config.tabs.showPrisonSentences) if_block0.p(ctx, dirty);

    			if (/*isReporter*/ ctx[1]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty & /*isReporter*/ 2) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(windowitem.$$.fragment, local);
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(if_block2);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(windowitem.$$.fragment, local);
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(windowitem, detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t2);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(if_block2_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$1.name,
    		type: "slot",
    		source: "(35:0) <Window {value}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1(ctx) {
    	let appbar;
    	let t;
    	let window;
    	let current;

    	appbar = new AppBar({
    			props: {
    				$$slots: {
    					extension: [create_extension_slot],
    					title: [create_title_slot]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	window = new Window({
    			props: {
    				value: /*value*/ ctx[6],
    				$$slots: { default: [create_default_slot$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(appbar.$$.fragment);
    			t = space();
    			create_component(window.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(appbar, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(window, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const appbar_changes = {};

    			if (dirty & /*$$scope, value, isReporter, reporterOnDuty*/ 326) {
    				appbar_changes.$$scope = { dirty, ctx };
    			}

    			appbar.$set(appbar_changes);
    			const window_changes = {};
    			if (dirty & /*value*/ 64) window_changes.value = /*value*/ ctx[6];

    			if (dirty & /*$$scope, stories, reporterLevel, isReporter, playerName, sentences*/ 315) {
    				window_changes.$$scope = { dirty, ctx };
    			}

    			window.$set(window_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(appbar.$$.fragment, local);
    			transition_in(window.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(appbar.$$.fragment, local);
    			transition_out(window.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(appbar, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(window, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Content', slots, []);
    	let value = 0;
    	let { stories } = $$props;
    	let { isReporter } = $$props;
    	let { reporterOnDuty } = $$props;
    	let { reporterLevel } = $$props;
    	let { sentences } = $$props;
    	let { playerName } = $$props;

    	const writable_props = [
    		'stories',
    		'isReporter',
    		'reporterOnDuty',
    		'reporterLevel',
    		'sentences',
    		'playerName'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Content> was created with unknown prop '${key}'`);
    	});

    	function tabs_value_binding(value$1) {
    		value = value$1;
    		$$invalidate(6, value);
    	}

    	$$self.$$set = $$props => {
    		if ('stories' in $$props) $$invalidate(0, stories = $$props.stories);
    		if ('isReporter' in $$props) $$invalidate(1, isReporter = $$props.isReporter);
    		if ('reporterOnDuty' in $$props) $$invalidate(2, reporterOnDuty = $$props.reporterOnDuty);
    		if ('reporterLevel' in $$props) $$invalidate(3, reporterLevel = $$props.reporterLevel);
    		if ('sentences' in $$props) $$invalidate(4, sentences = $$props.sentences);
    		if ('playerName' in $$props) $$invalidate(5, playerName = $$props.playerName);
    	};

    	$$self.$capture_state = () => ({
    		Tabs,
    		Tab,
    		Window,
    		WindowItem,
    		AppBar,
    		Icon,
    		News,
    		Reporter,
    		mdiStar,
    		Config,
    		PrisonSentences,
    		value,
    		stories,
    		isReporter,
    		reporterOnDuty,
    		reporterLevel,
    		sentences,
    		playerName
    	});

    	$$self.$inject_state = $$props => {
    		if ('value' in $$props) $$invalidate(6, value = $$props.value);
    		if ('stories' in $$props) $$invalidate(0, stories = $$props.stories);
    		if ('isReporter' in $$props) $$invalidate(1, isReporter = $$props.isReporter);
    		if ('reporterOnDuty' in $$props) $$invalidate(2, reporterOnDuty = $$props.reporterOnDuty);
    		if ('reporterLevel' in $$props) $$invalidate(3, reporterLevel = $$props.reporterLevel);
    		if ('sentences' in $$props) $$invalidate(4, sentences = $$props.sentences);
    		if ('playerName' in $$props) $$invalidate(5, playerName = $$props.playerName);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		stories,
    		isReporter,
    		reporterOnDuty,
    		reporterLevel,
    		sentences,
    		playerName,
    		value,
    		tabs_value_binding
    	];
    }

    class Content extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
    			stories: 0,
    			isReporter: 1,
    			reporterOnDuty: 2,
    			reporterLevel: 3,
    			sentences: 4,
    			playerName: 5
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Content",
    			options,
    			id: create_fragment$1.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*stories*/ ctx[0] === undefined && !('stories' in props)) {
    			console.warn("<Content> was created without expected prop 'stories'");
    		}

    		if (/*isReporter*/ ctx[1] === undefined && !('isReporter' in props)) {
    			console.warn("<Content> was created without expected prop 'isReporter'");
    		}

    		if (/*reporterOnDuty*/ ctx[2] === undefined && !('reporterOnDuty' in props)) {
    			console.warn("<Content> was created without expected prop 'reporterOnDuty'");
    		}

    		if (/*reporterLevel*/ ctx[3] === undefined && !('reporterLevel' in props)) {
    			console.warn("<Content> was created without expected prop 'reporterLevel'");
    		}

    		if (/*sentences*/ ctx[4] === undefined && !('sentences' in props)) {
    			console.warn("<Content> was created without expected prop 'sentences'");
    		}

    		if (/*playerName*/ ctx[5] === undefined && !('playerName' in props)) {
    			console.warn("<Content> was created without expected prop 'playerName'");
    		}
    	}

    	get stories() {
    		throw new Error("<Content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set stories(value) {
    		throw new Error("<Content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isReporter() {
    		throw new Error("<Content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isReporter(value) {
    		throw new Error("<Content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get reporterOnDuty() {
    		throw new Error("<Content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set reporterOnDuty(value) {
    		throw new Error("<Content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get reporterLevel() {
    		throw new Error("<Content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set reporterLevel(value) {
    		throw new Error("<Content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get sentences() {
    		throw new Error("<Content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set sentences(value) {
    		throw new Error("<Content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get playerName() {
    		throw new Error("<Content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set playerName(value) {
    		throw new Error("<Content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\App.svelte generated by Svelte v3.48.0 */
    const file = "src\\App.svelte";

    // (40:2) <MaterialApp>
    function create_default_slot_1(ctx) {
    	let content;
    	let current;

    	content = new Content({
    			props: {
    				stories: /*stories*/ ctx[0],
    				isReporter: /*isReporter*/ ctx[3],
    				reporterLevel: /*reporterLevel*/ ctx[1],
    				reporterOnDuty: /*reporterOnDuty*/ ctx[2],
    				sentences: /*sentences*/ ctx[4],
    				playerName: /*playerName*/ ctx[5]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(content.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(content, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const content_changes = {};
    			if (dirty & /*stories*/ 1) content_changes.stories = /*stories*/ ctx[0];
    			if (dirty & /*isReporter*/ 8) content_changes.isReporter = /*isReporter*/ ctx[3];
    			if (dirty & /*reporterLevel*/ 2) content_changes.reporterLevel = /*reporterLevel*/ ctx[1];
    			if (dirty & /*reporterOnDuty*/ 4) content_changes.reporterOnDuty = /*reporterOnDuty*/ ctx[2];
    			if (dirty & /*sentences*/ 16) content_changes.sentences = /*sentences*/ ctx[4];
    			if (dirty & /*playerName*/ 32) content_changes.playerName = /*playerName*/ ctx[5];
    			content.$set(content_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(content.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(content.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(content, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1.name,
    		type: "slot",
    		source: "(40:2) <MaterialApp>",
    		ctx
    	});

    	return block;
    }

    // (39:1) <VisibilityProvider>
    function create_default_slot(ctx) {
    	let materialapp;
    	let current;

    	materialapp = new MaterialApp({
    			props: {
    				$$slots: { default: [create_default_slot_1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(materialapp.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(materialapp, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const materialapp_changes = {};

    			if (dirty & /*$$scope, stories, isReporter, reporterLevel, reporterOnDuty, sentences, playerName*/ 127) {
    				materialapp_changes.$$scope = { dirty, ctx };
    			}

    			materialapp.$set(materialapp_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(materialapp.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(materialapp.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(materialapp, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(39:1) <VisibilityProvider>",
    		ctx
    	});

    	return block;
    }

    function create_fragment(ctx) {
    	let link;
    	let t;
    	let main;
    	let visibilityprovider;
    	let current;

    	visibilityprovider = new VisibilityProvider({
    			props: {
    				$$slots: { default: [create_default_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			link = element("link");
    			t = space();
    			main = element("main");
    			create_component(visibilityprovider.$$.fragment);
    			attr_dev(link, "href", "//cdn.quilljs.com/1.3.6/quill.snow.css");
    			attr_dev(link, "rel", "stylesheet");
    			add_location(link, file, 34, 1, 1488);
    			attr_dev(main, "class", "container svelte-wej54l");
    			add_location(main, file, 37, 0, 1576);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			append_dev(document.head, link);
    			insert_dev(target, t, anchor);
    			insert_dev(target, main, anchor);
    			mount_component(visibilityprovider, main, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const visibilityprovider_changes = {};

    			if (dirty & /*$$scope, stories, isReporter, reporterLevel, reporterOnDuty, sentences, playerName*/ 127) {
    				visibilityprovider_changes.$$scope = { dirty, ctx };
    			}

    			visibilityprovider.$set(visibilityprovider_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(visibilityprovider.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(visibilityprovider.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			detach_dev(link);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(main);
    			destroy_component(visibilityprovider);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('App', slots, []);
    	let stories;
    	let reporterLevel;
    	let reporterOnDuty;
    	let isReporter;
    	let sentences;
    	let playerName;

    	window.addEventListener('message', event => {
    		const data = event.data;
    		$$invalidate(3, isReporter = data.isReporter);
    		$$invalidate(1, reporterLevel = data.reporterLevel);
    		$$invalidate(2, reporterOnDuty = data.reporterOnDuty);
    		$$invalidate(5, playerName = data.playerName);

    		const placeholderStory = {
    			id: 0,
    			title: 'Welcome to futte-newspaper',
    			body: "<p>futte-newspaper is a standalone ressource for FiveM. It has the following dependencies:</p><p><ul><li>qb-target</li><li>oxmysql</li></ul></p><p>I hope you'll enjoy the resource. Feel free to open issues if you find a bug/wish new functionality.</p><p>- xFutte</p>",
    			image: 'https://w0.peakpx.com/wallpaper/131/302/HD-wallpaper-grand-theft-auto-5-gta-v-grand-theft-auto-v-open-world-gaming-video-game-game-gta-5.jpg',
    			date: moment().format('MMMM Do YYYY'),
    			type: 'news',
    			publisher: 'xFutte @ Github'
    		};

    		$$invalidate(0, stories = data.stories.length ? data.stories : [placeholderStory]);
    		$$invalidate(4, sentences = data.sentences.length ? data.sentences : []);

    		// Show the newspaper GUI
    		visibility.set(true);
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		visibility,
    		VisibilityProvider,
    		MaterialApp,
    		Content,
    		moment,
    		stories,
    		reporterLevel,
    		reporterOnDuty,
    		isReporter,
    		sentences,
    		playerName
    	});

    	$$self.$inject_state = $$props => {
    		if ('stories' in $$props) $$invalidate(0, stories = $$props.stories);
    		if ('reporterLevel' in $$props) $$invalidate(1, reporterLevel = $$props.reporterLevel);
    		if ('reporterOnDuty' in $$props) $$invalidate(2, reporterOnDuty = $$props.reporterOnDuty);
    		if ('isReporter' in $$props) $$invalidate(3, isReporter = $$props.isReporter);
    		if ('sentences' in $$props) $$invalidate(4, sentences = $$props.sentences);
    		if ('playerName' in $$props) $$invalidate(5, playerName = $$props.playerName);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [stories, reporterLevel, reporterOnDuty, isReporter, sentences, playerName];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});
    	}
    }

    const app = new App({
        target: document.body,
    });

    return app;

})();
